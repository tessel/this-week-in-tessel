<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated from your Tumblr posts. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log into that blog as an administrator. -->
<!-- 2. Go to Manage: Import in the blog's admin panels. -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="Tumblr2WordPress/0.4" created="2016-06-27 02:55"-->
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:wp="http://wordpress.org/export/1.0/"
>
<channel>
  <title>Tessel Project Blog</title>
  <link>http://tesselproject.tumblr.com/</link>
  <description>Empowering software developers to plan, prototype, and produce embedded smart devices.</description>
  <pubDate>Mon, 27 Jun 2016 02:55:45 -0700</pubDate>
  <generator>http://Tumblr2WordPress/0.4(tumblr2wordpress.benapps.net)</generator>
  <language>en</language>
  <wp:wxr_version>1.0</wp:wxr_version>
  <wp:base_site_url>http://tesselproject.tumblr.com/</wp:base_site_url>
  <wp:base_blog_url>http://tesselproject.tumblr.com/</wp:base_blog_url>
  <wp:category>
    <wp:category_nicename>uncategorized</wp:category_nicename>
    <wp:category_parent></wp:category_parent>
    <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
  </wp:category>

	<wp:tag><wp:tag_slug>update</wp:tag_slug><wp:tag_name><![CDATA[update]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>updates</wp:tag_slug><wp:tag_name><![CDATA[updates]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>shipping</wp:tag_slug><wp:tag_name><![CDATA[shipping]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tessel</wp:tag_slug><wp:tag_name><![CDATA[tessel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tessel-2</wp:tag_slug><wp:tag_name><![CDATA[tessel 2]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>oshw</wp:tag_slug><wp:tag_name><![CDATA[oshw]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tessel-project</wp:tag_slug><wp:tag_name><![CDATA[tessel project]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tessel-hardware-community-shipping</wp:tag_slug><wp:tag_name><![CDATA[tessel hardware community shipping]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>twit</wp:tag_slug><wp:tag_name><![CDATA[twit]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>this-week-in-tessel</wp:tag_slug><wp:tag_name><![CDATA[this week in tessel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>dojo-foundation</wp:tag_slug><wp:tag_name><![CDATA[dojo foundation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jquery-foundation</wp:tag_slug><wp:tag_name><![CDATA[jquery foundation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>python</wp:tag_slug><wp:tag_name><![CDATA[python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>openwrt</wp:tag_slug><wp:tag_name><![CDATA[openwrt]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>fcc</wp:tag_slug><wp:tag_name><![CDATA[fcc]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>shipping-update</wp:tag_slug><wp:tag_name><![CDATA[shipping update]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>china</wp:tag_slug><wp:tag_name><![CDATA[china]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>hanselminutes</wp:tag_slug><wp:tag_name><![CDATA[hanselminutes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>podcast</wp:tag_slug><wp:tag_name><![CDATA[podcast]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>project</wp:tag_slug><wp:tag_name><![CDATA[project]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>kelsey-breseman</wp:tag_slug><wp:tag_name><![CDATA[kelsey breseman]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>manufacturing</wp:tag_slug><wp:tag_name><![CDATA[manufacturing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>projects</wp:tag_slug><wp:tag_name><![CDATA[projects]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>docs</wp:tag_slug><wp:tag_name><![CDATA[docs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>fritzing</wp:tag_slug><wp:tag_name><![CDATA[fritzing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>speaking</wp:tag_slug><wp:tag_name><![CDATA[speaking]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>twit</wp:tag_slug><wp:tag_name><![CDATA[TWIT]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>this-week-in-tessel</wp:tag_slug><wp:tag_name><![CDATA[This week in tessel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>new-team-members</wp:tag_slug><wp:tag_name><![CDATA[new team members]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tessel</wp:tag_slug><wp:tag_name><![CDATA[Tessel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>speaking</wp:tag_slug><wp:tag_name><![CDATA[Speaking]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>manufacturing</wp:tag_slug><wp:tag_name><![CDATA[Manufacturing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>testing</wp:tag_slug><wp:tag_name><![CDATA[Testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>projects</wp:tag_slug><wp:tag_name><![CDATA[Projects]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>workshops</wp:tag_slug><wp:tag_name><![CDATA[workshops]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>conferences</wp:tag_slug><wp:tag_name><![CDATA[conferences]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>presenter</wp:tag_slug><wp:tag_name><![CDATA[presenter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>speaker</wp:tag_slug><wp:tag_name><![CDATA[speaker]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>presenting</wp:tag_slug><wp:tag_name><![CDATA[presenting]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>cfp</wp:tag_slug><wp:tag_name><![CDATA[cfp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>hardware</wp:tag_slug><wp:tag_name><![CDATA[hardware]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>open-source</wp:tag_slug><wp:tag_name><![CDATA[open source]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>governance</wp:tag_slug><wp:tag_name><![CDATA[governance]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>iojs</wp:tag_slug><wp:tag_name><![CDATA[io.js]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>nodejs</wp:tag_slug><wp:tag_name><![CDATA[node.js]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>javascript</wp:tag_slug><wp:tag_name><![CDATA[javascript]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>web-developers</wp:tag_slug><wp:tag_name><![CDATA[web developers]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>dojo</wp:tag_slug><wp:tag_name><![CDATA[dojo]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>announcement</wp:tag_slug><wp:tag_name><![CDATA[announcement]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>design</wp:tag_slug><wp:tag_name><![CDATA[design]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>node</wp:tag_slug><wp:tag_name><![CDATA[node]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>code</wp:tag_slug><wp:tag_name><![CDATA[code]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>international</wp:tag_slug><wp:tag_name><![CDATA[international]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jon-mckay</wp:tag_slug><wp:tag_name><![CDATA[jon mckay]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>contributing</wp:tag_slug><wp:tag_name><![CDATA[contributing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tessel2</wp:tag_slug><wp:tag_name><![CDATA[tessel2]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>technical</wp:tag_slug><wp:tag_name><![CDATA[technical]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>run</wp:tag_slug><wp:tag_name><![CDATA[run]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>push</wp:tag_slug><wp:tag_name><![CDATA[push]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>erase</wp:tag_slug><wp:tag_name><![CDATA[erase]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tessel-push</wp:tag_slug><wp:tag_name><![CDATA[tessel push]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>developer</wp:tag_slug><wp:tag_name><![CDATA[developer]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>development-setup</wp:tag_slug><wp:tag_name><![CDATA[development setup]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>openstate</wp:tag_slug><wp:tag_name><![CDATA[openstate]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>oss</wp:tag_slug><wp:tag_name><![CDATA[oss]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>dominik-wind</wp:tag_slug><wp:tag_name><![CDATA[dominik wind]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>opencamp</wp:tag_slug><wp:tag_name><![CDATA[opencamp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>poc21</wp:tag_slug><wp:tag_name><![CDATA[POC21]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>cop21</wp:tag_slug><wp:tag_name><![CDATA[COP21]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>sustainability</wp:tag_slug><wp:tag_name><![CDATA[sustainability]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tessel-2</wp:tag_slug><wp:tag_name><![CDATA[Tessel 2]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>eric-kolker</wp:tag_slug><wp:tag_name><![CDATA[eric kolker]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>technical-machine</wp:tag_slug><wp:tag_name><![CDATA[technical machine]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>features</wp:tag_slug><wp:tag_name><![CDATA[features]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>electrical-engineering</wp:tag_slug><wp:tag_name><![CDATA[electrical engineering]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>node</wp:tag_slug><wp:tag_name><![CDATA[Node]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>linux</wp:tag_slug><wp:tag_name><![CDATA[Linux]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>openwrt</wp:tag_slug><wp:tag_name><![CDATA[OpenWRT]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>javascript</wp:tag_slug><wp:tag_name><![CDATA[Javascript]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>microcontroller</wp:tag_slug><wp:tag_name><![CDATA[Microcontroller]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>microprocessor</wp:tag_slug><wp:tag_name><![CDATA[Microprocessor]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jon-mckay</wp:tag_slug><wp:tag_name><![CDATA[Jon McKay]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>technical-machine</wp:tag_slug><wp:tag_name><![CDATA[Technical Machine]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>new-product</wp:tag_slug><wp:tag_name><![CDATA[new product]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>javascript-on-hardware</wp:tag_slug><wp:tag_name><![CDATA[javascript on hardware]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>javascript-microcontroller</wp:tag_slug><wp:tag_name><![CDATA[javascript microcontroller]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>rust-microcontroller</wp:tag_slug><wp:tag_name><![CDATA[rust microcontroller]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>python-microcontroller</wp:tag_slug><wp:tag_name><![CDATA[python microcontroller]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jay-henderson</wp:tag_slug><wp:tag_name><![CDATA[jay henderson]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>interview</wp:tag_slug><wp:tag_name><![CDATA[interview]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>code-school</wp:tag_slug><wp:tag_name><![CDATA[code school]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>barrl</wp:tag_slug><wp:tag_name><![CDATA[barrl]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>education</wp:tag_slug><wp:tag_name><![CDATA[education]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>dave-nugent</wp:tag_slug><wp:tag_name><![CDATA[Dave Nugent]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>kelsey-breseman</wp:tag_slug><wp:tag_name><![CDATA[Kelsey Breseman]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>hackathon</wp:tag_slug><wp:tag_name><![CDATA[hackathon]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>pubnub</wp:tag_slug><wp:tag_name><![CDATA[PubNub]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>hacking</wp:tag_slug><wp:tag_name><![CDATA[hacking]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>meetup</wp:tag_slug><wp:tag_name><![CDATA[meetup]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>community</wp:tag_slug><wp:tag_name><![CDATA[community]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jonathan-clark</wp:tag_slug><wp:tag_name><![CDATA[Jonathan Clark]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>sine-wave-technologies</wp:tag_slug><wp:tag_name><![CDATA[Sine Wave Technologies]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>applications</wp:tag_slug><wp:tag_name><![CDATA[Applications]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>interview</wp:tag_slug><wp:tag_name><![CDATA[Interview]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>industry</wp:tag_slug><wp:tag_name><![CDATA[Industry]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>new-hardware</wp:tag_slug><wp:tag_name><![CDATA[new hardware]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>wifi</wp:tag_slug><wp:tag_name><![CDATA[wifi]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>iojs</wp:tag_slug><wp:tag_name><![CDATA[iojs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>embedded</wp:tag_slug><wp:tag_name><![CDATA[embedded]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>modules</wp:tag_slug><wp:tag_name><![CDATA[modules]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>kevin-sidwar</wp:tag_slug><wp:tag_name><![CDATA[kevin sidwar]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>diy</wp:tag_slug><wp:tag_name><![CDATA[diy]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>diy-module</wp:tag_slug><wp:tag_name><![CDATA[diy module]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>new-module</wp:tag_slug><wp:tag_name><![CDATA[new module]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>prototyping</wp:tag_slug><wp:tag_name><![CDATA[prototyping]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>module</wp:tag_slug><wp:tag_name><![CDATA[module]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>proto-module</wp:tag_slug><wp:tag_name><![CDATA[proto-module]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>community-contributed</wp:tag_slug><wp:tag_name><![CDATA[community contributed]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>pirumpi</wp:tag_slug><wp:tag_name><![CDATA[pirumpi]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>microcontrollers</wp:tag_slug><wp:tag_name><![CDATA[microcontrollers]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>webservers</wp:tag_slug><wp:tag_name><![CDATA[webservers]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>user-interview</wp:tag_slug><wp:tag_name><![CDATA[user interview]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>josh-dudley</wp:tag_slug><wp:tag_name><![CDATA[josh dudley]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>io2work</wp:tag_slug><wp:tag_name><![CDATA[io2work]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>industrial</wp:tag_slug><wp:tag_name><![CDATA[industrial]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>industrial-automation</wp:tag_slug><wp:tag_name><![CDATA[industrial automation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>whats-next</wp:tag_slug><wp:tag_name><![CDATA[what's next]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>logistics</wp:tag_slug><wp:tag_name><![CDATA[logistics]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>culture</wp:tag_slug><wp:tag_name><![CDATA[culture]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tech-culture</wp:tag_slug><wp:tag_name><![CDATA[tech culture]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tech-talk</wp:tag_slug><wp:tag_name><![CDATA[tech talk]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>nodeday</wp:tag_slug><wp:tag_name><![CDATA[nodeday]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ken-nierenhausen</wp:tag_slug><wp:tag_name><![CDATA[Ken Nierenhausen]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>fulfillment</wp:tag_slug><wp:tag_name><![CDATA[fulfillment]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>storefront</wp:tag_slug><wp:tag_name><![CDATA[storefront]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>luajut</wp:tag_slug><wp:tag_name><![CDATA[luajut]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>lua</wp:tag_slug><wp:tag_name><![CDATA[lua]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>fractal</wp:tag_slug><wp:tag_name><![CDATA[fractal]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>hiring</wp:tag_slug><wp:tag_name><![CDATA[hiring]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tim-ryan</wp:tag_slug><wp:tag_name><![CDATA[Tim Ryan]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>javascript</wp:tag_slug><wp:tag_name><![CDATA[JavaScript]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>hardware</wp:tag_slug><wp:tag_name><![CDATA[Hardware]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>lua</wp:tag_slug><wp:tag_name><![CDATA[Lua]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>luajit</wp:tag_slug><wp:tag_name><![CDATA[LuaJIT]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>colony</wp:tag_slug><wp:tag_name><![CDATA[Colony]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>performance</wp:tag_slug><wp:tag_name><![CDATA[Performance]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>speed</wp:tag_slug><wp:tag_name><![CDATA[Speed]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>bytecode</wp:tag_slug><wp:tag_name><![CDATA[Bytecode]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>embedded</wp:tag_slug><wp:tag_name><![CDATA[Embedded]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>microcontrollers</wp:tag_slug><wp:tag_name><![CDATA[Microcontrollers]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>kwyn-meagher</wp:tag_slug><wp:tag_name><![CDATA[kwyn meagher]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>hack-reactor</wp:tag_slug><wp:tag_name><![CDATA[hack reactor]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>harleykwyn</wp:tag_slug><wp:tag_name><![CDATA[harleykwyn]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>fullstack</wp:tag_slug><wp:tag_name><![CDATA[fullstack]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>demo</wp:tag_slug><wp:tag_name><![CDATA[demo]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>skillsmatter</wp:tag_slug><wp:tag_name><![CDATA[skillsmatter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>kevin-mehall</wp:tag_slug><wp:tag_name><![CDATA[kevin mehall]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>apis-to-electrons</wp:tag_slug><wp:tag_name><![CDATA[apis to electrons]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>guatemala</wp:tag_slug><wp:tag_name><![CDATA[guatemala]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>talks</wp:tag_slug><wp:tag_name><![CDATA[talks]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jia-huang</wp:tag_slug><wp:tag_name><![CDATA[jia huang]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>keen</wp:tag_slug><wp:tag_name><![CDATA[keen]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>keenio</wp:tag_slug><wp:tag_name><![CDATA[keenio]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>integration</wp:tag_slug><wp:tag_name><![CDATA[integration]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>cloud</wp:tag_slug><wp:tag_name><![CDATA[cloud]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>analytics</wp:tag_slug><wp:tag_name><![CDATA[analytics]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>samr21</wp:tag_slug><wp:tag_name><![CDATA[samr21]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>zigbee</wp:tag_slug><wp:tag_name><![CDATA[zigbee]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>iot</wp:tag_slug><wp:tag_name><![CDATA[iot]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>6lowpan</wp:tag_slug><wp:tag_name><![CDATA[6lowpan]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>microcontroller</wp:tag_slug><wp:tag_name><![CDATA[microcontroller]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>research</wp:tag_slug><wp:tag_name><![CDATA[research]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>rd</wp:tag_slug><wp:tag_name><![CDATA[r&d]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>suggestions</wp:tag_slug><wp:tag_name><![CDATA[suggestions]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ble</wp:tag_slug><wp:tag_name><![CDATA[ble]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>bluetooth</wp:tag_slug><wp:tag_name><![CDATA[bluetooth]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>biosensing</wp:tag_slug><wp:tag_name><![CDATA[biosensing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>soil-moisture</wp:tag_slug><wp:tag_name><![CDATA[soil moisture]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>feedback</wp:tag_slug><wp:tag_name><![CDATA[feedback]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>backers</wp:tag_slug><wp:tag_name><![CDATA[backers]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>startup</wp:tag_slug><wp:tag_name><![CDATA[startup]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>events</wp:tag_slug><wp:tag_name><![CDATA[events]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>motivation</wp:tag_slug><wp:tag_name><![CDATA[motivation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>vision</wp:tag_slug><wp:tag_name><![CDATA[vision]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>reinvigorate</wp:tag_slug><wp:tag_name><![CDATA[reinvigorate]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>scaling</wp:tag_slug><wp:tag_name><![CDATA[scaling]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>mqtt</wp:tag_slug><wp:tag_name><![CDATA[mqtt]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>js</wp:tag_slug><wp:tag_name><![CDATA[js]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>temperature</wp:tag_slug><wp:tag_name><![CDATA[temperature]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>home-automation</wp:tag_slug><wp:tag_name><![CDATA[home automation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>climate</wp:tag_slug><wp:tag_name><![CDATA[climate]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jon</wp:tag_slug><wp:tag_name><![CDATA[jon]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>mckay</wp:tag_slug><wp:tag_name><![CDATA[mckay]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>matteo</wp:tag_slug><wp:tag_name><![CDATA[matteo]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>collina</wp:tag_slug><wp:tag_name><![CDATA[collina]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>mqttjs</wp:tag_slug><wp:tag_name><![CDATA[mqtt.js]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>button</wp:tag_slug><wp:tag_name><![CDATA[button]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tutorial</wp:tag_slug><wp:tag_name><![CDATA[tutorial]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>how-to</wp:tag_slug><wp:tag_name><![CDATA[how-to]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>electronics</wp:tag_slug><wp:tag_name><![CDATA[electronics]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>contribution-guide</wp:tag_slug><wp:tag_name><![CDATA[contribution guide]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>howstuffworks</wp:tag_slug><wp:tag_name><![CDATA[howstuffworks]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>software</wp:tag_slug><wp:tag_name><![CDATA[software]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>compiler</wp:tag_slug><wp:tag_name><![CDATA[compiler]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>runtime</wp:tag_slug><wp:tag_name><![CDATA[runtime]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>firmware</wp:tag_slug><wp:tag_name><![CDATA[firmware]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>cli</wp:tag_slug><wp:tag_name><![CDATA[cli]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>how-tessel-works</wp:tag_slug><wp:tag_name><![CDATA[how tessel works]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>how-to-run-javascript-on-a-microcontroller</wp:tag_slug><wp:tag_name><![CDATA[how to run javascript on a microcontroller]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>javascript-on-microcontrollers</wp:tag_slug><wp:tag_name><![CDATA[javascript on microcontrollers]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>twilio</wp:tag_slug><wp:tag_name><![CDATA[twilio]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>compatibility</wp:tag_slug><wp:tag_name><![CDATA[compatibility]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>sms</wp:tag_slug><wp:tag_name><![CDATA[sms]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>internet-of-things</wp:tag_slug><wp:tag_name><![CDATA[internet of things]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>internet-of-people</wp:tag_slug><wp:tag_name><![CDATA[internet of people]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ricky</wp:tag_slug><wp:tag_name><![CDATA[ricky]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>robinett</wp:tag_slug><wp:tag_name><![CDATA[robinett]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>luajit</wp:tag_slug><wp:tag_name><![CDATA[luajit]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jobs</wp:tag_slug><wp:tag_name><![CDATA[jobs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>interns</wp:tag_slug><wp:tag_name><![CDATA[interns]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>backer</wp:tag_slug><wp:tag_name><![CDATA[backer]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>svdockum</wp:tag_slug><wp:tag_name><![CDATA[svdockum]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>stefanvandockum</wp:tag_slug><wp:tag_name><![CDATA[stefanvandockum]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>neopixels</wp:tag_slug><wp:tag_name><![CDATA[neopixels]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>3d-printing</wp:tag_slug><wp:tag_name><![CDATA[3D Printing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>smart-home</wp:tag_slug><wp:tag_name><![CDATA[smart home]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>sensors</wp:tag_slug><wp:tag_name><![CDATA[sensors]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>paige-cote</wp:tag_slug><wp:tag_name><![CDATA[paige cote]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>intern</wp:tag_slug><wp:tag_name><![CDATA[intern]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>internship</wp:tag_slug><wp:tag_name><![CDATA[internship]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>summer-2014</wp:tag_slug><wp:tag_name><![CDATA[summer 2014]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>c</wp:tag_slug><wp:tag_name><![CDATA[c]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>native</wp:tag_slug><wp:tag_name><![CDATA[native]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>js-on-hardware</wp:tag_slug><wp:tag_name><![CDATA[js on hardware]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>arduino</wp:tag_slug><wp:tag_name><![CDATA[arduino]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>uart</wp:tag_slug><wp:tag_name><![CDATA[uart]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>serial-port</wp:tag_slug><wp:tag_name><![CDATA[serial port]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>nathan-lintz</wp:tag_slug><wp:tag_name><![CDATA[nathan lintz]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>portable-tessel-platform</wp:tag_slug><wp:tag_name><![CDATA[portable tessel platform]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ptp</wp:tag_slug><wp:tag_name><![CDATA[ptp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>raspberry-pi</wp:tag_slug><wp:tag_name><![CDATA[raspberry pi]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>cubieboard</wp:tag_slug><wp:tag_name><![CDATA[cubieboard]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>portable</wp:tag_slug><wp:tag_name><![CDATA[portable]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>c</wp:tag_slug><wp:tag_name><![CDATA[C]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>platform</wp:tag_slug><wp:tag_name><![CDATA[platform]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>performance</wp:tag_slug><wp:tag_name><![CDATA[performance]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>speed</wp:tag_slug><wp:tag_name><![CDATA[speed]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>evan-simpson</wp:tag_slug><wp:tag_name><![CDATA[evan simpson]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>summer</wp:tag_slug><wp:tag_name><![CDATA[summer]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>summer-intern</wp:tag_slug><wp:tag_name><![CDATA[summer intern]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jia-huang</wp:tag_slug><wp:tag_name><![CDATA[Jia Huang]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>cc3k</wp:tag_slug><wp:tag_name><![CDATA[cc3k]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>cc3000</wp:tag_slug><wp:tag_name><![CDATA[cc3000]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>api</wp:tag_slug><wp:tag_name><![CDATA[api]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>getting-started</wp:tag_slug><wp:tag_name><![CDATA[getting started]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>documentation</wp:tag_slug><wp:tag_name><![CDATA[documentation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>bluetooth-40</wp:tag_slug><wp:tag_name><![CDATA[Bluetooth 4.0]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>bluetooth-smart</wp:tag_slug><wp:tag_name><![CDATA[Bluetooth Smart]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>bluetooth-low-energy</wp:tag_slug><wp:tag_name><![CDATA[Bluetooth Low Energy]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ibeacon</wp:tag_slug><wp:tag_name><![CDATA[iBeacon]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>projects-portal</wp:tag_slug><wp:tag_name><![CDATA[projects portal]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>instructables</wp:tag_slug><wp:tag_name><![CDATA[instructables]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>thingiverse</wp:tag_slug><wp:tag_name><![CDATA[thingiverse]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ready-mades</wp:tag_slug><wp:tag_name><![CDATA[ready-mades]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>modularity</wp:tag_slug><wp:tag_name><![CDATA[modularity]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>npm</wp:tag_slug><wp:tag_name><![CDATA[npm]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>oshw</wp:tag_slug><wp:tag_name><![CDATA[OSHW]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>oss</wp:tag_slug><wp:tag_name><![CDATA[OSS]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>3dp</wp:tag_slug><wp:tag_name><![CDATA[3DP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>new-hire</wp:tag_slug><wp:tag_name><![CDATA[new hire]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>portal</wp:tag_slug><wp:tag_name><![CDATA[portal]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ucsd</wp:tag_slug><wp:tag_name><![CDATA[ucsd]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ble</wp:tag_slug><wp:tag_name><![CDATA[BLE]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>bluetooth</wp:tag_slug><wp:tag_name><![CDATA[Bluetooth]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>data</wp:tag_slug><wp:tag_name><![CDATA[data]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>iot</wp:tag_slug><wp:tag_name><![CDATA[IoT]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>adafruit</wp:tag_slug><wp:tag_name><![CDATA[adafruit]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>seeed</wp:tag_slug><wp:tag_name><![CDATA[seeed]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>pir</wp:tag_slug><wp:tag_name><![CDATA[pir]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>pulse</wp:tag_slug><wp:tag_name><![CDATA[pulse]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>infrared</wp:tag_slug><wp:tag_name><![CDATA[infrared]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>wires</wp:tag_slug><wp:tag_name><![CDATA[wires]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tools</wp:tag_slug><wp:tag_name><![CDATA[tools]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tessel-tools</wp:tag_slug><wp:tag_name><![CDATA[tessel tools]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tutorials</wp:tag_slug><wp:tag_name><![CDATA[tutorials]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>spi</wp:tag_slug><wp:tag_name><![CDATA[spi]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>i2c</wp:tag_slug><wp:tag_name><![CDATA[i2c]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>avr</wp:tag_slug><wp:tag_name><![CDATA[avr]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>usb</wp:tag_slug><wp:tag_name><![CDATA[USB]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>examples</wp:tag_slug><wp:tag_name><![CDATA[Examples]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>eran-hammer</wp:tag_slug><wp:tag_name><![CDATA[eran hammer]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>fireworks</wp:tag_slug><wp:tag_name><![CDATA[fireworks]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>led</wp:tag_slug><wp:tag_name><![CDATA[LED]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>custom-firmware</wp:tag_slug><wp:tag_name><![CDATA[custom firmware]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>led-strip</wp:tag_slug><wp:tag_name><![CDATA[LED strip]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>led-fireworks</wp:tag_slug><wp:tag_name><![CDATA[LED fireworks]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>nodeconf</wp:tag_slug><wp:tag_name><![CDATA[NodeConf]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>unrob</wp:tag_slug><wp:tag_name><![CDATA[unrob]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>elevator</wp:tag_slug><wp:tag_name><![CDATA[elevator]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>johnny-five</wp:tag_slug><wp:tag_name><![CDATA[johnny-five]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>user</wp:tag_slug><wp:tag_name><![CDATA[user]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>forums</wp:tag_slug><wp:tag_name><![CDATA[forums]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>toolchain</wp:tag_slug><wp:tag_name><![CDATA[toolchain]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>contributors</wp:tag_slug><wp:tag_name><![CDATA[contributors]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>diy</wp:tag_slug><wp:tag_name><![CDATA[DIY]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>technical-intern</wp:tag_slug><wp:tag_name><![CDATA[technical intern]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>user-interface</wp:tag_slug><wp:tag_name><![CDATA[user interface]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>user-interaction</wp:tag_slug><wp:tag_name><![CDATA[user interaction]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>disney</wp:tag_slug><wp:tag_name><![CDATA[disney]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>rfid</wp:tag_slug><wp:tag_name><![CDATA[rfid]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>olin</wp:tag_slug><wp:tag_name><![CDATA[olin]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>student</wp:tag_slug><wp:tag_name><![CDATA[student]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ubiquitous-computing</wp:tag_slug><wp:tag_name><![CDATA[ubiquitous computing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>oreilly</wp:tag_slug><wp:tag_name><![CDATA[oreilly]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>solidcon</wp:tag_slug><wp:tag_name><![CDATA[solidcon]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>oreilly</wp:tag_slug><wp:tag_name><![CDATA[o'reilly]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>neurosky</wp:tag_slug><wp:tag_name><![CDATA[neurosky]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>myo</wp:tag_slug><wp:tag_name><![CDATA[myo]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>emotiv</wp:tag_slug><wp:tag_name><![CDATA[emotiv]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>hue-lights</wp:tag_slug><wp:tag_name><![CDATA[hue lights]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>emg</wp:tag_slug><wp:tag_name><![CDATA[EMG]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>embedded-devices</wp:tag_slug><wp:tag_name><![CDATA[embedded devices]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>intern-program</wp:tag_slug><wp:tag_name><![CDATA[intern program]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>milestone</wp:tag_slug><wp:tag_name><![CDATA[milestone]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>wireless-code</wp:tag_slug><wp:tag_name><![CDATA[wireless code]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>open-company</wp:tag_slug><wp:tag_name><![CDATA[open company]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>internet</wp:tag_slug><wp:tag_name><![CDATA[internet]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>hardware-is-hard</wp:tag_slug><wp:tag_name><![CDATA[hardware is hard]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>expectations</wp:tag_slug><wp:tag_name><![CDATA[expectations]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>shipped</wp:tag_slug><wp:tag_name><![CDATA[shipped]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>crowdfunding</wp:tag_slug><wp:tag_name><![CDATA[crowdfunding]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>pre-orders</wp:tag_slug><wp:tag_name><![CDATA[pre-orders]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>celebration</wp:tag_slug><wp:tag_name><![CDATA[celebration]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>happy</wp:tag_slug><wp:tag_name><![CDATA[happy]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>zuora</wp:tag_slug><wp:tag_name><![CDATA[zuora]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>connected-devices</wp:tag_slug><wp:tag_name><![CDATA[connected devices]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>mark-weiser</wp:tag_slug><wp:tag_name><![CDATA[mark weiser]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>interaction</wp:tag_slug><wp:tag_name><![CDATA[interaction]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>progress</wp:tag_slug><wp:tag_name><![CDATA[progress]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>module-drivers</wp:tag_slug><wp:tag_name><![CDATA[module drivers]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>worthington-assembly</wp:tag_slug><wp:tag_name><![CDATA[worthington assembly]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>pick-and-place</wp:tag_slug><wp:tag_name><![CDATA[pick and place]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>packaging</wp:tag_slug><wp:tag_name><![CDATA[packaging]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>testing</wp:tag_slug><wp:tag_name><![CDATA[testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>testalator</wp:tag_slug><wp:tag_name><![CDATA[testalator]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>qa</wp:tag_slug><wp:tag_name><![CDATA[qa]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>quality-control</wp:tag_slug><wp:tag_name><![CDATA[quality control]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>office</wp:tag_slug><wp:tag_name><![CDATA[office]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>budgeting</wp:tag_slug><wp:tag_name><![CDATA[budgeting]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>startup-advice</wp:tag_slug><wp:tag_name><![CDATA[startup advice]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>pcbs</wp:tag_slug><wp:tag_name><![CDATA[PCBs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>assembly</wp:tag_slug><wp:tag_name><![CDATA[assembly]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>timeline</wp:tag_slug><wp:tag_name><![CDATA[timeline]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tim-ryan</wp:tag_slug><wp:tag_name><![CDATA[tim ryan]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>reverse-engineering</wp:tag_slug><wp:tag_name><![CDATA[reverse engineering]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>logic</wp:tag_slug><wp:tag_name><![CDATA[logic]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>saleae-logic</wp:tag_slug><wp:tag_name><![CDATA[saleae logic]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>saleae</wp:tag_slug><wp:tag_name><![CDATA[saleae]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>spi</wp:tag_slug><wp:tag_name><![CDATA[SPI]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tcp</wp:tag_slug><wp:tag_name><![CDATA[tcp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ip</wp:tag_slug><wp:tag_name><![CDATA[ip]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>sigrok</wp:tag_slug><wp:tag_name><![CDATA[sigrok]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>debugging</wp:tag_slug><wp:tag_name><![CDATA[debugging]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>high-level</wp:tag_slug><wp:tag_name><![CDATA[high level]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>automated-debugging</wp:tag_slug><wp:tag_name><![CDATA[automated debugging]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>pcbs</wp:tag_slug><wp:tag_name><![CDATA[pcbs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>organization</wp:tag_slug><wp:tag_name><![CDATA[organization]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>project-management</wp:tag_slug><wp:tag_name><![CDATA[project management]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>pm</wp:tag_slug><wp:tag_name><![CDATA[pm]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>asana</wp:tag_slug><wp:tag_name><![CDATA[asana]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>post-it</wp:tag_slug><wp:tag_name><![CDATA[post-it]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tasks</wp:tag_slug><wp:tag_name><![CDATA[tasks]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>task-management</wp:tag_slug><wp:tag_name><![CDATA[task management]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>company-culture</wp:tag_slug><wp:tag_name><![CDATA[company culture]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>revisions</wp:tag_slug><wp:tag_name><![CDATA[revisions]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>iterative-design</wp:tag_slug><wp:tag_name><![CDATA[iterative design]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>technology</wp:tag_slug><wp:tag_name><![CDATA[technology]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>pcb</wp:tag_slug><wp:tag_name><![CDATA[pcb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>history</wp:tag_slug><wp:tag_name><![CDATA[history]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>first-run</wp:tag_slug><wp:tag_name><![CDATA[first run]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>first-run-experience</wp:tag_slug><wp:tag_name><![CDATA[first run experience]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>installation</wp:tag_slug><wp:tag_name><![CDATA[installation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>fre</wp:tag_slug><wp:tag_name><![CDATA[fre]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>frontend</wp:tag_slug><wp:tag_name><![CDATA[frontend]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>user-testing</wp:tag_slug><wp:tag_name><![CDATA[user testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>user-oriented-collaborative-design</wp:tag_slug><wp:tag_name><![CDATA[user oriented collaborative design]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>design-reviews</wp:tag_slug><wp:tag_name><![CDATA[design reviews]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>design-review</wp:tag_slug><wp:tag_name><![CDATA[design review]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>stress</wp:tag_slug><wp:tag_name><![CDATA[stress]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>stress-testing</wp:tag_slug><wp:tag_name><![CDATA[stress testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>power</wp:tag_slug><wp:tag_name><![CDATA[power]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tessel-4</wp:tag_slug><wp:tag_name><![CDATA[tessel 4]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>test</wp:tag_slug><wp:tag_name><![CDATA[test]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>voltage</wp:tag_slug><wp:tag_name><![CDATA[voltage]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>update</wp:tag_slug><wp:tag_name><![CDATA[Update]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>electrical-engineering</wp:tag_slug><wp:tag_name><![CDATA[Electrical Engineering]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>revision</wp:tag_slug><wp:tag_name><![CDATA[Revision]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>test</wp:tag_slug><wp:tag_name><![CDATA[Test]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>power</wp:tag_slug><wp:tag_name><![CDATA[Power]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>reset</wp:tag_slug><wp:tag_name><![CDATA[reset]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>presentation</wp:tag_slug><wp:tag_name><![CDATA[presentation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>fluentconf</wp:tag_slug><wp:tag_name><![CDATA[fluentconf]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>bluegiga</wp:tag_slug><wp:tag_name><![CDATA[bluegiga]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ble113</wp:tag_slug><wp:tag_name><![CDATA[ble113]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>mooshimeter</wp:tag_slug><wp:tag_name><![CDATA[mooshimeter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>mooshim-engineering</wp:tag_slug><wp:tag_name><![CDATA[mooshim engineering]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tm-00-03</wp:tag_slug><wp:tag_name><![CDATA[tm-00-03]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ethical-company</wp:tag_slug><wp:tag_name><![CDATA[ethical company]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>setback</wp:tag_slug><wp:tag_name><![CDATA[setback]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>nxp</wp:tag_slug><wp:tag_name><![CDATA[nxp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>nxp</wp:tag_slug><wp:tag_name><![CDATA[NXP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>bug</wp:tag_slug><wp:tag_name><![CDATA[bug]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>marketing</wp:tag_slug><wp:tag_name><![CDATA[marketing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>press-release</wp:tag_slug><wp:tag_name><![CDATA[press release]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>fundraising</wp:tag_slug><wp:tag_name><![CDATA[fundraising]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>venture-capital</wp:tag_slug><wp:tag_name><![CDATA[venture capital]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>pr</wp:tag_slug><wp:tag_name><![CDATA[PR]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>pr-tips</wp:tag_slug><wp:tag_name><![CDATA[PR tips]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>public-relations</wp:tag_slug><wp:tag_name><![CDATA[public relations]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>media-relations</wp:tag_slug><wp:tag_name><![CDATA[media relations]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>reporters</wp:tag_slug><wp:tag_name><![CDATA[reporters]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>gprs</wp:tag_slug><wp:tag_name><![CDATA[gprs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>2g</wp:tag_slug><wp:tag_name><![CDATA[2g]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>phone-calls</wp:tag_slug><wp:tag_name><![CDATA[phone calls]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tesselphone</wp:tag_slug><wp:tag_name><![CDATA[tesselphone]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tessel-phone</wp:tag_slug><wp:tag_name><![CDATA[tessel phone]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tessel-texts</wp:tag_slug><wp:tag_name><![CDATA[tessel texts]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>text-from-tessel</wp:tag_slug><wp:tag_name><![CDATA[text from tessel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>production</wp:tag_slug><wp:tag_name><![CDATA[production]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ir</wp:tag_slug><wp:tag_name><![CDATA[ir]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jialiya-huang</wp:tag_slug><wp:tag_name><![CDATA[jialiya huang]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>beta-testing</wp:tag_slug><wp:tag_name><![CDATA[beta testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>beta-tier</wp:tag_slug><wp:tag_name><![CDATA[beta tier]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>beta-program</wp:tag_slug><wp:tag_name><![CDATA[beta program]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>beta</wp:tag_slug><wp:tag_name><![CDATA[beta]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>costs</wp:tag_slug><wp:tag_name><![CDATA[costs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>pros-and-cons</wp:tag_slug><wp:tag_name><![CDATA[pros and cons]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>kickstarter</wp:tag_slug><wp:tag_name><![CDATA[kickstarter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>dragon-innovation</wp:tag_slug><wp:tag_name><![CDATA[dragon innovation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>blog</wp:tag_slug><wp:tag_name><![CDATA[blog]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>company-blog</wp:tag_slug><wp:tag_name><![CDATA[company blog]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>future-directions</wp:tag_slug><wp:tag_name><![CDATA[future directions]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>plans</wp:tag_slug><wp:tag_name><![CDATA[plans]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>delivery</wp:tag_slug><wp:tag_name><![CDATA[delivery]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>schedule</wp:tag_slug><wp:tag_name><![CDATA[schedule]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>shipping-schedule</wp:tag_slug><wp:tag_name><![CDATA[shipping schedule]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>backer-update</wp:tag_slug><wp:tag_name><![CDATA[backer update]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>future</wp:tag_slug><wp:tag_name><![CDATA[future]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>upnext</wp:tag_slug><wp:tag_name><![CDATA[upnext]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>github</wp:tag_slug><wp:tag_name><![CDATA[github]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>user-experience</wp:tag_slug><wp:tag_name><![CDATA[user experience]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>test-benches</wp:tag_slug><wp:tag_name><![CDATA[test benches]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>quality</wp:tag_slug><wp:tag_name><![CDATA[quality]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>hardware-hacking</wp:tag_slug><wp:tag_name><![CDATA[hardware hacking]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jialiyaball</wp:tag_slug><wp:tag_name><![CDATA[jialiyaball]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>camera</wp:tag_slug><wp:tag_name><![CDATA[camera]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tests</wp:tag_slug><wp:tag_name><![CDATA[tests]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>moving</wp:tag_slug><wp:tag_name><![CDATA[moving]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>customs</wp:tag_slug><wp:tag_name><![CDATA[customs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>international-shipping</wp:tag_slug><wp:tag_name><![CDATA[international shipping]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>accelerometer</wp:tag_slug><wp:tag_name><![CDATA[accelerometer]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>learn-to-code</wp:tag_slug><wp:tag_name><![CDATA[learn to code]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>programming</wp:tag_slug><wp:tag_name><![CDATA[programming]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>nodeschool</wp:tag_slug><wp:tag_name><![CDATA[nodeschool]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>olinjs</wp:tag_slug><wp:tag_name><![CDATA[olin.js]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>hourofcode</wp:tag_slug><wp:tag_name><![CDATA[hourofcode]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>current</wp:tag_slug><wp:tag_name><![CDATA[current]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>power-consumption</wp:tag_slug><wp:tag_name><![CDATA[power consumption]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>layout</wp:tag_slug><wp:tag_name><![CDATA[layout]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>communications-protocols</wp:tag_slug><wp:tag_name><![CDATA[communications protocols]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ambient</wp:tag_slug><wp:tag_name><![CDATA[ambient]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>sensor</wp:tag_slug><wp:tag_name><![CDATA[sensor]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>gerber-files</wp:tag_slug><wp:tag_name><![CDATA[gerber files]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>seeedstudio</wp:tag_slug><wp:tag_name><![CDATA[seeedstudio]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>gold-phoenix-pcb</wp:tag_slug><wp:tag_name><![CDATA[gold phoenix pcb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>osh-park</wp:tag_slug><wp:tag_name><![CDATA[osh park]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ap-circuits</wp:tag_slug><wp:tag_name><![CDATA[ap circuits]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>silver-circuit</wp:tag_slug><wp:tag_name><![CDATA[silver circuit]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>women-in-tech</wp:tag_slug><wp:tag_name><![CDATA[women in tech]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>women-in-stem</wp:tag_slug><wp:tag_name><![CDATA[women in stem]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>feminism</wp:tag_slug><wp:tag_name><![CDATA[feminism]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>toolbox</wp:tag_slug><wp:tag_name><![CDATA[toolbox]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>monetization</wp:tag_slug><wp:tag_name><![CDATA[monetization]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>web-development</wp:tag_slug><wp:tag_name><![CDATA[web development]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>prototype</wp:tag_slug><wp:tag_name><![CDATA[prototype]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>entrepreneur</wp:tag_slug><wp:tag_name><![CDATA[entrepreneur]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>entrepreneuship</wp:tag_slug><wp:tag_name><![CDATA[entrepreneuship]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>lean-startup</wp:tag_slug><wp:tag_name><![CDATA[lean startup]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>pervasive-computing</wp:tag_slug><wp:tag_name><![CDATA[pervasive computing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jtag</wp:tag_slug><wp:tag_name><![CDATA[jtag]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>dfu</wp:tag_slug><wp:tag_name><![CDATA[dfu]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>usb</wp:tag_slug><wp:tag_name><![CDATA[usb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>driver</wp:tag_slug><wp:tag_name><![CDATA[driver]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>rfid-module</wp:tag_slug><wp:tag_name><![CDATA[rfid module]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>open-source-hardware</wp:tag_slug><wp:tag_name><![CDATA[open source hardware]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>ambient-module</wp:tag_slug><wp:tag_name><![CDATA[ambient module]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>schematic</wp:tag_slug><wp:tag_name><![CDATA[schematic]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>sim</wp:tag_slug><wp:tag_name><![CDATA[sim]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>outreach</wp:tag_slug><wp:tag_name><![CDATA[outreach]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>it-is-known</wp:tag_slug><wp:tag_name><![CDATA[it is known]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>best-practices</wp:tag_slug><wp:tag_name><![CDATA[best practices]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>prism</wp:tag_slug><wp:tag_name><![CDATA[prism]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>snowden</wp:tag_slug><wp:tag_name><![CDATA[snowden]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>cryptography</wp:tag_slug><wp:tag_name><![CDATA[cryptography]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>realtimeconf</wp:tag_slug><wp:tag_name><![CDATA[realtimeconf]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>nsa</wp:tag_slug><wp:tag_name><![CDATA[nsa]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>martin-bosslet</wp:tag_slug><wp:tag_name><![CDATA[martin bosslet]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>kyle-drake</wp:tag_slug><wp:tag_name><![CDATA[kyle drake]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>encryption</wp:tag_slug><wp:tag_name><![CDATA[encryption]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>security</wp:tag_slug><wp:tag_name><![CDATA[security]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>programming-language</wp:tag_slug><wp:tag_name><![CDATA[programming language]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>hello-world</wp:tag_slug><wp:tag_name><![CDATA[hello world]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>statistics</wp:tag_slug><wp:tag_name><![CDATA[statistics]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>smart-house</wp:tag_slug><wp:tag_name><![CDATA[smart house]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>rccar</wp:tag_slug><wp:tag_name><![CDATA[rccar]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>rcplane</wp:tag_slug><wp:tag_name><![CDATA[rcplane]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>remote-control</wp:tag_slug><wp:tag_name><![CDATA[remote control]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>skynet</wp:tag_slug><wp:tag_name><![CDATA[skynet]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>drones</wp:tag_slug><wp:tag_name><![CDATA[drones]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tdd</wp:tag_slug><wp:tag_name><![CDATA[tdd]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>samples</wp:tag_slug><wp:tag_name><![CDATA[samples]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>internet-of-everything</wp:tag_slug><wp:tag_name><![CDATA[internet of everything]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>gprs</wp:tag_slug><wp:tag_name><![CDATA[GPRS]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>tour</wp:tag_slug><wp:tag_name><![CDATA[tour]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>san-francisco</wp:tag_slug><wp:tag_name><![CDATA[san francisco]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>sf</wp:tag_slug><wp:tag_name><![CDATA[sf]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>stretch-goals</wp:tag_slug><wp:tag_name><![CDATA[stretch goals]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>launch</wp:tag_slug><wp:tag_name><![CDATA[launch]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>summerhighland</wp:tag_slug><wp:tag_name><![CDATA[summer@highland]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>hcp</wp:tag_slug><wp:tag_name><![CDATA[HCP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>faq</wp:tag_slug><wp:tag_name><![CDATA[faq]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>hacker-news</wp:tag_slug><wp:tag_name><![CDATA[hacker news]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>nodejs</wp:tag_slug><wp:tag_name><![CDATA[nodejs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>one-mighty-roar</wp:tag_slug><wp:tag_name><![CDATA[one mighty roar]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>naming</wp:tag_slug><wp:tag_name><![CDATA[naming]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>branding</wp:tag_slug><wp:tag_name><![CDATA[branding]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>name</wp:tag_slug><wp:tag_name><![CDATA[name]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>business</wp:tag_slug><wp:tag_name><![CDATA[business]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>jom-mckay</wp:tag_slug><wp:tag_name><![CDATA[jom mckay]]></wp:tag_name></wp:tag>
	<wp:tag><wp:tag_slug>sale</wp:tag_slug><wp:tag_name><![CDATA[sale]]></wp:tag_name></wp:tag>
  <item>
    <link>http://tesselproject.tumblr.com/post/142629230957</link>
    <pubDate>Mon, 11 Apr 2016 09:38:08 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[shipping]]></category>
		<category domain="tag" nicename="shipping"><![CDATA[shipping]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[tessel 2]]></category>
		<category domain="tag" nicename="tessel-2"><![CDATA[tessel 2]]></category>
		<category domain="tag"><![CDATA[oshw]]></category>
		<category domain="tag" nicename="oshw"><![CDATA[oshw]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/142629230957</guid>
    <!--<wp:post_id>142629230957</wp:post_id>-->
    <wp:post_date>2016-04-11 6:38:08</wp:post_date>
    <wp:post_date_gmt>2016-04-11 13:38:08</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessel 2 Has Shipped!</title>
    <description></description>
    <content:encoded><![CDATA[We are thrilled to announce that Tessel 2 has shipped to all domestic and international pre-orders.

This is one of the first times a distributed, unpaid team of open source contributors has shipped a physical product. We are proud to be a part of the open source hardware movement.

Huge thanks to everyone who has contributed so far to the Tessel Project. Whether you're a core contributor, someone who found a typo to fix, or one of our test subjects for the start experience: thank you. We value what you've done.

### "This sounds like a cool project, how can I get involved?"

New contributors are always welcome! Here are a few ways to get involved:

* Read through the [Tessel 2 Technical Overview](https://github.com/tessel/onboarding/blob/master/T2-TECHNICAL-OVERVIEW.md) to get an idea of T2's tech stack, then pick a repo that looks interesting to you. There are plenty of open issues to choose from - [including these ones tagged specially for newbies](https://github.com/tessel/t2-cli/issues?q=is%3Aopen+is%3Aissue+label%3Acontribution-easy).
* Go to the [Tessel forums](https://tessel.io/forums) and help someone solve their problem. Whether it's a bug on our end or theirs, you will probably learn something.
* Join us on the [Tessel Slack](https://tessel-slack.herokuapp.com/) and ask about contributing to the project - we'll talk to you!

You can read more about how the Tessel Project works as an organization under open governance on the [Tessel Project repo](https://github.com/tessel/project).

### "I just got my Tessel 2, what do I do?"

The best place to start with your Tessel 2 is at [tessel.io/start](//tessel.io/start). You can find tutorials there for everything from blinking lights to tweeting to creating your own local internet.

If you're interested in trying something off the beaten path - electrical fun, advanced hacks, and more, check out [tessel.io/docs](//tessel.io/docs). If you're new to hardware, don't worry! They're intended to be accessible to electrical newbies - and if they're not, please [file an issue](https://github.com/tessel/t2-docs/issues) to let us know.

We're continuing to update the start experience and the Tessel 2 docs, so please check back again!

*"But wait, I don't think mine shipped!" - if this is you, please contact support@tessel.io, and we will figure it out. Please do note that orders from Seeed Studio's page are fulfilled by Seeed directly.*

### "What's next for the Tessel Project?"

Phew, shipping one product was a lot of work! Realistically, there will be some bugfixing to do as all of you let us know how it's going and what you're working on.

As far as a next product- no promises, but [we have some ideas...](https://github.com/tessel/project/issues/142).

Partially, it's up to you: what do you want to see? What's the best way we can further the [Tessel Project Mission](https://github.com/tessel/project/blob/master/MISSION.md)?

Much love,

[The Tessel Project team](https://github.com/tessel/project/blob/master/TEAM.md)]]></content:encoded>
    <wp:post_name>142629230957</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/141886992057</link>
    <pubDate>Tue, 29 Mar 2016 03:15:29 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[tessel 2]]></category>
		<category domain="tag" nicename="tessel-2"><![CDATA[tessel 2]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[shipping]]></category>
		<category domain="tag" nicename="shipping"><![CDATA[shipping]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/141886992057</guid>
    <!--<wp:post_id>141886992057</wp:post_id>-->
    <wp:post_date>2016-03-29 0:15:29</wp:post_date>
    <wp:post_date_gmt>2016-03-29 07:15:29</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessel 2 Shipping Progress</title>
    <description></description>
    <content:encoded><![CDATA[Eager backers, here is the latest:

**Pre-orders within the United States:** the shipment of Tessels from China has "partially" arrived in the San Francisco warehouse, according to [tracking](http://www.dhl.com/content/g0/en/express/tracking.shtml?AWB=3585833510&brand=DHL). We are looking into what this means and how we can move along the rest of the delivery. For the box that has arrived, it still needs to be unpacked and put on shelves (this usually takes a day or two), and then our fulfillment house will begin shipping them out to you. Once we get the rest of the shipment through customs, fulfillment can typically ship 100-200 orders per day, so it could take a couple of weeks to get to everyone. Tracking information will be emailed to you when yours is on the way!

**International pre-orders:** we just heard from Seeed; they are shipping a large number of these orders directly to backers today. More soon.

**If you ordered from Seeed's website:** please contact Seeed directly! We are not involved with shipping these orders.

It's so close! You can learn how to use your Tessel 2 at tessel.io/start. We can't wait to see what you do!]]></content:encoded>
    <wp:post_name>141886992057</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/141418883972</link>
    <pubDate>Mon, 21 Mar 2016 02:55:34 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[tessel 2]]></category>
		<category domain="tag" nicename="tessel-2"><![CDATA[tessel 2]]></category>
		<category domain="tag"><![CDATA[tessel project]]></category>
		<category domain="tag" nicename="tessel-project"><![CDATA[tessel project]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/141418883972</guid>
    <!--<wp:post_id>141418883972</wp:post_id>-->
    <wp:post_date>2016-03-20 23:55:34</wp:post_date>
    <wp:post_date_gmt>2016-03-21 06:55:34</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Hi, where’s my Tessel?</title>
    <description></description>
    <content:encoded><![CDATA[Hello! Many of you are getting antsy about Tessel shipments. This is totally reasonable, and trust me - we hate the wait at least as much as you do.

We had thought Tessel 2s would begin shipping by now, but they are still in transit to fulfillment centers. Here's the latest information:

**If you ordered a Tessel from the Seeed website ([from this page](http://www.seeedstudio.com/depot/Tessel-2-p-2622.html)):** please contact Seeed directly. We do not have any information about your order; Seeed is handling everything about it, from money to manufacturing to shipping. [Their support page is here.](http://support.seeedstudio.com/) If we had to guess, we would guess your orders will ship out as soon as international pre-orders finish shipping.

**If you pre-ordered a Tessel at tessel.io and are located in the United States:** The Tessel 2s are en route to our fulfillment house in San Francisco. You can watch along with us as we track its progress from China to Los Angeles, through customs, and up to San Francisco ([tracking](http://www.dhl.com/content/g0/en/express/tracking.shtml?AWB=3585833510&brand=DHL)). Once it arrives in San Francisco, it might take a few days for our fulfillment center to unbox everything and put it on shelves, and then a few more days as they sort out individual orders to each of your addresses. However, shipping is pretty fast once it gets sent, usually a day or two.

**If you pre-ordered a Tessel at tessel.io and are international/outside the United States:** Seeed is shipping these directly from the factory, so it will be more effective to contact their support directly than to email us. [Their support page is here.](http://support.seeedstudio.com/) They informed us last night that they will ship these orders this week.


**For everyone:** You will receive an email with tracking information when your order is sent. Thanks for sticking it out with us; we sincerely hope you find Tessel 2 worth the wait.

With love,

The Tessel Project]]></content:encoded>
    <wp:post_name>141418883972</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/140747686642</link>
    <pubDate>Wed, 09 Mar 2016 10:59:06 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/140747686642</guid>
    <!--<wp:post_id>140747686642</wp:post_id>-->
    <wp:post_date>2016-03-09 7:59:06</wp:post_date>
    <wp:post_date_gmt>2016-03-09 15:59:06</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>The wait is almost over!</title>
    <description></description>
    <content:encoded><![CDATA[Hi everyone, good news from the factory. They have completed manufacturing and testing of over 80% of the first batch and expect to have the entire process completed by the end of the week.

Shipments will begin early next week and you will receive an automated email with the tracking code of your order shortly thereafter.

Feel free to email support@tessel.io if you have any questions and thanks for being so patient throughout this journey. Everyone contributing to Tessel is very excited to hear how you like your Tessel 2.

Yours in hacking,

The Tessel Project]]></content:encoded>
    <wp:post_name>140747686642</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/139896385122</link>
    <pubDate>Wed, 24 Feb 2016 01:17:52 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/139896385122</guid>
    <!--<wp:post_id>139896385122</wp:post_id>-->
    <wp:post_date>2016-02-23 22:17:52</wp:post_date>
    <wp:post_date_gmt>2016-02-24 06:17:52</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessel 2 Available for Pre-Order Again!</title>
    <description></description>
    <content:encoded><![CDATA[You can now place orders for Tessel 2 through our manufacturer Seeed's store!

### [Check out the order page](http://www.seeedstudio.com/depot/Tessel-2-p-2622.html).

![](http://i.imgur.com/sSVKH0K.png)

You can also source modules there - [here's a page of all the Tessel things they have in the store](http://www.seeedstudio.com/depot/Tessel-m-153.html).

If you prefer to source through [Digikey](http://www.digikey.com/product-search/en?vendor=0&keywords=tessel) or [Mouser](http://www.mouser.com/Search/Refine.aspx?Keyword=tessel), this should be possible as well.

### But wait, where's my original pre-order?

There have only been a few early-batch Tessel 2s shipped so far. Most of you are still waiting for first-round production- but not for much longer.

We've just gotten word from Seeed that the PCBs are headed into surface mount soldering this afternoon (China time). They will ship out your orders over the next few weeks - you will receive an email with tracking information when yours is put in the mail.

Fresh orders from this new Seeed order page are second-round manufacturing, and will be shipped after the original orders are sent.

### Onwards and upwards!

Love from the Tessel team.]]></content:encoded>
    <wp:post_name>139896385122</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/139078034627</link>
    <pubDate>Wed, 10 Feb 2016 18:37:33 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[tessel 2]]></category>
		<category domain="tag" nicename="tessel-2"><![CDATA[tessel 2]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/139078034627</guid>
    <!--<wp:post_id>139078034627</wp:post_id>-->
    <wp:post_date>2016-02-10 15:37:33</wp:post_date>
    <wp:post_date_gmt>2016-02-10 23:37:33</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Shipping Update: No News is Good News</title>
    <description></description>
    <content:encoded><![CDATA[Hi all! Since many of you have been asking for updates recently, here's the scoop:

* Not much has changed since our [last post](https://tessel.io/blog/138528250632/backer-update-january-february). This is good news! The times listed in that previous post are still valid, and the minor delay we in production we mentioned was resolved as expected.
* Seeed has produced the first 95 boards and shipped them to us. We're doing a final check over on these boards, and then we're sending them to our fulfillment house to begin shipping out to you (as early as next week).
* Unless you're one of the lucky first 95, everything is waiting on Chinese New Year to end - production resumes on February 14. At that point, Seeed will finish building the boards, ship the remaining quantity for the USA orders to our fulfillment house, and begin sending out all other orders directly to you from China.


### Frequently asked questions

**When will I get my order?**

It's tough to predict exactly, but *you will receive an email with a tracking number when your order is put in the mail*. For the majority of backers, your Tessel will arrive some day in March.

**Any update on shipping to X country?**

Same answer as above. The only difference for orders to non-USA addresses is that they will be shipped to you directly from Seeed in China. You will still get an email with tracking information when your order ships.

**What can I do with my Tessel 2 when it arrives?**

Great question, fictional backer - glad you asked! Check out the sidebar on the [Tessel 2 Start Experience](http://tessel.github.io/t2-start/) for a menu of great tutorials you can browse while you wait for your Tessel to arrive.

All the best,

The Tessel Team]]></content:encoded>
    <wp:post_name>139078034627</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/138528250632</link>
    <pubDate>Tue, 02 Feb 2016 00:59:11 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/138528250632</guid>
    <!--<wp:post_id>138528250632</wp:post_id>-->
    <wp:post_date>2016-02-01 21:59:11</wp:post_date>
    <wp:post_date_gmt>2016-02-02 05:59:11</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Backer Update: January == February</title>
    <description></description>
    <content:encoded><![CDATA[January 16, 2016
---

Hi Tesselators!

We're very excited to ship Tessel 2 in the near future. Since many of you are on the edges of your seats, we'd like to share an update.


**Shipping timelines**
------------------------------------------------------------

We've just heard from our manufacturers that there is a slight delay and no boards will leave the factory until January 25. This is due to a minor disturbance in Seeed Studio's supply chain.

Our main efforts are to get your boards to you as quickly as possible. For most of you, that will be mid-February into March.

Here's how this will go:

* Seeed is fulfilling all international orders; orders for United States customers will be shipped en masse to a warehouse in the Bay Area and sent out from there.
* China celebrates the new year February 1-13, so many international orders will be shipped after the holiday.
* We are trying to get all Tessel 2s for United States customers shipped out of China before the holiday. We will then be able to ship them out through our stateside fulfillment house.

In the meantime, we'll charge your orders on Monday, January 18th - we've just been double checking a few special cases.


**What are some recent developments on Tessel 2?**
------------------------------------------------------------

Since our last email:

* We built easy command line tools to interact with Tessel 2's wonderful Wifi chip - you can turn it on and off to save power, and even use it as an access point
* Binary dependencies, always a challenge with Tessel 1, are being compiled and served so that you can install and use them normally. For example, if you go to the socket.io website and try their example on a Tessel 2, it should just work
* If you want to treat Tessel 2 like a Linux computer, root access is now as simple as t2 root
* Firmware improvements brought all the modules up to speed with the new system
* USB communications got 100x faster

Track milestones on [this issue](https://github.com/tessel/project/issues/106)  and please feel free to jump in! The more that gets done now, the more capable your Tessel 2 will be when it gets to you.


**How can I get more frequent updates?**
------------------------------------------------------------

For those eager folks who'd like to hear from us more often, here are a few resources:

1. You can always find our steering committee notes in [this Github folder](https://github.com/tessel/project/tree/master/meetings) . It might not be pretty and polished, but it's the inside scoop on our main priorities
2. Twitter [@tesselproject](//twitter.com/tesselproject)  works for quick questions
3. There is nearly always someone on our [slack channel](https://tessel-slack.herokuapp.com/)  - especially join here if you're interested in the status of a particular feature

For the rest of you, please enjoy our very non-spammy email list ;)

With love,

The Tessel Team]]></content:encoded>
    <wp:post_name>138528250632</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/138528095052</link>
    <pubDate>Tue, 02 Feb 2016 00:56:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[shipping]]></category>
		<category domain="tag" nicename="shipping"><![CDATA[shipping]]></category>
		<category domain="tag"><![CDATA[tessel 2]]></category>
		<category domain="tag" nicename="tessel-2"><![CDATA[tessel 2]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/138528095052</guid>
    <!--<wp:post_id>138528095052</wp:post_id>-->
    <wp:post_date>2016-02-01 21:56:00</wp:post_date>
    <wp:post_date_gmt>2016-02-02 05:56:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Backer Update: Getting Ready to Ship Tessel 2 (!)</title>
    <description></description>
    <content:encoded><![CDATA[December 22, 2015
-------------

Backers, great news! We've passed our FCC and CE certifications and have just started full-scale manufacturing.

In the near term, we have a couple of action items for you:


**// TODO:**
------------------------------------------------------------
1. Visit trycelery.com/myorders (http:////trycelery.com/myorders)  and make sure your address is correct
2. Check your payment information, either at the link above or on Paypal (depending on which you used) and make sure the card you used has not expired

We will be charging pre-orders on January 4th. Please complete the above tasks (a ~1 minute effort) by then, as they ensure you will receive your Tessel 2.

What happens next?

1. Our manufacturer (Seeed) begins churning out boards: printing the circuit boards, assembling the chips, flashing and testing them with Testalators
2. We keep improving the software (see current milestones (https://github.com/tessel/project/issues/106)  - you're welcome to join!)
3. Seeed ships international orders; we will distribute orders in the United States
4. Repeat steps 1 through 3 until everyone has their orders

We're extremely excited to move into this next phase, and hope you find Tessel 2 worth the wait.

Much love,
[The Tessel Project](https://github.com/tessel/project/blob/master/TEAM.md)]]></content:encoded>
    <wp:post_name>138528095052</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/132893473277</link>
    <pubDate>Mon, 09 Nov 2015 16:49:20 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel hardware community shipping]]></category>
		<category domain="tag" nicename="tessel-hardware-community-shipping"><![CDATA[tessel hardware community shipping]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/132893473277</guid>
    <!--<wp:post_id>132893473277</wp:post_id>-->
    <wp:post_date>2015-11-09 13:49:20</wp:post_date>
    <wp:post_date_gmt>2015-11-09 21:49:20</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>This Week In Tessel: Another FCC Update, And Some Of The Things We've Been Working On</title>
    <description></description>
    <content:encoded><![CDATA[Hi Tesselators!

It's been a few weeks since the last This Week in Tessel – time for an update! We've been hard at work on the Tessel repos, building and growing the project.

### Shipping Timeline
As many of you know, FCC testing has been a challenge for us, particularly reconclining our local hardware test setups with those of our FCC testing counterparts overseas (does "it worked on my computer" sound familiar? Even worse with hardware and a language barrier). But we have an end in sight! Seeed Studio expects us to have results from FCC testing back by Friday, November 27th.

Once FCC certification is passed, sourcing the components will take up to 6 weeks. We expect at that point to start producing in batches of 500/week. As of now, we expect the first shipments out in mid-January.

Please get in touch if the new date is an issue for you, and we'll see what we can do: support@tessel.io.

### Get excited

We've already built most of the Tessel Start experience for the Tessel 2 - [give yourself a tour](//tessel.io/t2-start)! We've also released a set of preliminary Tessel 2 docs to [tessel.io/docs](https://tessel.io/docs/home).

We're also excited to have finished open sourcing literally all of our repos, including (at long last) our website, [tessel.io](https://github.com/tessel/tessel.io). Now, if you find something broken there, please submit an issue on Github, or better yet, send a pull request!

### Get involved

Interested in helping build Tessel 2? We have two links for wonderful contributors like you:

1. [Tessel's Slack](https://tessel-slack.herokuapp.com/) so you can ask us questions and get help getting started
2. [The "Hardware Not Required" tag on our T2-CLI repo](https://github.com/tessel/t2-cli/labels/Hardware%20Not%20Required) where you can build functionality and get familiar with Tessel before your Tessel 2 ships

### Welcome to the team

Just taking a quick moment to call attention to all the people who have joined our growing volunteer contributor [team](https://github.com/tessel/project/blob/master/TEAM.md). We're happy to have you!

New members from the last few months:

[**Ravi Teja**](https://twitter.com/KTeza1) | [**Donovan Buck**](https://twitter.com/dtex) | [**Will Prater**](https://twitter.com/wprater) |  [**Dave Nugent**](https://twitter.com/drnugent) | [**Kevin Sidwar**](https://twitter.com/KevinSidwar) | [**Nicholas van de Walle**](https://twitter.com/mrn_ice) | [**Daniel Bunzendahl**](http://www.bunzendahl.com) | [**Amos King**](https://twitter.com/adkron) | [**Julian Cheal**](http://github.com/juliancheal)

![](https://cloud.githubusercontent.com/assets/454690/10731290/945a114c-7bec-11e5-8a81-c61113c51b0b.png)

With love,<br>
The Tessel Project]]></content:encoded>
    <wp:post_name>132893473277</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/128489969922</link>
    <pubDate>Sun, 06 Sep 2015 12:52:09 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[twit]]></category>
		<category domain="tag" nicename="twit"><![CDATA[twit]]></category>
		<category domain="tag"><![CDATA[this week in tessel]]></category>
		<category domain="tag" nicename="this-week-in-tessel"><![CDATA[this week in tessel]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[shipping]]></category>
		<category domain="tag" nicename="shipping"><![CDATA[shipping]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[tessel project]]></category>
		<category domain="tag" nicename="tessel-project"><![CDATA[tessel project]]></category>
		<category domain="tag"><![CDATA[dojo foundation]]></category>
		<category domain="tag" nicename="dojo-foundation"><![CDATA[dojo foundation]]></category>
		<category domain="tag"><![CDATA[jquery foundation]]></category>
		<category domain="tag" nicename="jquery-foundation"><![CDATA[jquery foundation]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/128489969922</guid>
    <!--<wp:post_id>128489969922</wp:post_id>-->
    <wp:post_date>2015-09-06 9:52:09</wp:post_date>
    <wp:post_date_gmt>2015-09-06 16:52:09</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>This Week in Tessel: Shipping timeline update and more</title>
    <description></description>
    <content:encoded><![CDATA[Hello again Tesselators! This Week in Tessel is where we highlight the latest news, projects, and events, from code, to community, to hardware manufacturing.

**Shipping update:** We just had a check-in on timeline, and there's good news and bad news. The good news is we're not blocked anymore; the bad news is we have to push back our estimated timeline on shipping Tessel 2 by a few months.

We think we have a software fix in for [the FCC certification issue](https://github.com/tessel/project/issues/79) that has been blocking us, as well as a hardware fix for a CE certification. The fixes are currently in testing, and we should hear back next week about the results.

Since the CE issue fix requires new hardware components for static shielding, Tessel 2 requires another board revision (2 weeks). These revised boards will then be sent in again for FCC and CE certification. This takes 2-4 weeks.

Pending full certifications, it will then take another 6 weeks or so to ramp up into full manufacturing. That means our current estimated ship date for Tessel 2 is revised to late November.

If you need to update your order or address, you can access your order through [Celery](trycelery.com/myorders).

**Continued development:** Meanwhile, on the software side, we're continuing to build and improve on the [command line interface for Tessel 2](https://www.npmjs.com/package/t2-cli), which is now published to NPM. [T2's firmware](https://github.com/tessel/t2-firmware) also continues to grow. As always, you're welcome to [get involved](https://github.com/tessel/project#how-can-i-get-involved).

**From the community:** Featured projects this week are [an alarmbot with IR and Voxbone](https://tessel.hackster.io/team-betacat/alarmbot) and a promising [Neopixel project](http://danielcwilson.com/blog/2015/08/tessel-neopixels/). Thanks for sharing what you've made!

**Dojo foundation news:** We're also excited to see [this public announcement](http://www.prweb.com/releases/2015/08/prweb12931885.htm) that the jQuery and Dojo foundations are merging– here's to the open web.


That's all for this week! Feel free to submit to [the next newsletter](https://github.com/tessel/this-week-in-tessel/issues/11). In the meantime, see you online.

With love,<br/>
The Tessel Project]]></content:encoded>
    <wp:post_name>128489969922</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/126784756137</link>
    <pubDate>Sat, 15 Aug 2015 20:02:30 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[this week in tessel]]></category>
		<category domain="tag" nicename="this-week-in-tessel"><![CDATA[this week in tessel]]></category>
		<category domain="tag"><![CDATA[twit]]></category>
		<category domain="tag" nicename="twit"><![CDATA[twit]]></category>
		<category domain="tag"><![CDATA[python]]></category>
		<category domain="tag" nicename="python"><![CDATA[python]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[tessel 2]]></category>
		<category domain="tag" nicename="tessel-2"><![CDATA[tessel 2]]></category>
		<category domain="tag"><![CDATA[openwrt]]></category>
		<category domain="tag" nicename="openwrt"><![CDATA[openwrt]]></category>
		<category domain="tag"><![CDATA[fcc]]></category>
		<category domain="tag" nicename="fcc"><![CDATA[fcc]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/126784756137</guid>
    <!--<wp:post_id>126784756137</wp:post_id>-->
    <wp:post_date>2015-08-15 17:02:30</wp:post_date>
    <wp:post_date_gmt>2015-08-16 00:02:30</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>This week in Tessel: First batch of Tessel 2, OpenWRT issues, Python, and more</title>
    <description></description>
    <content:encoded><![CDATA[Hello again Tesselators! This Week in Tessel is where we highlight the latest news, projects, and events, from code, to community, to hardware manufacturing.

**Hardware and shipping update:** We received our first manufacturing batch of 91 Tessels and are very satisfied with the result. Our growing list of [Team Members](https://github.com/tessel/project/blob/master/TEAM.md) have and started ramping up on PRs, issues, and projects.

**FCC Issues Blocking Release:** We have a software issue preventing us from completing FCC certification. We're working actively to solve this, as this blocks us from shipping Tessel. Read more about it on our [tracking issue](https://github.com/tessel/project/issues/79). If you have OpenWRT experience, we'd love your help! Reach out to [team@technical.io](mailto:team@technical.io).

**Module Selection:** If you pre-ordered a Tessel 2, surveys for module selection went out on July 16th. If you never got that email, please contact [support@tessel.io](mailto:support@tessel.io.

**Python on Tessel:** We've started a [Tessel Python Working Group](https://github.com/tessel/tessel-python). Interested in Python, Tessel, or IoT? [Reach out to @timcameronryan on Twitter](http://twitter.com/timcameronryan).

**In other news:** We're on Reddit! Visit [/r/Tessel](https://www.reddit.com/r/Tessel), if that's your thing.

**New Projects:** eiriksm has been tracking beer fermentation and published [`tessel-plops-logger`](https://www.npmjs.com/package/tessel-plops-logger) and [`tessel-temp-logger`](https://www.npmjs.com/package/tessel-temp-logger)

![](https://ci5.googleusercontent.com/proxy/_tEy-pnlZLeXQdXTo2mAOa6HFe9dHtkUsvDhQHWFzcXSuOe6rRTPRGGdy38FNtHlkq6YofYUV1kB1vXpD9gNbb1atxpkUkL_q-DaHB0nuq7Xb1EfsUv6HlMoZ4tpsEPuZBoPAY1twjIsNRxgAkgHOw0VUb-wYDgU-NUGf6I=s0-d-e1-ft#https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/70398707-b792-46e0-b5da-6e9c6d37cab0.gif)

**Events:** Coming up on August 16th (this Sunday), [Hardware Hacking with FirefoxOS, Tessel 2 & Rust](http://www.meetup.com/de/opentechschool-dortmund/events/223912144/) is happening in Leonie-Reygers-Terrasse, Dortmund.

Thanks for reading! Submit to the next [This Week in Tessel](https://github.com/tessel/this-week-in-tessel/issues/9) with your projects, or tweet us at [@technicalhumans](http://twitter.com/technicalhumans).

The Tessel Project team]]></content:encoded>
    <wp:post_name>126784756137</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/123813923817</link>
    <pubDate>Sat, 11 Jul 2015 11:55:50 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[this week in tessel]]></category>
		<category domain="tag" nicename="this-week-in-tessel"><![CDATA[this week in tessel]]></category>
		<category domain="tag"><![CDATA[twit]]></category>
		<category domain="tag" nicename="twit"><![CDATA[twit]]></category>
		<category domain="tag"><![CDATA[shipping update]]></category>
		<category domain="tag" nicename="shipping-update"><![CDATA[shipping update]]></category>
		<category domain="tag"><![CDATA[shipping]]></category>
		<category domain="tag" nicename="shipping"><![CDATA[shipping]]></category>
		<category domain="tag"><![CDATA[china]]></category>
		<category domain="tag" nicename="china"><![CDATA[china]]></category>
		<category domain="tag"><![CDATA[fcc]]></category>
		<category domain="tag" nicename="fcc"><![CDATA[fcc]]></category>
		<category domain="tag"><![CDATA[hanselminutes]]></category>
		<category domain="tag" nicename="hanselminutes"><![CDATA[hanselminutes]]></category>
		<category domain="tag"><![CDATA[podcast]]></category>
		<category domain="tag" nicename="podcast"><![CDATA[podcast]]></category>
		<category domain="tag"><![CDATA[project]]></category>
		<category domain="tag" nicename="project"><![CDATA[project]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/123813923817</guid>
    <!--<wp:post_id>123813923817</wp:post_id>-->
    <wp:post_date>2015-07-11 8:55:50</wp:post_date>
    <wp:post_date_gmt>2015-07-11 15:55:50</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>This week in Tessel: Shipping update, Hanselminutes, new projects</title>
    <description></description>
    <content:encoded><![CDATA[Welcome back, Tesselators! This Week in Tessel is where we highlight the latest news, projects, and events, from code, to community, to hardware manufacturing.

**Hardware and shipping update:** The first Tessel 2s should ship in early September! The hardware team is just getting back from [a couple of weeks in China](https://storify.com/technicalhumans/tessel2china) where they worked with manufacturers, creating a few test batches and ironing out a quality assurance process.



The hardware is now undergoing FCC certification testing, (expected 4 weeks) and then it will take another 4 weeks or so to ramp up manufacturing.

We’re currently working on a way to add modules to orders; if you have a T2 order, look for an email in the next couple of weeks.

**Tessel on Hanselminutes:** Podcast [Hanselminutes featured Kelsey Breseman](http://hanselminutes.com/481/tesselio-making-the-internet-of-things-with-javascript-and-kelsey-breseman) last week, talking about Tessel 2, ubiquitous computing, and hardware that’s simple.

**New Projects:** [João Parreira](https://twitter.com/jtparreira) created a [real time dashboard with photos](https://github.com/realtime-framework/tessel-dashboard). [Sami Lamti](https://plus.google.com/+SamiLamti/posts) [wrote an NPM module](http://devxp.blogspot.se/2015/06/tessel-fakes.html) that lets you fake blinking lights in your console while you wait for the hardware.

**Tessels around the world:** Tessels were spotted [in Japan at a Milkcocoa meetup](https://twitter.com/CapeDesignFish/status/618004893551366144) and [in Warsaw at an SAP CodeJam](https://twitter.com/Sygyzmundovych/status/615808027170484224).

Thanks for tuning in! Submit to the next This Week in Tessel [on its repo](https://github.com/tessel/this-week-in-tessel/issues/9).

Until next time,
The Tessel Project team]]></content:encoded>
    <wp:post_name>123813923817</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/122348298667</link>
    <pubDate>Wed, 24 Jun 2015 13:17:57 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[twit]]></category>
		<category domain="tag" nicename="twit"><![CDATA[twit]]></category>
		<category domain="tag"><![CDATA[this week in tessel]]></category>
		<category domain="tag" nicename="this-week-in-tessel"><![CDATA[this week in tessel]]></category>
		<category domain="tag"><![CDATA[manufacturing]]></category>
		<category domain="tag" nicename="manufacturing"><![CDATA[manufacturing]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[projects]]></category>
		<category domain="tag" nicename="projects"><![CDATA[projects]]></category>
		<category domain="tag"><![CDATA[tessel project]]></category>
		<category domain="tag" nicename="tessel-project"><![CDATA[tessel project]]></category>
		<category domain="tag"><![CDATA[docs]]></category>
		<category domain="tag" nicename="docs"><![CDATA[docs]]></category>
		<category domain="tag"><![CDATA[fritzing]]></category>
		<category domain="tag" nicename="fritzing"><![CDATA[fritzing]]></category>
		<category domain="tag"><![CDATA[speaking]]></category>
		<category domain="tag" nicename="speaking"><![CDATA[speaking]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/122348298667</guid>
    <!--<wp:post_id>122348298667</wp:post_id>-->
    <wp:post_date>2015-06-24 10:17:57</wp:post_date>
    <wp:post_date_gmt>2015-06-24 17:17:57</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>This Week in Tessel – June 24, 2015</title>
    <description></description>
    <content:encoded><![CDATA[Welcome back, Tesselators! This Week in Tessel is where we highlight the latest news, projects, and events, from code, to community, to hardware manufacturing.

### Tessel in China

The hardware team is in Shenzhen, getting ready to ramp up production. Follow the adventure live at [#tessel2china](https://twitter.com/hashtag/tessel2china).

![](https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/c8d78c75-8fe7-4474-8ac6-57812bf61bc2.jpg)  ![](https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/c644dabc-0605-42bd-b693-8c9c5bfdebbc.jpg)

This week we’ll be on site as our manufacturer runs a 100 unit pre-production batch. After these units pass testing, we’ll begin the FCC & CE certification process before starting main production.

### Engineering Developments

Itching to design some Tessel 2 projects? You’re in luck! Kelsey led the effort to release Tessel 2’s first [hardware API docs](https://github.com/tessel/t2-firmware#t2-hardware-api), and Rick Waldron is in the review stages of creating a [Tessel 2 Fritzing part](https://dl.dropboxusercontent.com/u/3531958/tessel-sensor-controlled-led.png), which will be out soon. Between that and the [VM](https://github.com/tessel/t2-vm), you can basically build and test an entire Tessel 2 project before your boards arrive.

### Events

**Contribution party:** Want to get involved in the Tessel project? We’re having an online contribution party tonight at 5:30pm PST. [Join our chat](https://tessel-slack.herokuapp.com/) (or come in person [if you’re in the Bay Area](http://www.meetup.com/APIs-to-Electrons/events/223278060/)) and we can help you get started.

**Upcoming talks:** [Flaki](https://twitter.com/slsoftworks) and [Dan Callaghan](https://twitter.com/callahad) from Mozilla will be delivering an awe-inspiring, demo-filled presentation about using Rust on IoT hardware (hint: it’s Tessel 2) and Firefox OS at the [Open Tech School conference](https://otsconf.com/) in Germany! 

### Projects

The Auth0 team made [HyperLock](https://twitter.com/auth0/status/610612119302606848) for physical authorization on a Tessel 1. The Realtime Framework, a Pub/Sub broker, released [an SDK](http://framework.realtime.co/blog/announcing-tessel-sdk.html) specifically for Tessel. Have you made something cool on Tessel? [Post it to the projects page!](//tessel.io/projects)


This Week in Tessel is sent out every week. [Submit to the next issue!](https://github.com/tessel/this-week-in-tessel/issues/7) — The Tessel Project Team
]]></content:encoded>
    <wp:post_name>122348298667</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/121734541002</link>
    <pubDate>Wed, 17 Jun 2015 01:31:57 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/121734541002</guid>
    <!--<wp:post_id>121734541002</wp:post_id>-->
    <wp:post_date>2015-06-16 22:31:57</wp:post_date>
    <wp:post_date_gmt>2015-06-17 05:31:57</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Welcoming Three New Team Members</title>
    <description></description>
    <content:encoded><![CDATA[This week we had three fantastic developers from three different countries join Tessel as the project’s first [Team Members](https://github.com/tessel/project/blob/master/TEAM.md). We’re thrilled to have them on board not just to accelerate development of Tessel 2, but to provide the points of view and passion that make projects like Tessel thrive.

### Flaki
From Hungary comes the renowned, [Flaki](https://twitter.com/slsoftworks) (I don’t actually believe he has a surname). Flaki works at Mozilla and has a big supporter for both Rust and Tessel. It’s only natural that he will be contributing towards Rust tooling on Tessel 2! 

![](https://avatars2.githubusercontent.com/u/2089432?v=3&s=460)

### Kassandra Perch
[Kassandra Perch](http://nodebotani.st/) is a talented roboticist hailing from Texas. She is a very active member of both the Johnny-Five and Nodebots community so I’m super excited to see what JavaScript-powered robot overlords she builds with Tessel 2. Initially, she’s going to be helping us finish up the Tessel 2 CLI.

![](https://avatars1.githubusercontent.com/u/148924?v=3&s=460)

### Linus Unnebäck
I only know that [Linus](https://github.com/LinusU) writes excellent code and that he’s from Sweden (isn’t that the beauty of the internet?). Linus is one of the few developers who was able to understand the complexity that was the Tessel 1 Runtime and contribute to it. I’m excited to see how he contributes to the much more digestible Tessel 2 architecture.

![](https://avatars3.githubusercontent.com/u/189580?v=3&s=460)

We’re all excited to have each of these excellent developers join the Tessel family and help us ship a powerful development board platform. Stay tuned for more updates!

-Jon
]]></content:encoded>
    <wp:post_name>121734541002</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/121284956252</link>
    <pubDate>Thu, 11 Jun 2015 13:56:02 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[TWIT]]></category>
		<category domain="tag" nicename="twit"><![CDATA[TWIT]]></category>
		<category domain="tag"><![CDATA[This week in tessel]]></category>
		<category domain="tag" nicename="this-week-in-tessel"><![CDATA[This week in tessel]]></category>
		<category domain="tag"><![CDATA[new team members]]></category>
		<category domain="tag" nicename="new-team-members"><![CDATA[new team members]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[Speaking]]></category>
		<category domain="tag" nicename="speaking"><![CDATA[Speaking]]></category>
		<category domain="tag"><![CDATA[Manufacturing]]></category>
		<category domain="tag" nicename="manufacturing"><![CDATA[Manufacturing]]></category>
		<category domain="tag"><![CDATA[Testing]]></category>
		<category domain="tag" nicename="testing"><![CDATA[Testing]]></category>
		<category domain="tag"><![CDATA[Projects]]></category>
		<category domain="tag" nicename="projects"><![CDATA[Projects]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/121284956252</guid>
    <!--<wp:post_id>121284956252</wp:post_id>-->
    <wp:post_date>2015-06-11 10:56:02</wp:post_date>
    <wp:post_date_gmt>2015-06-11 17:56:02</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>This Week in Tessel – June 11, 2015</title>
    <description></description>
    <content:encoded><![CDATA[Welcome back, Tesselators! This Week in Tessel is where we highlight the latest news, projects, and events, from code, to community, to hardware manufacturing.

### New Team Members
The [Tessel Project](https://github.com/tessel/project) team is growing! We want to welcome new team members [Flaki](https://twitter.com/slsoftworks), [Matteo Collina](https://twitter.com/matteocollina), [Kassandra Perch](https://twitter.com/nodebotanist), [Nick van de Walle](https://twitter.com/MrN_Ice), [Linus Unnebäck](https://twitter.com/LinusU), [Evan Simpson](https://twitter.com/evanmsimpson), and [Dave Nugent](https://twitter.com/drnugent). As part of the team, they add and review contributions to the Tessel repos. Expect to see their introductions on the blog soon.

### Manufacturing Update

![](https://ci6.googleusercontent.com/proxy/7OAYhGsiLzEEAzojurN6wM9NukLi0XmdTpgpuYOw0doztjlC5XwOI_NS1uRft8D_CYdAkFC4FOZyvuqDdnNoCeT6jPFXAjsnCAlfhbPPB1nLslqLho3QDmAR-n6Kv7VaHNJnhYh5DiiIMxuriyr-wOYFktEjpZuhbDgoMBo=s0-d-e1-ft#https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/9dac9d4a-32b0-4603-b8c4-40598fd1c07b.jpg)

Tessel 2 is ready for production! In exactly one week, Jia, Eric, and Kevin will be flying to China to oversee the manufacturing and testing of all 3000 new Tessel 2s. This begins with a pilot run of 100 boards and validating our testing process in person. Once we’re satisfied, the remaining Tessel 2s will be produced. Following that, the boards will undergo four or so weeks of FCC and CE certification. All told, we expect Tessel 2s to be shipped to customers in late August to early September.

###  Developing for Tessel 2
Tim has been focusing on developer tools, and this week released [t2-compiler: a utility to compiling binary modules for Tessel 2](https://github.com/tessel/t2-compiler#how-to-use-it). Check out the project for an example of how to use it today with the Tessel 2 VM. Also this week, Rick and Jon have been working together to build out a comprehensive test suite for the Tessel CLI.

### New Tessel Projects

[The folks at SynergyKit built a Tessel door](https://tessel.hackster.io/letsgood_com/tessel-door
) that counts door opens and posts the activity to their backend. [Milkcocoa: a pub/sub module for Tessel](http://blog.mlkcca.com/iot/milkcocoa-for-tessel/) was demoed by Hirama Kiyohiko. [Creating a DIY gesture sensor module]( http://www.pubnub.com/blog/hacking-with-javascript-tessel-gesture-sensor-driver/#sthash.ApYC6HEg.MX74Yrnd.dpuf) was presented by Jia Huang and written up by Dave Nugent.

### Events and Conferences
Learn about Tessel’s support for conference speakers and workshop leaders in [Speaking at Conferences](https://tessel.io/blog/120850543061/tessel-at-conferences) by Kelsey Breseman. [Get inspired](https://www.youtube.com/watch?v=zsJnsRGh8dE&feature=youtu.be&list=PLFZ5NyC0xHDaaTy6tY9p0C0jd_rRRl5Zm) with Julian Cheal’s fantastic talk at JSConf Budapest in which he dances with drones among other things! Prefer the hackathon scene? Tessel is a prize in the upcoming [TadHacks](http://tadhack.com/2015/) hackathon for Telecom Application Developers!


This Week in Tessel is sent out every week, and we hope it plugs a joy and love module into your hearts. See you next time. — The Tessel Project Team]]></content:encoded>
    <wp:post_name>121284956252</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/120850543061</link>
    <pubDate>Sat, 06 Jun 2015 09:01:39 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[speaking]]></category>
		<category domain="tag" nicename="speaking"><![CDATA[speaking]]></category>
		<category domain="tag"><![CDATA[workshops]]></category>
		<category domain="tag" nicename="workshops"><![CDATA[workshops]]></category>
		<category domain="tag"><![CDATA[conferences]]></category>
		<category domain="tag" nicename="conferences"><![CDATA[conferences]]></category>
		<category domain="tag"><![CDATA[presenter]]></category>
		<category domain="tag" nicename="presenter"><![CDATA[presenter]]></category>
		<category domain="tag"><![CDATA[speaker]]></category>
		<category domain="tag" nicename="speaker"><![CDATA[speaker]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[presenting]]></category>
		<category domain="tag" nicename="presenting"><![CDATA[presenting]]></category>
		<category domain="tag"><![CDATA[cfp]]></category>
		<category domain="tag" nicename="cfp"><![CDATA[cfp]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/120850543061</guid>
    <!--<wp:post_id>120850543061</wp:post_id>-->
    <wp:post_date>2015-06-06 6:01:39</wp:post_date>
    <wp:post_date_gmt>2015-06-06 13:01:39</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessel at Conferences</title>
    <description></description>
    <content:encoded><![CDATA[#####6/8/15– [Kelsey Breseman](blog.technical.io/search/kelsey+breseman)

It’s conference season, and there are a lot of open calls for speakers! Consider presenting in the hardware/IoT space with Tessel– audiences are curious about the new field, and we’re here to support you.

### Why give a talk?

Being a speaker is the most effective (and I think most enjoyable) way to experience a conference. You stand on a stage and talk about something you find interesting for just a few minutes. Then, for the rest of the conference, you’ll be approached by people who want to talk to you about that same interesting thing.

As a speaker, you’re providing part of the conference’s value. Other speakers go to a conference to learn from each other, including you. You’ll likely get to know and talk to the people you went to the conference to see, because they came to see you as well.

Organizers, particularly in the JS community, recognize the value you’re adding to the conference and work to make it easier for you. Speakers generally get free entry to the conference, and often airfare/lodging covered as well. If you’re interested in the conference, it’s definitely worth considering becoming a speaker.

### What can I talk about?

Present whatever you’re excited about sharing! Have you made a cool project? Do you have ideas about the connected world? What insights do you have into open source projects and communities? I’ve given Tessel-related talks on human-computer interaction, the Node community, projects, and technical details of the project. It all depends on the audience and what you have to share.

Or if you’re just excited about sharing the technology, many conferences offer workshop sessions and hackathons. This is my personal favorite “speaker” role– helping people build something in the physical world, often for the first time. If you’re interested in doing this, please reach out to me (kelsey at technical.io)! Since you likely don’t have 20 Tessels to run a workshop, we’re happy to lend you some.

Get inspired by [previous talks](https://github.com/tessel/presentations)!

First-time speakers: I’d like to offer you a note of particular encouragement. New faces, fresh perspectives, are particularly sought out by conference organizers. See the next section for Calls for Speakers.

### How can we help?

We’re here to support you! Join us on [Tessel’s community chat on Slack](https://tessel-slack.herokuapp.com/)– we have an #events-speaking channel where you can come to ask questions or find someone to preview your talk. We also sometimes announce relevant conferences there, some of which are specifically asking for Tessel talks.

You can also find a great number of calls for papers/calls for speakers [on Lanyrd](http://lanyrd.com/calls/), a directory of conferences.

When you’re building your slides, please feel free to borrow (with credit) from [previous presentations](https://github.com/tessel/presentations)! You can also find Tessel-related image assets on the [press page](//tessel.io/press). Videos of some past Tessel-related talks can be seen [here](https://www.youtube.com/playlist?list=PL_6p2qk5XCAypMZxJIYOzMhxUZKcMkM23).

Leading up to your talk, please reach out! We are always excited to help promote your Tessel talk on Twitter and the forums. We’ll retweet photos from your presentation, and would love to share your slides as well– submit pull requests on the [presentations repo](https://github.com/tessel/presentations)!

Get out there! And don’t hesitate to ask me for advice or talk suggestions– I’m [@selkeymoonbeam](//twitter.com/selkeymoonbeam) on Twitter.

Best,<br/>
Kelsey]]></content:encoded>
    <wp:post_name>120850543061</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/120787387602</link>
    <pubDate>Fri, 05 Jun 2015 13:29:33 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/120787387602</guid>
    <!--<wp:post_id>120787387602</wp:post_id>-->
    <wp:post_date>2015-06-05 10:29:33</wp:post_date>
    <wp:post_date_gmt>2015-06-05 17:29:33</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>This Week in Tessel – June 3, 2015</title>
    <description></description>
    <content:encoded><![CDATA[### Developing Tessel 2

**Latest Tessel boards from our manufacturer!** We had fifteen new Tessel 2 boards come in this shipment. 13 of these worked out of the box, and the last two were brought online with a small amount of manufacturing rework and firmware tweaks. Left to test in this batch: evaluate that all 10-pin modules operate correctly on the new boards (finishing our API implementation in the process), as well as writing more comprehensive tests for our test rig. Barring any surprises, we’ll be able to witness our next manufacturing run of Tessels in China in person!

![](http://i.imgur.com/9B8Uv9q.jpg)

### Projects

Zac Colley made a new community module! [Connect a thermal printer to Tessel using the `tessel-thermalprinter` module.](https://github.com/zaccolley/tessel-thermalprinter) Includes configuration for different typefaces and barcodes.

[A presentation of “Yodazone”](https://www.youtube.com/watch?v=0tFhtU6F1bk) by Anubhooti Pareek. Help relieve stress, powered by Tessel and PubNub. 

[Communicate with LEGO TECHNIC Power Functions](https://github.com/andrewcashmore/node-lego-ir)—LEGO motors, lights, and power source units)— with this Tessel module by Andrew Cashmore.

[Using the Tessel Camera module with the Project Oxford Face APIs](http://hypernephelist.com/2015/05/18/tessel-camera-project-oxford-face-api.html), by Thomas Conté. 

### Blogs

[The Time I Took my 6 Year Old to a Hackathon](http://www.programmableweb.com/news/time-i-took-my-6-year-old-to-hackathon/analysis/2015/05/21), by Tim Lytle.

[Remote Control and Monitoring for Tessel Servo](http://www.pubnub.com/blog/remote-control-and-monitoring-for-tessel-servo/), by PubNub HQ.

### Tessel around the world:

SAP held a Tessel CodeJam in the [Netherlands](https://twitter.com/Sygyzmundovych/status/604295000491446272). Microsoft Azure held an IoT hackathon in [Stockholm](https://twitter.com/bjorn_eriksen/status/603862010300919808). Tessel was at [WearHacks Paris](https://twitter.com/BenoitDat/status/602494338581528576), a wearables + IoT hackathon. Wouter Verweirder presented Node on hardware at [Hookedfest in Belgium](https://twitter.com/wouter/status/605673683663880192).

In our next issue, we’ll have a progress update on our manufacturing timeline, as well as several new tools to get started developing for Tessel 2. Follow us on [our blog](http://tessel.io/blog), or on Twitter at [@technicalhumans](http://twitter.com/technicalhumans). Enjoy your week! — The Tessel Team]]></content:encoded>
    <wp:post_name>120787387602</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/119481196202</link>
    <pubDate>Wed, 20 May 2015 20:05:10 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[tessel 2]]></category>
		<category domain="tag" nicename="tessel-2"><![CDATA[tessel 2]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[open source]]></category>
		<category domain="tag" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="tag"><![CDATA[governance]]></category>
		<category domain="tag" nicename="governance"><![CDATA[governance]]></category>
		<category domain="tag"><![CDATA[io.js]]></category>
		<category domain="tag" nicename="iojs"><![CDATA[io.js]]></category>
		<category domain="tag"><![CDATA[node.js]]></category>
		<category domain="tag" nicename="nodejs"><![CDATA[node.js]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[web developers]]></category>
		<category domain="tag" nicename="web-developers"><![CDATA[web developers]]></category>
		<category domain="tag"><![CDATA[dojo]]></category>
		<category domain="tag" nicename="dojo"><![CDATA[dojo]]></category>
		<category domain="tag"><![CDATA[announcement]]></category>
		<category domain="tag" nicename="announcement"><![CDATA[announcement]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/119481196202</guid>
    <!--<wp:post_id>119481196202</wp:post_id>-->
    <wp:post_date>2015-05-20 17:05:10</wp:post_date>
    <wp:post_date_gmt>2015-05-21 00:05:10</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessel Project joins Dojo Foundation under open governance</title>
    <description></description>
    <content:encoded><![CDATA[#####5/20/15– [Tim Ryan](blog.technical.io/search/tim+ryan)

We have an exciting announcement to make: [Ownership and direction of the Tessel Project](https://github.com/tessel/project) now belongs to a Steering Committee which exists independently of Technical Machine. This group exists as [part of the Dojo Foundation](http://mail.dojotoolkit.org/pipermail/foundation/2015-May/000498.html). <a href="https://twitter.com/intent/tweet?text=Tessel+Project+is+now+under+open+governance%21+Get+involved+today%3A+https%3A%2F%2Fgithub.com%2Ftessel%2Fproject+%23iot+%23hardware">[ Tweet This ]</a> <a href="https://github.com/tessel/project">[ Learn More ]</a>

<img src="https://cloud.githubusercontent.com/assets/80639/7736468/c78ac686-fef8-11e4-9931-cc3ef8fd37a0.png" style="width: 80%">

Tessel has become the infrastructure to prototype and build Internet-connected devices, and the starting point for makers and developers to make their ideas into reality. The Internet of Things is still very young, and we at Technical Machine want to capitalize on the opportunity to make a huge impact on these technologies as they increasingly become part of our lives.

The Tessel Project spins out the development of Tessel, its module ecosystem, and its intuitive tooling, while retaining the manufacturing relationships and expertise gained from selling Tessel the past two years. All royalties off of selling hardware will be reinvested into the project’s own development and outreach. Our goal is an open source project that rivals the availability, manufacturing capacity, and support of more established, but often locked-down hardware solutions. 

This move to open governance borrows heavily from io.js’s Technical Committee model. It adopts explicit communication policies, clear avenues for contribution, and a culture of encouraging new contributions. By moving toward open governance, we’re hoping to make the Tessel Project a leader and a model for an open community-driven project in the hardware space.

Passionate about Nodebots, education, or makerspaces? Interested in exploring new concepts or bringing entire products to market? [Get involved as a collaborator](http://github.com/tessel/project), and you'll be supported by a community with like-minded goals and ambitions. Or [join us on Slack](http://tessel-slack.herokuapp.com/) and share your feedback. We’d love to hear from you!

All the best,

Tim, Jon, Kelsey, Jia, Eric, Kevin, Kwyn, and Ken
  
  
PS: The [Tessel 2 CLI](https://github.com/tessel/t2-cli) can be worked on today without needing hardware by using the [Tessel 2 Virtual Machine](https://github.com/tessel/t2-vm). There are plenty of [open issues](https://github.com/tessel/t2-cli/issues) that we can use help on. What ideas will you bring to Tessel?]]></content:encoded>
    <wp:post_name>119481196202</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/118892358912</link>
    <pubDate>Wed, 13 May 2015 17:41:43 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[this week in tessel]]></category>
		<category domain="tag" nicename="this-week-in-tessel"><![CDATA[this week in tessel]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[manufacturing]]></category>
		<category domain="tag" nicename="manufacturing"><![CDATA[manufacturing]]></category>
		<category domain="tag"><![CDATA[design]]></category>
		<category domain="tag" nicename="design"><![CDATA[design]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[node]]></category>
		<category domain="tag" nicename="node"><![CDATA[node]]></category>
		<category domain="tag"><![CDATA[io.js]]></category>
		<category domain="tag" nicename="iojs"><![CDATA[io.js]]></category>
		<category domain="tag"><![CDATA[code]]></category>
		<category domain="tag" nicename="code"><![CDATA[code]]></category>
		<category domain="tag"><![CDATA[international]]></category>
		<category domain="tag" nicename="international"><![CDATA[international]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/118892358912</guid>
    <!--<wp:post_id>118892358912</wp:post_id>-->
    <wp:post_date>2015-05-13 14:41:43</wp:post_date>
    <wp:post_date_gmt>2015-05-13 21:41:43</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>This Week in Tessel — May 13, 2015</title>
    <description></description>
    <content:encoded><![CDATA[### Developing Tessel 2

**Manufacturing Update** We’re eagerly anticipating a shipment from our manufacturer of fifteen prototype boards, expected in the next two weeks. This marks the fourth revision of Tessel 2 and the expected final design before full manufacturing.

**Developing for Tessel without Tessel** The process for developing for Tessel 2 today is getting easier. Last week Jon McKay wrote a post on [contributing to Tessel 2 without hardware](https://tessel.io/blog/118385488827/contributing-to-tessel-2-without-hardware). To make this process even easier, we are [designing a command line tool to simply <nobr>`t2-vm run`</nobr>](https://github.com/tessel/t2-vm/pull/5) so you can get started with Tessel in just two lines.

**Rust Support** How will the familiar Tessel experience be used to program in Rust? <nobr>`t2 init --lang rust <project_name>`</nobr> now [creates a new Cargo project](https://github.com/tessel/t2-cli/tree/kn-rust)! Currently [the process for targeting Rust code](https://github.com/tessel/rust-tessel) for a Tessel 2 is messy, but we’re working on [cross-compiling the Rust standard library](https://gist.github.com/kevinmehall/16e8b3ea7266b048369d) without needing additional tools. More Rust examples will be demoed in the upcoming weeks.

**Test Rig** Eric Kolker spent time playing mechanical engineer this week. A blog post about Tessel’s entire testing process will come later, but here are some pretty renders of the [publicly available test rig](https://github.com/tessel/t2-hw-test-rig#mechanical-model).

![Renders of our Test Rig](https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/120338ab-4298-4340-abdf-fd1046258d93.png)

### Projects

**Tessel-powered cereal dispenser** As part of [Fullstack Academy’s](http://www.fullstackacademy.com/) Tessel hack day, student [Carlos Mendoza](https://twitter.com/carlosrmendoza/status/596793165740384258) created an automatic cereal dispenser (or kibble dispenser?) that dispenses food at the behest of a webapp.

New projects:

* [Tessel cereal dispenser](https://twitter.com/carlosrmendoza/status/596793165740384258) by [Carlos Mendoza](https://twitter.com/carlosrmendoza)
* [Point and shoot camera](http://tessel.hackster.io/starbuck-clone-1/tessel-camera) by [Rahul Vagadiya](https://twitter.com/rahul_vagadiya)


### Community Updates

**Tessel Worldwide** Matteo Collina [held a Tessel Workshop](https://twitter.com/afelicioni_pro/status/598418796395765760) as part of JSDay in Verona, Italy. Plenty of [hardware](https://twitter.com/jsconfit/status/598411123604480001), plenty of [cool hacks](https://twitter.com/stefanodipede/status/598473447619067904)! Tessel was also spotted around the US at Fullstack Bootcamp in NYC as part of a [Tessel Hack Day](https://twitter.com/fullstack/status/596741460378124288), a[presentation at OpenWest Conf](https://twitter.com/jcmneal/status/596774836170457088) in Utah by Kevin Sidwar, and [at IoT World](https://instagram.com/p/2l3thopmXF/?taken-by=technicalhumans) in San Francisco.

This Week in Tessel is sent out every Wednesday! In the next week we’ll have some exciting news for the Tessel project. Talk to you soon. — The Tessel Team]]></content:encoded>
    <wp:post_name>118892358912</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/118385488827</link>
    <pubDate>Thu, 07 May 2015 16:10:03 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[jon mckay]]></category>
		<category domain="tag" nicename="jon-mckay"><![CDATA[jon mckay]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[design]]></category>
		<category domain="tag" nicename="design"><![CDATA[design]]></category>
		<category domain="tag"><![CDATA[contributing]]></category>
		<category domain="tag" nicename="contributing"><![CDATA[contributing]]></category>
		<category domain="tag"><![CDATA[open source]]></category>
		<category domain="tag" nicename="open-source"><![CDATA[open source]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/118385488827</guid>
    <!--<wp:post_id>118385488827</wp:post_id>-->
    <wp:post_date>2015-05-07 13:10:03</wp:post_date>
    <wp:post_date_gmt>2015-05-07 20:10:03</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Contributing to Tessel 2 Without Hardware</title>
    <description></description>
    <content:encoded><![CDATA[#####5/7/15– [Jon McKay](blog.technical.io/search/jon+mckay)

###How to contribute to the Tessel project

We’ve received quite a few inbound requests asking how folks can get involved in the development of Tessel 2. That’s why we’re excited to release a [Virtual Box image](https://github.com/tessel/t2-vm) that will enable you to emulate a Tessel 2 from your computer and even use your computer’s USB ports as Tessel 2 USB ports. Follow along for a quick guide on how to get up and running with the VM.

**Edit: the VM development process has been improved and you can find updated documentation on [the vm repo](https://github.com/tessel/t2-vm).**

Tessel 2 features two 10-pin module ports for lower-level microcontroller peripherals and two USB ports for peripherals like flash drives, 3G dongles, and webcams. You can use the VM start building USB modules like [this Node wrapper that works with most off-the-shelf webcams](https://github.com/tcr/node-audiovideo). It’s a great way to become a part of the core contributors before the actual hardware is generally available. 

You’ll need to install [Vagrant](https://www.vagrantup.com/) (version 1.6 or greater) as a prerequisite. After that, you’ll need to pull down the CLI, generate an SSH key, and connect to the shiny new VM:

<pre>
# Clone the CLI repo
> ~/projects/ git clone git@github.com:tessel/t2-cli.git
# Link it so you can develop and use it globally
> ~/projects/ cd t2-cli; npm link --local;

# Generate the SSH key to use with the VM
> ~/projects/t2-cli t2 key generate
</pre>
<pre>
# From the containing folder, clone the VM repo
> ~/projects git clone git@github.com:tessel/t2-vm.git
# Download dependencies
> ~/projects/ cd t2-vm; vagrant plugin install vagrant-triggers;
# Start up the VM
> ~/projects vagrant up
</pre>

At this point, you should be able to search for all advertising devices and list them on the command line (using mDNS):
<pre>
> ~/projects/t2-vm t2 list
> INFO Scanning for connections...
> INFO LAN CONNECTION ip:  192.168.128.171 , name:  Tessel-080027AF44E2 , Authorized:  true
</pre>

And then you can deploy code
<pre>
# From the CLI repo...
> ~/projects/t2-cli t2 run test/test-deploy-script.js
> INFO Connecting to Tessel...
> INFO Connected over LAN. IP ADDRESS: 192.168.128.71
> INFO Bundling up code...
> INFO Bundled. Writing to T2.... 4096
> INFO Deployed.
> INFO Running script...
> If I had an actual LED, it would be on right now...
> If I had an actual LED, it would be off right now...
> If I had an actual LED, it would be on right now...
</pre>

### Biggest issues to tackle

We recently completed the entire spec for the Tessel 2 CLI on [our forums](https://forums.tessel.io/t/t2-cli-spec-comments-requested/1743) and added Github issues for [each feature that needs to be written](https://github.com/tessel/t2-cli/labels/spec-cli). There are still a lot of interesting features to build for the CLI and these issues are the lowest hanging fruit. 

In addition, there are a couple of larger issues that could use some love. Please do get in touch if you’d like to get involved with these features:

- [@allanca](https://github.com/allanca) started working on a binary server that can inject [pre-compiled versions of modules with binary dependencies](https://github.com/tessel/t2-cli/issues/96) into bundles being deployed onto a Tessel. We need to get these changes rolled into the new CLI and the actual server deployed.
- [@nplus11](https://github.com/nplus11) has started porting Tessel libraries to Rust including the [Tessel interface](https://github.com/tessel/rust-tessel) and the [Accelerometer Module](https://github.com/tessel/rust-accel-mma84). The CLI needs to be modified to accept Rust projects as well as JavaScript and the rest of the modules need to be ported from JS to Rust (that might be a little harder without the hardware).

### Get in touch
We’re looking forward to see more of what the community cooks up. Get in touch with us on IRC (#tessel) or on the [Forums](https://forums.tessel.io/c/contributing) if you have any questions or suggestions. ]]></content:encoded>
    <wp:post_name>118385488827</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/118327501952</link>
    <pubDate>Wed, 06 May 2015 21:24:38 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[this week in tessel]]></category>
		<category domain="tag" nicename="this-week-in-tessel"><![CDATA[this week in tessel]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[manufacturing]]></category>
		<category domain="tag" nicename="manufacturing"><![CDATA[manufacturing]]></category>
		<category domain="tag"><![CDATA[design]]></category>
		<category domain="tag" nicename="design"><![CDATA[design]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[node]]></category>
		<category domain="tag" nicename="node"><![CDATA[node]]></category>
		<category domain="tag"><![CDATA[io.js]]></category>
		<category domain="tag" nicename="iojs"><![CDATA[io.js]]></category>
		<category domain="tag"><![CDATA[code]]></category>
		<category domain="tag" nicename="code"><![CDATA[code]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/118327501952</guid>
    <!--<wp:post_id>118327501952</wp:post_id>-->
    <wp:post_date>2015-05-06 18:24:38</wp:post_date>
    <wp:post_date_gmt>2015-05-07 01:24:38</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>This Week in Tessel — May 6, 2015</title>
    <description></description>
    <content:encoded><![CDATA[Hello Tesselators, we’re happy to present to you our first installment of This Week in Tessel. Here we will highlight the latest news, projects, and events, from code, to community, to hardware manufacturing.

### Developing Tessel 2

**Moving towards Manufacturing** There is now an approximate timeline for manufacturing and shipping Tessel 2:

1. *Week of 5/25* — Fifteen prototype boards are sent back from the manufacturer (bringing the total number of Tessel 2’s up to 22!) These will undergo final testing before starting production.

2. *Week of 6/8* — Finalize test rigs and procedures.

3. *Week of 6/15* — Begin final production in China.

4. *Late July / Early August* — Expected shipments and general sale of Tessel 2.

Developments from the engineering side:

* A specification for Tessel’s command-line tools was opened up for community review and is [ready for implementation](https://github.com/tessel/t2-cli/issues)

* Tessel 2 will be tested by our manufacturer using a custom test rig. The [schematics for these test rigs are online](https://github.com/tessel/t2-hw-test-rig) and are now moving to board layout.

### Projects

**New hardware module** Community member [@nmoadev](https://github.com/nmoadev) created a [Tessel module for Adafruit’s backlit keypad](https://tessel.io/modules#trellis) as part of an Embedded Systems final project.

New projects:

* [Turn off a Drupal site with an IR remote](http://tessel.hackster.io/orkj/remote-controlled-drupal-8) by [@orkj](https://twitter.com/orkj)

* [A Tessel camera app with PubNub](http://www.hackster.io/sunny-gleason/programming-a-tessel-camera-app-with-javascript) by [Sunny Gleason](https://twitter.com/sunnygleason)

### Community Updates

**JavaScript and Hardware** [Tomomi Imura](https://twitter.com/girlie_mac) chronicles the dive from pure code to hardware, including Tessel, LittleBits, Arduino, Johnny-Five, and Raspberry Pi in [Hardware Hacking for JavaScript Peeps: How I Got My Hands on Breadboards and Resistors](http://www.girliemac.com/blog/2015/05/04/hardware-hacking-for-javascript-developers/)

More blog posts:

* [Introduction to Tessel combined with Azure EventHub](https://sandervandevelde.wordpress.com/2015/05/03/introduction-to-tessel-combined-with-azure-eventhub/) by [Sander van de Velde](https://twitter.com/svelde)

* [A climate module demo walkthrough (in Japanese)](http://whiskers.nukos.kitchen/2015/04/30/tessel-module.html) by [Nuko’s Kitchen](https://twitter.com/nukos_)

**Tessel Worldwide** This week, #SMARTuniverCITY in Barcelona learned about [gathering data from sensors on Tessel](https://twitter.com/alexmuntada/status/595863540474454016). Students from Singapore [experimented with Tessel](https://twitter.com/CrispianTanTS/status/595059625218543616) at an SAP HANA Codejam.

<br>

Come back next Wednesday for more! — The Tessel Team

Anything you would like mentioned in the next issue? [Tweet @technicalhumans](https://twitter.com/technicalhumans) to let us know!]]></content:encoded>
    <wp:post_name>118327501952</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/113974925762</link>
    <pubDate>Wed, 18 Mar 2015 14:39:06 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel 2]]></category>
		<category domain="tag" nicename="tessel-2"><![CDATA[tessel 2]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[tessel2]]></category>
		<category domain="tag" nicename="tessel2"><![CDATA[tessel2]]></category>
		<category domain="tag"><![CDATA[technical]]></category>
		<category domain="tag" nicename="technical"><![CDATA[technical]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[run]]></category>
		<category domain="tag" nicename="run"><![CDATA[run]]></category>
		<category domain="tag"><![CDATA[push]]></category>
		<category domain="tag" nicename="push"><![CDATA[push]]></category>
		<category domain="tag"><![CDATA[erase]]></category>
		<category domain="tag" nicename="erase"><![CDATA[erase]]></category>
		<category domain="tag"><![CDATA[tessel push]]></category>
		<category domain="tag" nicename="tessel-push"><![CDATA[tessel push]]></category>
		<category domain="tag"><![CDATA[code]]></category>
		<category domain="tag" nicename="code"><![CDATA[code]]></category>
		<category domain="tag"><![CDATA[developer]]></category>
		<category domain="tag" nicename="developer"><![CDATA[developer]]></category>
		<category domain="tag"><![CDATA[development setup]]></category>
		<category domain="tag" nicename="development-setup"><![CDATA[development setup]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/113974925762</guid>
    <!--<wp:post_id>113974925762</wp:post_id>-->
    <wp:post_date>2015-03-18 11:39:06</wp:post_date>
    <wp:post_date_gmt>2015-03-18 18:39:06</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Run, Push, and Erase: Developing on Tessel 2</title>
    <description></description>
    <content:encoded><![CDATA[#####3/18/15– [Kelsey Breseman](blog.technical.io/search/kelsey+breseman)

This post should give you a glimpse into developing on Tessel’s CLI.

The basic interaction of a Tessel is to create some code, then send it to the device to execute.

Current Tessel users should be familiar with `tessel run` to run the code one time in RAM, `tessel push`, which pushes the code over to Tessel’s Flash memory to be executed whenever the Tessel boots up, and `tessel erase`, which erases any pushed code.

Tessel 2 runs on a totally different architecture than does Tessel 1, so we’re recreating the command line interface to act in the exact same way, but with a different implementation.

Of course, this setup will get easier over time as developments continue.

### Setting up Tessel 2

Tessel 2 is based on the [OpenWRT](https://openwrt.org/) architecture (& the same WiFi/processor chip), so for applications that don’t involve much hardware, I can use an [OpenWRT Node](http://wrtnode.com/) or for a **no hardware required** dev setup, this [Vagrant box](https://gist.github.com/tcr/d7b401d349dcfe20c2e3#file-run-sh) to act as a Tessel 2.

Here’s my setup:

![OpenWRT Node setup](https://lh3.googleusercontent.com/KhwhvAdNWysrFSjFJshfWvYJGPu4-caCFDSu2V_spac=w992-h558-no)

#####OpenWRT Node wired to USB serial, and powered (via a small USB hub) by microUSB. Both of those plug into another USB hub, which plugs into my computer.

Before you can do anything, you’ll have to install the serial cable (we use [this one](http://www.prolific.com.tw/us/showproduct.aspx?p_id=229&pcid=41)), and then dterm (it’s on brew) to talk to it over the command line. For easy development, you can then set up an alias to set up serial comms with Tessel 2:

<pre>
alias v2="dterm /dev/tty.usbserial 115200"
</pre>

Assuming that’s all working properly, you can now run your aliased command `v2` and hit enter to boot up. Congrats! You’re now root on your Tessel 2/OpenWRT. You should be able to save files and run them with `scp -r path/to/code-folder root@ip:/path/to/dest` (/tmp is good).

### Setting up CLI

Great, now you can get Tessel 2’s CLI up and running. On your computer (not on Tessel 2), clone the [V2 CLI repo](https://github.com/tessel/v2-cli) and follow the instructions in the readme. Again, this is going to change and eventually be npm installable, but this works for now.

Be sure to fill out the config.env file – a quick `ifconfig` on Tessel 2 should get you its IP address.

All right! Now you should be able to run the CLI from your computer’s terminal. What fun! If you’ve gotten this far, you’re both qualified and welcome to begin contributing to the Tessel 2 CLI– check out the issues/features to make [here](https://github.com/tessel/v2-cli/issues)!

### How Tessel 2 Calls Run

The rest of this post is a walkthrough of how Tessel’s Run, Push, and Erase commands work, just to get you into the code.

Jon actually wrote the `run` command, but I can walk you through it.

The functions reside in the `lib` folder of the repo, and are called from `bin/prime.js`. So any new command will need a new file in `lib` and a new function call in `prime.js`.

The `run` and `push` commands are both in `lib/deploy.js`, because they both deploy code. Note that this is an exception to the naming scheme; most functions should have their own file in `lib` and be called `function.js`.

When someone types `tessel run file.js` in the command line, prime.js calls sftpDeploy and passes it the filename to deploy.

Your computer then SSH’s into Tessel 2…

<pre>
function sftpDeploy(opts, push) {
 tessel.logs.info('Connecting to remote Tessel...');
  // Create a new SSH client connection object
  ssh.createConnection(function(err, conn) {
</pre>

...stops existing processes and deletes old code…

<pre>
conn.exec('/etc/init.d/tessel-app stop; rm -rf /tmp/remote_code’, function(err, stdin) {
</pre>

...makes a tarball of all the files relevant to your code…

<pre>
// Gather details about the file structure of the script being sent
var ret = tessel.analyzeScript(process.cwd() + "/" + opts.entryPoint, {verbose: opts.verbose});
// Tar up the code to improve transfer rates
tessel.tarCode(ret.pushdir, {node: true}, function(err, bundle) {
</pre>

...and sends it over the WiFi, really just copying it into a temporary folder.

<pre>
conn.exec('mkdir /tmp/remote_code/; tar -x -C ' + filepath, function(err, rstdin) {
</pre>

Once finished, Tessel 2 runs your code by calling `node app`.

The `push` command is only slightly different: if you specify to sftpDeploy that you are pushing code, it copies it into a different (non-temporary) folder (`/app` instead of `/tmp/remote_code’), and also makes a file called `start` within that folder, which Tessel 2 will execute whenever it boots up:

<pre>
conn.exec("echo '#!/bin/sh\ncd /app\nexec node .' > " + filepath + "/start && chmod +x '" + filepath + "/start'", function (err, newStream) {
</pre>

### Tessel Erase

If that sounded simple, it was. Tessel erase is even simpler: you call `tessel erase` from your command line and your computer SSH’s into Tessel 2 stops existing processes and calls `rm -rf` on the folder where pushed code is stored:

<pre>
function erase(opts) {
  var filepath = '/app';

  // Create a new SSH client connection object
  ssh.createConnection(function(err, conn) {

    conn.exec('/etc/init.d/tessel-app stop; rm -rf /app’, function(err, rstdin) { });
  });
}
</pre>

### Moving Forward

This whole thing took only part of a day, including setting up the Tessel 2 and writing this blog post. Next, I’m tackling some of the Tessel 2 configuration to make setup simpler. We’re in a fun place right now, where you can pick a feature and build it out. Want to join?

[Tessel 2 CLI repo](https://github.com/tessel/v2-cli)

Kelsey
]]></content:encoded>
    <wp:post_name>113974925762</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/113532308027</link>
    <pubDate>Fri, 13 Mar 2015 15:44:17 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[openstate]]></category>
		<category domain="tag" nicename="openstate"><![CDATA[openstate]]></category>
		<category domain="tag"><![CDATA[open source]]></category>
		<category domain="tag" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="tag"><![CDATA[oss]]></category>
		<category domain="tag" nicename="oss"><![CDATA[oss]]></category>
		<category domain="tag"><![CDATA[oshw]]></category>
		<category domain="tag" nicename="oshw"><![CDATA[oshw]]></category>
		<category domain="tag"><![CDATA[dominik wind]]></category>
		<category domain="tag" nicename="dominik-wind"><![CDATA[dominik wind]]></category>
		<category domain="tag"><![CDATA[opencamp]]></category>
		<category domain="tag" nicename="opencamp"><![CDATA[opencamp]]></category>
		<category domain="tag"><![CDATA[POC21]]></category>
		<category domain="tag" nicename="poc21"><![CDATA[POC21]]></category>
		<category domain="tag"><![CDATA[COP21]]></category>
		<category domain="tag" nicename="cop21"><![CDATA[COP21]]></category>
		<category domain="tag"><![CDATA[sustainability]]></category>
		<category domain="tag" nicename="sustainability"><![CDATA[sustainability]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/113532308027</guid>
    <!--<wp:post_id>113532308027</wp:post_id>-->
    <wp:post_date>2015-03-13 12:44:17</wp:post_date>
    <wp:post_date_gmt>2015-03-13 19:44:17</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Dominik Wind: Creating a Tangible Vision for a Sustainable, Open World</title>
    <description></description>
    <content:encoded><![CDATA[#####3/13/15– [Kelsey Breseman](//blog.technical.io/search/kelsey+breseman)

I was introduced to Dominik Wind through a friend I made at MozFest, a several-floor consortium of chaotics working together to change the world through open source projects. When we think of open source, we tend to think of [open source software](http://opensource.org/), or some think of [open source hardware](http://www.oshwa.org/) in the embedded sense, but the movement is broader. Open source is about information flow– within [companies](http://www.opencompany.org/), [countries](http://opengovernmentdata.org/), and communities.

Dominik is working on [OpenState](http://www.openstate.cc/), which hopes to bring together several of these communities and create a tangible vision for an open and sustainable world. Right now, OpenState is putting together [POC21](//poc21.cc), an ambitious five-week project that will take place leading up to the UN’s climate change conference, COP21 in Paris.



**Kelsey:** What is OpenState?

**Dominik:** OpenState is an organization that we founded in early 2012. Me and my friends, we were all working for NGOs, but we all had the feeling that it was not the most we could do. It was work that didn’t hurt, that paid the rent, but it didn’t feel satisfying anymore. We were looking for ways to create more impact within our lifetime.

We really care about topics like resource depletion and climate change. We were working on that before, but we founded OpenState to fully focus on that. For us it’s all about developing sustainable ways of life, which includes production, manufacturing, and consumption habits.

We think that social processes and group processes can be a very powerful tool for change. Most people only focus on technology, so we easily jump to technology as the one and only option for finding solutions. We wanted to focus more on the behavioral side of things– which still includes technology, but it’s also more than that.

OpenState is a laboratory for exploring these processes: what do we need for a sustainable society besides the technology?

**Kelsey:** What is an example of making changes through processes?

**Dominik:** Everything that touches you emotionally opens you up to changing your opinions. What we do is bring together people who have diverse skillsets and also cultural backgrounds and try to create a world in our work. It’s an experimental space where you prototype whatever is the topic. So if it’s the future of work, for example, you simply behave like you would be in that different world.

You behave like the future is already there: if I could make everything perfect, what would that perfect environment be?

The same thing, we are trying now with OpenState in Paris regarding sustainability. What would a family, or a neighborhood, or a friendship group, how could we live more sustainably without giving up the standards of life that we have today?

The interesting thing is that when you get people together in such an intense experience, they reinvent themselves. Nobody knows each other, so everybody tries to live up to his or her best version. You can restart in a way, and pretend to be whatever you want to be. And then the time is long enough to get into habits. You exercise of practice something as a habit for some weeks, and that really has an impact on you, that really changes your behavior.

We often hear from participants in former camps that they changed their lives. It’s really a pretty powerful situation.

**Kelsey:** So what’s the plan for for POC21?

**Dominik:** This camp will be five weeks of living and working together in the beautiful Château de Millemont near Paris. It’s called POC (proof of concept) 21 because it will be around the climate negotiations of the UN in Paris in December, COP 21.

![](http://www.openstate.cc/wp-content/uploads/2014/02/opener.jpg)

**Kelsey:** What do you expect in terms of tangible results from POC21?

**Dominik:** We are aiming to find solutions or technological approaches to satisfying basic needs: how to produce energy, food, water, communications, shelter, and mobility. Within those five areas, we will invite open source projects that are already working on that; we won’t start at zero.

By the end, we hope to include all these parts into one holistic prototype of that potential sustainable future, so you really can have a festival in the end where people can come see what this “future living” could  look like.

You can step into that Wikihouse, for example, with that open energy monitoring system installed, where you understand, here I can see my energy consumption, here I can control my impact. Make it tangible for people.

And then, they get the story of, it’s produced in a different way, it could be locally produced, it’s repairable, everything’s open source, the average craftsman wherever you live could open these things and get it fixed without you having to re-buy the next thing. Then the whole story comes in on why certain products might be more sustainable than others.

But first it needs to be this experience: touch things and understand it’s real.

**Kelsey:** What do you see as the primary tangible outcome?

**Dominik:**  Currently there are hundreds of potential solutions and different groups around the globe that are at different stages of their product development.

We aim to offer an  online platform and an on- and offline catalog where we showcase the solutions that are ready for broader audiences beyond the maker and hacker niches. We showcase the ones that are for average people– like if my parents want to buy a new washing machine, they should easily get access to the best open source washing machine.

Most platforms online for this show all potential options, and normal people quickly lose orientation. They are simply overwhelmed with hundreds of projects, and all of the details.

We also hope to kind of showcase things in a shop format. We will start in Berlin, and have an “open everything” shop. What you can get there works, but it’s fundamentally different. It’s still a lamp, or a desk, or whatever, but it’s produced differently, and it can be repaired, or you could rebuild it yourself if you have the skills.

All of this, and then it will also be about the media outreach in the uprun to the COP21 conference, showing that it’s not all too late.

We expect that the UN talks in Paris will be like always: you will have the politicians negotiating; outside, you have normal people, saying it needs to go faster, or differently, or whatever, in between police, you will have some demonstrations, maybe you will have some riots. At the end they will have the press conference, saying yeah, they have some very minimal improvement on something, and then everybody goes back to normal.

We would like to have a new narration on that: there are people who have already started on creating a more sustainable way of doing things, it’s going around the globe, and it’s a movement you can join. Or at least you can start using different products that are designed and produced on a very different basis.

![OpenState](http://www.openstate.cc/wp-content/uploads/2014/02/cite2.png)

**Kelsey:** What are some of the biggest blockers for people who want to use products from this movement?

**Dominik:** Communication and IT stuff is probably the hardest, I think. The open source scene is really small, and the open source hardware scene is even smaller, and before that you have digital literacy, basically. Like my mom, if something doesn’t work automatically with her computer, she has no idea what it could be. It’s just not working.

For all the other things, average people can rely on crafts and craftsmen. Open Desk, for example, offers an online platform where you can upload designs for chairs and desks and tables. People can buy designs and they get shipped, or you can download the designs for free, and produce it yourself. The entrance barrier is lower for most people, to pick up their drill and saw, it’s simply easier for most people than microcontrollers.

**Kelsey:** What sort of labs and materials will you have at POC21?

**Dominik:** We have partnered with all kinds of hacker and maker spaces in Paris, and with fablabs.io, the global network for FabLabs. We’ll have some machinery right onsite, at the castle, and we will also get maker spaces in Paris involved to produce certain things.

I think the only thing that we are creating from scratch is the media outreach. We have to find the right stories, and the right timing regarding COP21.

Everything regarding prototyping and tech development and coding and stuff like that, will be a blend of groups, tools, and spaces that are already there and are up and running.

**Kelsey:** At POC21, you’re hoping to have a mix of people from a variety of different backgrounds, right?

**Dominik:** Yes: engineers and coders, but also people from many other backgrounds. When we develop tech today, the mindset is strictly focused on coders, engineers, and maybe you have some business people involved. But I think our tools are forming our reality. The things we use create certain habits, and these habits become a part of us.

Development of technology changes our behaviors and our perception of the world. This development of technology has had a huge cultural impact on everyone. It’s not just a market thing, as we mostly treat it at the moment. There are also spiritual questions, and social questions, and questions of how we actually want to live as a society. These all should be integrated into good product design. It’s really a powerful tool for cultural change.

[![](http://www.openstate.cc/wp-content/uploads/2014/02/cite3.png)![](http://www.openstate.cc/wp-content/uploads/2014/05/os_logo.png)](//openstate.cc)

Ed. note: you can see a video about the vision of POC21 [here](https://www.youtube.com/watch?v=wkKR4T_-NsA)]]></content:encoded>
    <wp:post_name>113532308027</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/113259439202</link>
    <pubDate>Tue, 10 Mar 2015 11:45:05 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[Tessel 2]]></category>
		<category domain="tag" nicename="tessel-2"><![CDATA[Tessel 2]]></category>
		<category domain="tag"><![CDATA[eric kolker]]></category>
		<category domain="tag" nicename="eric-kolker"><![CDATA[eric kolker]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[features]]></category>
		<category domain="tag" nicename="features"><![CDATA[features]]></category>
		<category domain="tag"><![CDATA[electrical engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[electrical engineering]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/113259439202</guid>
    <!--<wp:post_id>113259439202</wp:post_id>-->
    <wp:post_date>2015-03-10 8:45:05</wp:post_date>
    <wp:post_date_gmt>2015-03-10 15:45:05</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessel 2 Hardware Overview</title>
    <description></description>
    <content:encoded><![CDATA[#####3/10/15– [Eric Kolker](//blog.technical.io/search/eric+kolker)

Hey Tesselators, Eric here. Since we announced [Tessel 2](//tessel.io) last week, we have gotten a lot of questions about the new hardware. 

![Tessel 2 boards](https://31.media.tumblr.com/7de2e26cf5c2b2ba71a3451649cc8423/tumblr_inline_nkz51mYV6H1s75tgz.jpg)

##### Shiny new boards back from the manufacturer!

### Tessel 2 at a glance

We packed a whole lot of hardware in there:

- A 580MHz WiFi router system on chip ([Mediatek MT7620n](http://www.anz.ru/files/mediatek/MT7620_Datasheet.pdf)) running linux ([OpenWRT](https://openwrt.org/))
- 64 MB of DDR2 RAM
- 32 MB of flash storage
- 2 High-speed USB 2.0 ports
- a micro USB port
- A 10/100 Ethernet port (RJ-45 jack) 
- A 48MHz ARM Cortex M0 microcontroller ([Atmel SAMD21](http://www.atmel.com/Images/Atmel-42181-SAM-D21_Datasheet.pdf))
- Two module ports that are much more capable than their predecessors
- a button and a bunch of LEDs, because what’s a Tessel without blinky?

The board’s bill of materials and physical characteristics are only part of the picture. We spent a long time thinking about how we wanted to architect Tessel to push it beyond “another dev board” and clear into “this platform is **exactly** what I needed!” territory.

A few features under the hood (in addition to the ones current Tessel users know and love, including the [expansive plug-and-play module ecosystem](https://tessel.io/modules) and [high-level language support for low-level hardware features](https://tessel.io/docs/hardwareAPI)) include:

- Router-grade 802.11b/g/n WiFi, including access point mode (Tessel can **be** a router)
- 16 GPIO broken out as a pair of multi-purpose module ports
- Individual control over and protection for all outward-facing power buses (USB and module ports)
- A form factor designed for abstraction and flexibility in the hardware, software, and mechanical worlds as you scale from prototype to production

### Abstraction boundaries

One of the things which makes software so powerful is a heavy emphasis on frameworks and abstraction. Although there is no shortage of “standards” (official or otherwise) in the hardware space, one thing nobody has done particularly well yet is cleanly and clearly share abstraction boundaries between the hardware and software layers. We’re looking to change that.


![The high-level system diagram for Tessel 2...and most other single-board computers, too.](https://31.media.tumblr.com/05ed8ab2f50eaaa79a5960f7f6d176aa/tumblr_inline_nkz55siNHj1s75tgz.png)

##### The high-level system diagram for Tessel 2...and most other single-board computers, too.

The diagram above is a high-level system diagram for Tessel 2. Let’s dive into where we drew the lines internally.

The board employs a processor/coprocessor architecture. The Mediatek runs your user code, hosts USB devices, handles the network connections (be they wired, wireless, or cellular over USB), and communicates with the SAMD21.

The SAM acts as a coprocessor and handles real-time, low-level IO through the module ports, USB comms through the Micro USB port, and programming the device as a whole.

The two chips are connected by a SPI bridge that also includes the onboard flash (the [readme for Tessel 2’s firmware repo](https://github.com/tessel/v2-firmware/blob/master/README.md) goes into more detail here).

The whole system is powered from the single Micro USB (device) port, and its specific functional blocks look more like this:
![Functional blocks of Tessel 2](https://31.media.tumblr.com/208cff6e0cf946a206255e04aa214ff4/tumblr_inline_nkz566fIXl1s75tgz.png)

##### Functional blocks of Tessel 2

This arrangement, which also very closely mirrors where the related parts are located on the hardware itself, allows us to draw the boundaries *at the both the mechanical and conceptual level* as follows:

![Functional groups in Tessel 2’s architecture](https://31.media.tumblr.com/559c4d45074644a5c335987bec7c698e/tumblr_inline_nkz56bL5SC1s75tgz.png)

##### Functional groups in Tessel 2’s architecture

Or, on the board itself:
![Functional groups on Tessel 2’s prototype hardware](https://31.media.tumblr.com/83018b7f2595c1f4b3877f74eb86d134/tumblr_inline_nkz56hKzbm1s75tgz.png)

##### Functional groups on Tessel 2’s prototype hardware

Consciously drawing these same boundaries when creating both the software and the hardware lets us make developing on the Tessel platform simple and consistent throughout an entire *product* cycle, which is a huge win. I’ll talk more about this in another post, but suffice it to say that most of the [optimization and integration story](https://tessel.io/#optimize) relies on the fact that we kept these boundaries at the top of the list when making design decisions about how to build Tessel 2.

### New and improved module ports

The two module ports on the new Tessel look and behave the same as the ones on the original board, but they’re actually a lot more versatile. In fact, don’t lock yourself into thinking that they’re “just module ports”; think of them as mini GPIO banks. Each pin on the two 10-pin headers is unique and can be reconfigured to do almost anything from speaking alternate comms protocols to clock generation. For example, if you decide you don’t want SPI, feel free to give yourself another I2C or UART with minimal changes to the SAMD21’s firmware. Touching only JS, you can forgo the fancy comms in favor of just plain GPIO, which gives you access to as many as 16 of them.

Plus, a nifty new power architecture gives you individual control over the 3.3V rails on each port, so you can turn modules off when they’re not in use to save power. This essentially converts the 3.3V rails on the ports into two high-current (at least 250 mA) output pins that just so happen to power modules most of the time. ...Or, put another way, this is our pass at solving hot-plugging for low-level hardware.

Last but not least, all eight pins on Port B are *also* inputs to a 12-bit, 350[ksps](http://www.maximintegrated.com/en/glossary/definitions.mvp/term/ksps/gpk/573) ADC, with adjustable gain that can operate in differential mode, if that floats your boat. Not too shabby.

### Close

We’re pretty excited about the new hardware and what in enables, and hope you are too. It’s been in the works for a few months now, and at this point it’s time for us to start cranking out docs and answering questions, so don’t hesitate to reach out on the [forums](https://forums.tessel.io/) or over email.

On the subject of docs, [here](https://tessel.io/opensource) is what we’ve released so far, including a [preliminary schematic](https://design-files.tessel.io/2015-03-03/tm-t2-03.pdf) (full [KiCAD](http://www.kicad-pcb.org/display/KICAD/KiCad+EDA+Software+Suite) project files are on their way soon). For now, head to our [website](https://tessel.io/) to see more.

Until next time,<br/>
~e

-----------------------------------------------------

This post has been translated:

* [Русский (Russian)](http://softdroid.net/obzor-tessel-2-ru)]]></content:encoded>
    <wp:post_name>113259439202</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/112888410737</link>
    <pubDate>Fri, 06 Mar 2015 12:09:09 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Tessel 2]]></category>
		<category domain="tag" nicename="tessel-2"><![CDATA[Tessel 2]]></category>
		<category domain="tag"><![CDATA[Node]]></category>
		<category domain="tag" nicename="node"><![CDATA[Node]]></category>
		<category domain="tag"><![CDATA[Linux]]></category>
		<category domain="tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="tag"><![CDATA[OpenWRT]]></category>
		<category domain="tag" nicename="openwrt"><![CDATA[OpenWRT]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[Javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="tag"><![CDATA[Microcontroller]]></category>
		<category domain="tag" nicename="microcontroller"><![CDATA[Microcontroller]]></category>
		<category domain="tag"><![CDATA[Microprocessor]]></category>
		<category domain="tag" nicename="microprocessor"><![CDATA[Microprocessor]]></category>
		<category domain="tag"><![CDATA[Jon McKay]]></category>
		<category domain="tag" nicename="jon-mckay"><![CDATA[Jon McKay]]></category>
		<category domain="tag"><![CDATA[Technical Machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[Technical Machine]]></category>
		<category domain="tag"><![CDATA[io.js]]></category>
		<category domain="tag" nicename="iojs"><![CDATA[io.js]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/112888410737</guid>
    <!--<wp:post_id>112888410737</wp:post_id>-->
    <wp:post_date>2015-03-06 9:09:09</wp:post_date>
    <wp:post_date_gmt>2015-03-06 17:09:09</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Moving Faster with io.js</title>
    <description></description>
    <content:encoded><![CDATA[#####3/6/15– [Jon McKay](//blog.technical.io/search/jon+mckay)

After building a custom JavaScript engine for embedded devices, we’ve made the decision to transition to io.js for our newest hardware offering: [Tessel 2](//tessel.io).

![Tessel 1 & Tessel 2](https://s3.amazonaws.com/technicalmachine-assets/product+pics/2015+03+05+product+shots/IMG_9154-small.JPG)

We had been developing Tessel, a JavaScript powered, Node.js compatible microcontroller, for almost two years. In order to run JavaScript on a Cortex-M3 device, we had built a custom minimal runtime that “transpiles” JavaScript code to Lua and runs that Lua code on a Lua VM. While we are proud of the progress we’ve made with the runtime and extremely grateful for all of the developers who have contributed code, a shift to running io.js on V8 better suits the immediate needs of the community. 

Overall, I strongly believe that this change will make for a much more consistent and robust development experience on the Tessel platform. This shift was motivated by a confluence of factors including power consumption, JS/Node compatibility, and budding story for npm modules with binary dependencies. 
###Power Consumption
When it comes to running JavaScript and Node, the implementation pathway is to either use an existing runtime like V8 (often on top of Linux) or build a custom runtime. Originally, we decided to build our own runtime so that we could put JavaScript on an ARM Cortex M3, thus opening up the opportunity for lower power consumption and “realtime” IO (as compared to using an OS scheduler). 

For a variety of reasons, but primarily the power consumption of the CC3k WiFi chip and the 32MB of SDRAM, optimizing power consumption on Tessel has proved to be futile. For comparison, the Raspberry Pi B+ (running a Linux distro) [uses slightly more than 1 Watt of power](http://raspi.tv/2014/how-much-less-power-does-the-raspberry-pi-b-use-than-the-old-model-b) and [Tessel uses ~.85W at 5V](https://www.google.com/url?q=https%3A%2F%2Fforums.tessel.io%2Ft%2Fmeasure-power-draw%2F1005%2F2%3Fu%3Djon&sa=D&sntz=1&usg=AFQjCNHeVyGplmo07EZGHlBgrD2IKs0PDg). Certainly, taking proactive measures such as aggressive on/off management of the WiFi chip, batching network requests, and only running JavaScript on intervals can reduce this consumption, but not by enough to get weeks or months of battery life. In short, if you’re trying to build a truly low-power application, WiFi is not the right protocol to use and you don’t want to be using JavaScript on the device. If you are using WiFi with a high level language, you’re going to need more power, so you might as well have all of the extensibility and reliability of Linux + V8 instead of a fledgling RTOS.

###JavaScript and Node.js Compatibility
Perhaps the most pressing reason for using V8 is the promise of JavaScript and Node.js/io.js compatibility. We believed that over time we could cover all of the corner cases of JavaScript with our own runtime, but perhaps we should have taken a cue from the “[Wat talk](https://www.destroyallsoftware.com/talks/wat)” that it was going to be an uphill battle. While the semantics between JavaScript and Lua are very similar, they are also just slightly different in many ways (For example, the comparisons between null vs undefined vs falsy), and capturing all of those idiosyncrasies has proved frustrating for both the users and developers of the Runtime. 

In addition, the Node.js landscape has shifted. We’ve seen the io.js team fork the Node.js project and start developing new features. We have been fortunate to have an external contributor add relevant Node libraries as submodules, but others must be implemented by hand in Lua. The maintenance and overhead of making sure new Node.js/io.js libraries are consistent with our runtime is yet another uphill battle. For that reason, we'll be running vanilla io.js on a lightweight distribution of Linux (openWRT). io.js allows us to remain backwards compatible for folks looking to use Node.js, but lets us stay on the leading edge of development.

I still do believe it’s possible to make a *nearly* compatible runtime, but it’s going to take much more work than we expected and that resource investment would be an unwise business decision. 

###Binary Dependencies
One consequence of rolling our own runtime is that modules with binary dependencies (the most requested of which has been [ws](https://www.npmjs.com/package/ws) for faster websocket support) are not be able to run on Tessel 1. These modules depend on C/C++ libraries which get compiled on the platform that installed them prior to being able to run them. In order to get these modules to run on Tessel 1, we would need to be able to link them against V8 APIs cross-compiled for ARM Cortex-M3, which would take a ton of development effort. Moving forward, we have a pathway for using these highly requested modules in development. If we use V8, we can stash popular binaries pre-built for Tessel 2’s MIPS architecture and send those over when requested by a project’s package.json.

###The Plan For Colony
Colony is the name of Tessel 1's original runtime. Going forward, Technical Machine will continue making small bug fixes in Colony but will not adding any new features. That being said, some of the Technical Machine team, including myself and Tim, are interested in maintaining and improving Colony at a personal level. We’ve thrown around the idea of getting the runtime on standalone, barebone WiFi chip, using only the onboard flash. We’re not retiring the runtime completely, but rather, putting it on the backburner for now.

###So how is this different from Pi/BeagleBone/*Insert Linux-based Dev Board Here*?

Several people have asked us how we expect to differentiate ourselves from other Linux-based development boards. The Tessel platform is unique in that we believe we can deliver the best developer experience by abstracting away the underlying OS technology and ensuring there is a clear path to production. We still believe that developers just want to push code, build their product, and deploy it - the underlying technology is only relevant if it gets in the way of functionality. In that vein, we continue to have a Heroku-like deployment process of `tessel run` on Tessel 2.

In short, the Tessel platform is still the fastest way to prototype an idea and, with Tessel 2, the fastest way to bring it to market.

![Tessel 2](https://s3.amazonaws.com/technicalmachine-assets/technical-io/press-page/branding/tessel2-horizontal.png)]]></content:encoded>
    <wp:post_name>112888410737</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/112787427217</link>
    <pubDate>Thu, 05 Mar 2015 10:17:25 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[tessel 2]]></category>
		<category domain="tag" nicename="tessel-2"><![CDATA[tessel 2]]></category>
		<category domain="tag"><![CDATA[new product]]></category>
		<category domain="tag" nicename="new-product"><![CDATA[new product]]></category>
		<category domain="tag"><![CDATA[announcement]]></category>
		<category domain="tag" nicename="announcement"><![CDATA[announcement]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[javascript on hardware]]></category>
		<category domain="tag" nicename="javascript-on-hardware"><![CDATA[javascript on hardware]]></category>
		<category domain="tag"><![CDATA[javascript microcontroller]]></category>
		<category domain="tag" nicename="javascript-microcontroller"><![CDATA[javascript microcontroller]]></category>
		<category domain="tag"><![CDATA[rust microcontroller]]></category>
		<category domain="tag" nicename="rust-microcontroller"><![CDATA[rust microcontroller]]></category>
		<category domain="tag"><![CDATA[python microcontroller]]></category>
		<category domain="tag" nicename="python-microcontroller"><![CDATA[python microcontroller]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/112787427217</guid>
    <!--<wp:post_id>112787427217</wp:post_id>-->
    <wp:post_date>2015-03-05 7:17:25</wp:post_date>
    <wp:post_date_gmt>2015-03-05 15:17:25</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>A Truly Open Hardware Development Platform</title>
    <description></description>
    <content:encoded><![CDATA[#####3/5/15– [Kelsey Breseman](blog.technical.io/search/kelsey+breseman)

Technical Machine announced [Tessel 2](//tessel.io) today: an open source $35 development platform you can take into production.

###Why Tessel 2?

Tessel 2 is an affordable, accessible, open, and robust platform to build connected hardware devices and funnel them into production.

The Tessel platform was created to abstract away the initial hurdles of hardware development. Tessel opens up connected device development to people who want to build embedded devices, but don’t have the time to start with Ohm’s law and work their way up.

Tessel 2 takes the promise of Tessel 1, adds features and a path to production, and cuts the cost in half.

The original Tessel board fulfilled the goal of electrical accessibility. High-level languages, plug-and-play extensibility, and the use of a great package manager for installation all made Tessel the fastest way to build a prototype out of an idea. But it was also frustrating: fast as it is to get started on a Tessel 1, it’s hard to go beyond a single prototype. In the year since we shipped Tessel, we’ve been collecting feedback on user experiences and investigating solutions. Tessel 2 is based on that feedback.

With Tessel 2, we are building for users who want to take an idea, prototype, and then produce in volumes of hundreds to thousands.

For Tessel 2, we sought out the most reliable WiFi chips on the market, and found a solution in wireless router systems-on-chips (SoC’s, combined processor/wifi solutions). These chips are built into millions of routers and have very robust hardware and firmware. As an added bonus, they are produced in such high quantity that they cost less than $3 in quantity, compared to Tessel 1's $13 for WiFi + microcontroller.

We’re now able to offer a device that runs 20x as fast, offers full Node and io.js, has router-grade Wifi reliability, USB ports, and ethernet, and costs less than the original Tessel. That offering is [Tessel 2](//tessel.io).

![Tessel 2](https://s3.amazonaws.com/technicalmachine-assets/launch/tessel2-800x600.jpg)

###Putting Tessel in a Product

At this much lower cost, Tessel 2 is cheap enough to just insert into a product (as people do with BeagleBone and Raspberry Pi). And it's open source, so you're free to do so. Unlike BeagleBone and Raspberry Pi, however, we’re going out of our way to make that easy for you.

At the 100s-1000s scale, we are able to automate some simple [optimization](https://tessel.io/#optimize) on the boards and components, thus reducing your end cost for embedded hardware.

We're also offering [services](https://tessel.io/#scale) to support you as you scale up to production. Manufacturing is opaque and intimidating. It doesn't have to be– we're aiming for a Heroku-like experience of physical product deployment.

Please [email us](mailto:support@technical.io) if you’re interested in discussing this with us.


###Will Tessel 2 act like Tessel 1?

In a word, yes. For all intents and purposes, using the Tessel 2 should feel the same as using the original Tessel (but more reliable and a little faster). However, there will be a few changes to the underlying technology: original Tessel runs the Colony compiler to turn JS into Lua and is thus “Node compatible”; Tessel 2 just runs Node on V8– so you won’t run into the same incompatibility bugs. You can read more about this in the blog post [Moving Faster with io.js](https://tessel.io/blog/112888410737/moving-faster-with-io-js).

There will also be a couple of differences in modules: Tessel 2 supports USB modules, so a USB webcam, USB speakers, and a few other modules will move into this sphere. This will allow us to reduce the cost of these modules and get you a higher-quality experience. USB compatibility also lets us easily support new third-party plug-and-play hardware capabilities in a similar capacity to current Tessel modules.

###Is it still JavaScript?

Tessel 2 will not only run JavaScript with io.js (a fork of Node), but also support Rust, Python, and potentially other languages.

At the time of writing, we have already run Rust and Python code on a Tessel 2.

Around the time of ship, we will release examples of running Rust and Python on Tessel 2, as well as documentation on library porting for interested members of the community. The same process of plugging in a hardware module and installing the driver from a package manager will apply for these languages. Both languages will eventually be fully supported on Tessel 2.

Multiple language support is made possible by the change in underlying technology on Tessel. We’re excited to see where you take it.

###What about low-power applications?

Based on feedback from the original Tessel, we’ve learned that people building connected device systems often need either a relatively high-power system to control and process various inputs and outputs, or they want simple, low-power sensor nodes.

WiFi chips are now more reliable and also cheaper than they were a year ago, but Wifi as a protocol is not designed to be low power. Tessel 2’s power draw is slightly less than that of the original Tessel, but not much.

For people seeking low-power solutions, we’re working on adding that capability to the Tessel ecosystem as well. Expect another big announcement next month.

###Open source

Tessel is open source, software and hardware, and we owe a lot to our community. We have open sourced the software work we’ve done so far on Tessel 2, along with the schematics to [tessel.io/opensource](//tessel.io/opensource), and will continue developing in the open. As the hardware is finalized, we will release layouts.

We will be adding more about the architecture of Tessel 2 to the [open source page](//tessel.io/opensource) in the next few days.

###What will you build?

Our vision at Technical Machine is to build an open and scalable platform for hardware development. We’re reimagining the hardware development process with a focus on creating the best possible developer experience. Tessel 2 is the next piece of that vision.

With Tessel 2, we’re giving you the experience of Tessel, at the price of a Pi, with scaling opportunities that no other development board offers.

For us, Tessel 2 lays out the next leg of the journey on your road to production. We’re waiting in anticipation for you to take your next steps.

Kelsey Breseman<br/>
Director of Community, Technical Machine

[**Check out Tessel 2**](//tessel.io)<br/>
Discuss Tessel 2 on our [forums](https://forums.tessel.io/c/tessel-2).

![Tessel 2](https://s3.amazonaws.com/technicalmachine-assets/technical-io/press-page/branding/tessel2-horizontal.png)]]></content:encoded>
    <wp:post_name>112787427217</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/111880314797</link>
    <pubDate>Mon, 23 Feb 2015 14:26:09 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[jay henderson]]></category>
		<category domain="tag" nicename="jay-henderson"><![CDATA[jay henderson]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[interview]]></category>
		<category domain="tag" nicename="interview"><![CDATA[interview]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[code school]]></category>
		<category domain="tag" nicename="code-school"><![CDATA[code school]]></category>
		<category domain="tag"><![CDATA[barrl]]></category>
		<category domain="tag" nicename="barrl"><![CDATA[barrl]]></category>
		<category domain="tag"><![CDATA[education]]></category>
		<category domain="tag" nicename="education"><![CDATA[education]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/111880314797</guid>
    <!--<wp:post_id>111880314797</wp:post_id>-->
    <wp:post_date>2015-02-23 11:26:09</wp:post_date>
    <wp:post_date_gmt>2015-02-23 19:26:09</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>An Interview with Jay Henderson: Product Prototyping on Tessel</title>
    <description></description>
    <content:encoded><![CDATA[#####2/23/15– [Kelsey Breseman](blog.technical.io/search/kelsey+breseman)

Jay Henderson spills over with excitement, ideas, and passion. He’s building a code school and a hardware startup both from the ground up right now, trying to improve drought conditions in north Texas, working to bring together his community, and working to teach himself ever more about technology and programming.

Just home from his day job, Jay sat on the couch to Skype me, all smiles and enthusiasm. His girlfriend’s dog, Dylan, jumped up more than once to try to join the call.


**Kelsey:** What are the main things you’re working on right now?

**Jay:** The main thing that I’m working on right now is a water barrel app. It was part of the North Texas Apps Challenge. During the summer months, there’s water restrictions in Dallas County. We wanted to create a rain barrel app that tracked how much water you got from your roof, and then how much water you started to dispense on your yard.

The other thing I’m working on is, I’m trying to start a learning lab that teaches people how to do software, and then eventually, blend that into hardware.

**Kelsey:** Can you tell me more about your water barrel app?

**Jay:** We met with an environmentalist at the University of North Texas, and he told us about how he made these products for people who wanted them in their home. He said, if there was a way to calculate how much water they’re using, and have an app that displaces the water out as they use it, that would be cool. So we made Barrl.

I went on Adafruit and bought a liquid flow meter, a soil / moisture temperature sensor, and a brass solenoid valve, which we plan to use with to tell us how much water is going into the barrel.

We’re trying to work on that as our first product as a startup, as Intelliflux Labs. We’re hoping to bootstrap it. That’s why we love Tessel, because I have a frontend development background, so the JavaScript makes it quite easy for me.

**Kelsey:** You said you have a frontend development background?

**Jay:** My background is in front-end: HTML, CSS, JavaScript, user interface; user experience is my forte. In the last year, I have really immersed myself in full-stack development. Experimenting with that has been fun.

The reason why I want to learn as much as I can is so that I can teach other people who are unaware of what’s going on with JavaScript, and see what they can make it do with physical computing.

**Kelsey:** Can you tell me more about your learning lab plans?

**Jay:** About three years ago, I was going to school and working at the Apple store, but courses became really expensive. I couldn’t go to school anymore, and then I lost my job. But then I started to teach myself during my unemployment. I created a Personal Learning Environment, a PLE, started navigating content, learning things that I was personally interested in for programming, and started to get an understanding.

I’d started to see different code schools pop up, and I decided to have a trial run of a code school here.

Eight people paid for it, and then we got ten scholarships from a company. It was really exciting meeting the different personalities. I had a gentleman who was developing in C#, who wanted to learn more about HTML, CSS, and JavaScript. I had a school teacher who knew nothing about programming or anything like that.

I started the course with an introduction to PLEs; I asked each person, what do you want to build? What is it you’re passionate about every day? Your learning is going to grow based on your personal learning environment. I’m teaching you how to go out and find these tools, but in the end it’s going to be up to you. When you’re faced with a problem, you’ll need to reach out to others in the community to get answers.

One gentleman was doing graphic design, and he loved the job, but it was so demanding, and he wasn’t getting a lot of compensation for the work he was doing. During the course, I had a speaker series where I had professionals come up. They spent most of their time answering questions and engaging with the students. One speaker came in and talked about the Myo, different human interactions that are coming out, and that really engaged him [the graphic designer]. He started prototyping UI with some of his graphic UI knowledge, and he just landed a job at the Dallas Morning newspaper here just from interacting with the course.

I helped teach a man who was homeless, in the course. He took it on quite well, and now he’s working in a coworking space, and developing clients with a unique support system.

The testimonials and success stories are starting to come out, and we only did just a trial course.

**Kelsey:** That’s amazing. What are you planning to do differently with your next course?

**Jay:** I think I condensed too much into five weeks. We covered a lot of UI and frontend, but I didn’t go into detail with programming logic. I think that the concept of doing something physical for that will be easier to grasp, because you’re dealing with physical components. You can actually see physical objects come to life coding physical elements, such as, if this is true, then have a led blink.

I’m hoping to do more– from surveying students from the course, participants were more on the marketing side, more  graphic artists and designers, and I’m starting to brainstorm about how I can help bridge the visual with the programming.

**Kelsey:** Are you planning to use the Tessel for that?

**Jay:** One of the things that I want to do with Tessel is to take two or three projects from the projects board and teach that to the class in workshops. Once they get a foundation with JavaScript, introduce them to the things that they can do outside of JavaScript. In which we’ll open up the possibility of creating products.

[Tessel] is actually making it a whole lot easier for software developers to create real products with only a little bit of knowledge of hardware. That’s one thing that I’m trying to do, is give frontend developers and software developers a chance to interface with hardware.

After you teach the foundational tools and introduce the projects, you can expand your creativity and your imagination. I’m excited to teach people that you can start making your own products and start making a profit from just an idea.]]></content:encoded>
    <wp:post_name>111880314797</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/110748152142</link>
    <pubDate>Wed, 11 Feb 2015 16:02:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[interview]]></category>
		<category domain="tag" nicename="interview"><![CDATA[interview]]></category>
		<category domain="tag"><![CDATA[Dave Nugent]]></category>
		<category domain="tag" nicename="dave-nugent"><![CDATA[Dave Nugent]]></category>
		<category domain="tag"><![CDATA[Kelsey Breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[Kelsey Breseman]]></category>
		<category domain="tag"><![CDATA[hackathon]]></category>
		<category domain="tag" nicename="hackathon"><![CDATA[hackathon]]></category>
		<category domain="tag"><![CDATA[PubNub]]></category>
		<category domain="tag" nicename="pubnub"><![CDATA[PubNub]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[Technical Machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[Technical Machine]]></category>
		<category domain="tag"><![CDATA[hacking]]></category>
		<category domain="tag" nicename="hacking"><![CDATA[hacking]]></category>
		<category domain="tag"><![CDATA[meetup]]></category>
		<category domain="tag" nicename="meetup"><![CDATA[meetup]]></category>
		<category domain="tag"><![CDATA[community]]></category>
		<category domain="tag" nicename="community"><![CDATA[community]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/110748152142</guid>
    <!--<wp:post_id>110748152142</wp:post_id>-->
    <wp:post_date>2015-02-11 13:02:00</wp:post_date>
    <wp:post_date_gmt>2015-02-11 21:02:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Hacking Community: Interview with Dave Nugent</title>
    <description></description>
    <content:encoded><![CDATA[#####2/11/15– [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

I met Dave Nugent over Meetup several months ago. I’d been reaching out to various meetup organizers in the Bay Area, and his name kept cropping up. I’m continuously amazed at how active Dave is in the developer community, hosting events small and large both locally and internationally. He’s the face of the [San Francisco JS meetup](http://www.meetup.com/jsmeetup/) and of [SF Realtime Coders](http://www.meetup.com/SF-Realtime-Coders/), runs the upcoming [ForwardJS](http://forwardjs.com/) conference, and is currently putting together a new conference called the [IoT Stream Conference](http://iot.streamconf.com/), scheduled for the end of April.


**Kelsey:** How did you come to be such an active member in all of these developer meetups?

**Dave:** I used to be a Java developer and a PHP developer. That was awful [laughs]. But I’ve really liked JavaScript. I started going to JavaScript meetups, and when the organizer of the JavaScript meetup stepped down, I stepped in.

I started running meetups a few years ago, and now we’re doing a few every month. We have around 7,700 members. It just keeps growing.

**Kelsey:** Can you tell me a bit about your role with PubNub?

**Dave:** My title is Evangelist, and I do everything from helping with SDKs and client support to giving talks and organizing hackathons, meetups and conferences. I tend to handle the in-person stuff.

We organize a ton of meetups that we hold here at the office, over 100 a year. [Ed. note: Dave wrote a blog post about this, which you can read [here](https://medium.com/@drnugent/how-to-host-150-meetups-per-year-for-fun-and-profit-4b3e74d18746).]

We try to focus on things that the developer community  is interested in. We’re open to hosting any meetup as long as it’s technical in nature and we can spread the word about it as far as possible. JavaScript, iOS, Android, Ruby, Swift– those are our main meetup languages. We’ll do cryptocurrency and entrepreneur  meetups every once in a while as well.

**Kelsey:** What’s the purpose of holding all of these events?

**Dave:** We usually try to do events where there’s an educational goal, a social goal, or just the goal of building something, where we can facilitate. And you don’t have to use PubNub; if you just want to come in and hack, that’s totally cool.

We try to provide value to the developer community. And by the way, if you ever need real-time messaging, we’re here.

That’s why we love Tessel. It’s really great to be able to say, come in and hack with Tessel and PubNub. You can use Tessel, you can use PubNub, you can use both, you can use neither, we just want to help you build something really awesome.

What tends to happen is that people end up using both, but it’s not like they’re being forced to. They’re doing it because they’re actually getting value out of those tools.

<br/>
![](https://lh3.googleusercontent.com/-9HoUmE5JrPM/VNvC0Pj_98I/AAAAAAAAAOo/2WLo6a6P2h4/w590-h331-no/Screen%2BShot%2B2015-02-11%2Bat%2B12.59.16%2BPM.png)
<blockquote class="twitter-tweet" lang="en"><p>Serious hacking in action <a href="https://twitter.com/hashtag/tessel?src=hash">#tessel</a> <a href="https://twitter.com/hashtag/pubnub?src=hash">#pubnub</a> <a href="http://t.co/oYiHOmZzw8">pic.twitter.com/oYiHOmZzw8</a></p>&mdash; tomomi ☂ imura (@girlie_mac) <a href="https://twitter.com/girlie_mac/status/526075958810271744">October 25, 2014</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<br/>
**Kelsey:** Why does Tessel make sense for you at these events?

**Dave:** One thing that we really like about Tessel is that it’s so easy to just jump in and get started, and then, move from that getting started phase to building a full prototype. Depending on how much time people have, we’ve done hack nights where it’s three hours, and people are able to build a really cool prototype that does some visualization.

There’s not many products where you can go from not knowing anything about something to a prototype in three hours. Especially in hardware.

If you have more time, 24 hours, 48 hours, that just becomes more and more refined and polished. We’ve seen some things that come out of our hackathons where you’re like, this is a product. They could put this in a box, they could make a Kickstarter for this and sell it tomorrow. That’s really, really cool.

![](https://lh3.googleusercontent.com/-hXMEIZxzJi0/VNvA0RMJl2I/AAAAAAAAANs/2C96B1RfZKI/w600-h400-no/10299934_678261452288277_6018190924600624267_n.jpg)

**Kelsey:** Why is it useful for PubNub to bring in a hardware component?

**Dave:** A lot of times, especially with software, people might not understand exactly what PubNub is. It’s sort of this ethereal PubSub realtime messaging framework.

If you show them a demo with Tessel, using PubNub to exchange data with other Tessels, and a real-time dashboard, they say, oh, I got it. You’ve got an internet of things, and Tessel’s the thing, and PubNub provides the internet.

It’s just really easy to comprehend. So instead of explaining what PubNub is, a lot of times, we’ll just point to the Tessel demo, and say, we power this.

I point a lot of people to the Tessel projects page. Tessel is very modular, very plug-and-play. You can easily make a recipe where you’re like, Tessel, modules A, B, C, here’s your code that uses PubNub, and just plug it in, and you’ve got the same demo running on your local machine that somebody else built in Europe, or in Singapore or something.

![](https://lh6.googleusercontent.com/-G5CBXYoPReE/VNvA1AcxcxI/AAAAAAAAAN4/_rKRSk9hDPA/w600-h400-no/10410676_678261475621608_6503671079845543051_n.jpg)

**Kelsey:** What do you see as the promise of the Internet of Things?

**Dave:** The thing that excites me about the Internet of Things is this whole idea about an Internet of Things stack, where you can build a product by using multiple providers at different levels of the stack.

When you go out and build websites these days, it’s not like you’re heading out to Best Buy, buying a webserver, plugging it into the internet. No, you say, I’ll spin up a server on Amazon or a Rackspace and use ready-made services on top of it.

I like the idea of bringing that same stack architecture to the internet of things. Developers can take the components that they want, plug them all together, and build a super robust, high-reliability, low-latency application.

You can have Tessel, that takes care of your hardware, PubNub, that takes care of your message bus, and on top of that, some big data analytics, visualization providers that store data and allow you to manipulate the data that’s already been communicated across your network.

You can start to see huge enterprise applications and products being built on the internet of things, but where the company building the product doesn’t have to build the entire stack by themselves.

**Kelsey:** That’s the focus for your upcoming IoT Stream Conference, right?

**Dave:** That’s the idea: we want to get representatives from each area of the stack to talk about the difficulty of building things in that area that are reliable enough that you can launch products off of them.

The audience is saying, I want solutions. I want to launch my product in three months. What can you do to help me today?

[Ed. note: check out Dave’s upcoming conference at [http://iot.streamconf.com](http://iot.streamconf.com).]]]></content:encoded>
    <wp:post_name>110748152142</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/110166221802</link>
    <pubDate>Thu, 05 Feb 2015 11:10:31 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Kelsey Breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[Kelsey Breseman]]></category>
		<category domain="tag"><![CDATA[Jonathan Clark]]></category>
		<category domain="tag" nicename="jonathan-clark"><![CDATA[Jonathan Clark]]></category>
		<category domain="tag"><![CDATA[Sine Wave Technologies]]></category>
		<category domain="tag" nicename="sine-wave-technologies"><![CDATA[Sine Wave Technologies]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[Applications]]></category>
		<category domain="tag" nicename="applications"><![CDATA[Applications]]></category>
		<category domain="tag"><![CDATA[Interview]]></category>
		<category domain="tag" nicename="interview"><![CDATA[Interview]]></category>
		<category domain="tag"><![CDATA[Industry]]></category>
		<category domain="tag" nicename="industry"><![CDATA[Industry]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/110166221802</guid>
    <!--<wp:post_id>110166221802</wp:post_id>-->
    <wp:post_date>2015-02-05 8:10:31</wp:post_date>
    <wp:post_date_gmt>2015-02-05 16:10:31</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Business solutions for the physical world: an interview with Jonathan Clark, Sine-Wave Technologies</title>
    <description></description>
    <content:encoded><![CDATA[#####2/5/2015– [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

An expanding universe of connected devices means a huge influx of data– but how do you design to collect useful data, and then turn that data into insights? Jonathan Clark founded [Sine-Wave Technologies](http://www.sine-wave.com/) in 2005 to help companies answer that question. 

From deploying safety sensors in underground mines, to collecting data on commercial fishing vessels, to controlling vast swaths of highway signs, Jonathan has been working with companies to deploy unique, connected solutions across the industrial and enterprise space. An early supporter of Tessel, he kindly made the time to speak with me about the space he works in, and how the company now uses Tessel to prototype these solutions.


**Kelsey:** What does Sine-Wave Technologies do?

**Jonathan:** We’re focused on building a server-side platform to allow companies to build applications that take advantage of data that comes from the physical world.

We deploy smart devices to all over the physical world, especially in the enterprise. There’s tons of data out in the physical world, from tracking telematics data on moving vehicles, safety within a building, HVAC or lighting control, solar grids. Up until recently, it’s been very difficult to gather that data and to do anything meaningful with it.

We’ve created a server platform which allows you to take data from any device, over any network, and let you build applications that use that data to solve business problems.

**Kelsey:** Can you go into a little more detail about your stack? How does it work?

**Jonathan:** We’re a full cloud backend with analytics. We have a couple of different layers– an open SDK so you can plug in the MQTTs and CoAPs of the world, you can roll your own protocol, you can connect to a wireless mesh network based on 6LoWPAN, or you can connect to your standard Iridium satellite or cellular network and have it communicate to your device.

Above this layer is a database platform, where we’re storing all of the microtransactions coming from devices. Once we gather data, we normalize it into JSON.  That allows us to deliver higher-order layers of functionality that all take advantage of this common data.

Then on top of that, analytics tools. How do you look at temporal data over time? How can we slice and dice the data? How can we build rules to react to things, to fire off events and triggers?

For example, let’s say you’ve got 8,000 thermostats deployed at a shopping chain all over the country. If we see that, generally speaking, the lights are left on for half an hour after everyone leaves and that increases the ambient temperature in the building unnecessarily.  If the system was smart enough to shut the lights off, it will lower the ambient temperature by about two degrees, and if you do that, you’ll save an annual 6% in your heating costs. That’s the kind of application people want to build off of these datasets.

The platform does a lot of the trend analysis automatically. We’re a micro-transaction engine with tools that are constantly sifting and looking through your big data sets, and generating the trends.

Once you have the trends, you can have a human start to build algorithms against those trends and say, if I extract this piece of data from the billions of data points that come in, I can do something useful. I can save some money, or change the way we operate, or save a life.

Our real goal is to provide a common platform to bridge the gap between the physical and the virtual world. We want people to build real business apps, or connect to their existing applications that they have, like hook up to your ERP, or your SAP deployment, or your Oracle financials, and feed it the data that otherwise has been very expensive for companies to input manually and try to find.

**Kelsey:** When clients come to you, how do you help them solve their problems?

**Jonathan:** A lot of our clients have physical-world problems, and they come to us and ask, can you help us design an application that’s specific to this business problem?

We have a professional services team that will help prototype and design that application. A customer may have engineers on staff; if so, we’ll train up their engineers and maybe do some co-coding with them or provide them training materials, or make the first version of the app and then hand it off to them later on and they’ll maintain it and add new features.

That’s where your team comes in; we’ve been using Tessel for early prototypes. It’s super expensive for us to get a hardware company to take a little sensor and put it on a board, and write some low-level code to control it. It’s so much easier for us to have one of our software folks take something like the Tessel, and for an early prototype, write a little bit of code that speaks to our platform.

We can prototype in days what would usually take weeks, and show something to the customer. Rather than just the software app, Tessel has allowed us to really show off much more of the full stack at the prototype phase.

**Kelsey:** Can you give an example?

**Jonathan:** One of the examples that we’re using Tessel for is a customer who focuses on machine shops. There’s around 60,000 of these machine shops that do $15-25 million in business per year, all just in the US.

One of the problems with those machine shops is that they don’t know who’s working on what, without having a person walk around and physically see it. They don’t know which employees are working on what job, they don’t know which machines are down, and for what reason, or how much throughput those machines are producing.

This customer is going to market with something that will bring intelligence and get visibility into the people and the machines they are operating. We used your Bluetooth sensor to talk to an Android tablet that’s acting as the digital display at the machine to know how long that person is physically in proximity to that machine. That way, we can tell the ERP system to automatically log their hours for billing, tracking, etc.

**Kelsey:** What did you do before you used Tessel?

**Jonathan:** It was awful. Customers were typically heavily involved in having to build and design hardware. I’ve seen people spend millions on building out hardware and have to throw it away as it didn’t meet their requirements. I think that’s changing. Companies like Technical Machine are really proving that you can bring a software approach to an old, stodgy industry. 

In the past, it was your classic companies that were building out boards, writing firmware, writing code for PIC microcontrollers, doing battery analysis– that stuff still goes on, but we didn’t have a good prototyping platform before.

You had to get the idea and requirements to the hardware guys, they would go off and perform some black magic for some extended period of time, and they’d come back with a product that was close to what you wanted, but it was never quite right.

It was difficult unless you fully and perfectly spec’d out the requirements. And as non-hardware folks, it was tough to spec the requirements, because the hardware people would always come back and tell us every reason why those requirements would never work.

Using Tessel, when we take it to our hardware partners, the requirements aren’t on paper anymore. They’re in code. We can hand them that code and a sample, and say, we want this, but we now need to make it low power, and vibration compliant, and it’s got to work in a waterproof case, and the radio needs to work underground, or in a noisy electrical environment.

And the hardware guys are great at doing that. They say, now I’ve got to go off and build an antenna that works next to a diesel motor, how am I going to do it? But it’s not a software problem anymore. It lets everyone focus on their core strengths.

**Kelsey:** What do you think is most exciting about getting all of these systems online?

**Jonathan:** Every other evolutionary step in computing before us, whether it was the PC, the internet itself, mobile– each one of those had a technology component. But more importantly, it changed the way we solve a given problem. At each evolutionary step, we’ve reduced the latency of the interaction, the time it takes to get data from the interaction itself.

The internet of things is trying to reduce that one more level. If we can have zero latency with all of the information in the things in the world, we can start solving problems differently.

For example, rather than doing an audit for your inventory in a warehouse every six months or every year, and finding out things are lost or stolen, if we extend the concept of the internet into your warehouse, we now have real-time access to that information. The concept of an audit goes away because you know when something’s moving or getting lost before it’s even happened.

**Kelsey:** What do you think is the biggest barrier to that connected future at the moment?

**Jonathan:** I think everybody’s wasting their time on only connectivity, trying to gather way too much data. I think you’re going to see a mountain of connection products, a lot of the internet of things platform products out there, are just a giant siphon of data or data repository or connector.

In my opinion, connectivity should be a given. Standards are evolving and will continue to evolve; that’s not the holy grail of this space. The holy grail is in the use of the data itself, in finding that digital needle in the haystack and putting it to use.

Connectivity is a means to an end. Device agnostic, network agnostic, we want great people to invent great hardware.

We want networks to evolve, we want their cost to be reduced, we want people to invent wonderful sensors, and then we want people to be able to take the data from those and build great applications.

![](http://cdn2.hubspot.net/hub/314267/file-413902635-png/Images/sine-wave-logo-final-1.png?t=1421185990928)]]></content:encoded>
    <wp:post_name>110166221802</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/110115579867</link>
    <pubDate>Wed, 04 Feb 2015 20:04:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[new hardware]]></category>
		<category domain="tag" nicename="new-hardware"><![CDATA[new hardware]]></category>
		<category domain="tag"><![CDATA[wifi]]></category>
		<category domain="tag" nicename="wifi"><![CDATA[wifi]]></category>
		<category domain="tag"><![CDATA[node]]></category>
		<category domain="tag" nicename="node"><![CDATA[node]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[iojs]]></category>
		<category domain="tag" nicename="iojs"><![CDATA[iojs]]></category>
		<category domain="tag"><![CDATA[embedded]]></category>
		<category domain="tag" nicename="embedded"><![CDATA[embedded]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/110115579867</guid>
    <!--<wp:post_id>110115579867</wp:post_id>-->
    <wp:post_date>2015-02-04 17:04:00</wp:post_date>
    <wp:post_date_gmt>2015-02-05 01:04:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Upcoming Hardware from Technical Machine</title>
    <description></description>
    <content:encoded><![CDATA[#####2/4/2015– [Updates](http://blog.technical.io/search/update)

As a company, our goal has always been to make it easier for people to develop ideas into products as easily and smoothly as possible. To that end, we're working on new hardware which should improve that process.

We’re still working out the finer points of the design, but you can expect a product announcement around the end of February.

Here are some of the points we’re working on addressing with the new hardware:

* Node.js / IO.js compatibility
* JS execution speed
* Wifi stability
* Cost
* Ability to embed the board in a product

We’d love your feedback on any particular specs you’d like to see in new hardware. Our module ecosystem and APIs will be forward-compatible with new products.

If you're currently developing a hardware product, on Tessel or another platform, we'd like to talk to you and make sure our next product fits your needs. Please [email us](mailto:support@technical.io) and we’ll set up a call.

If you’re in the Bay Area, we’d like to invite you to drop by our Berkeley office and try some hands-on user testing. Please [email us](mailto:support@technical.io) and let us know if you’re interested!

Looking forward to hearing from you,<br/>
Kelsey, Kwyn, Ken, Jon, Eric, Jia, Tim, and Kevin

PS You may have noticed that we’ve updated our [projects page](tessel.io/projects)! It’s now hosted by our friends at hackster.io. This lets us keep our focus on making a great hardware experience, while they keep rolling out new ways to improve your project sharing experience. All of your old projects have been transferred to the new projects page– please claim them!]]></content:encoded>
    <wp:post_name>110115579867</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/108840925797</link>
    <pubDate>Thu, 22 Jan 2015 13:26:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[modules]]></category>
		<category domain="tag" nicename="modules"><![CDATA[modules]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[kevin sidwar]]></category>
		<category domain="tag" nicename="kevin-sidwar"><![CDATA[kevin sidwar]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[diy]]></category>
		<category domain="tag" nicename="diy"><![CDATA[diy]]></category>
		<category domain="tag"><![CDATA[diy module]]></category>
		<category domain="tag" nicename="diy-module"><![CDATA[diy module]]></category>
		<category domain="tag"><![CDATA[new module]]></category>
		<category domain="tag" nicename="new-module"><![CDATA[new module]]></category>
		<category domain="tag"><![CDATA[prototyping]]></category>
		<category domain="tag" nicename="prototyping"><![CDATA[prototyping]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/108840925797</guid>
    <!--<wp:post_id>108840925797</wp:post_id>-->
    <wp:post_date>2015-01-22 10:26:00</wp:post_date>
    <wp:post_date_gmt>2015-01-22 18:26:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>A Web Developer's Guide to Communication Protocols (SPI, I2C, UART, GPIO)</title>
    <description></description>
    <content:encoded><![CDATA[#####1/22/2015– [Kevin Sidwar](http://blog.technical.io/search/kevin+sidwar)

*This post is also on our [docs page](//tessel.io/docs/communicationProtocols), where it will be kept up to date.*

*This guide is meant as a companion to the [Tessel DIY Modules](https://shop.tessel.io/Modules/DIY%20Module%20Kit) and the [DIY Module Guide](https://tessel.io/docs/DIYModule).*

Each of the four ports on a Tessel exposes ten pins for use in creating custom modules. Two of the pins are for power (3.3V and ground) and the other eight are digital pins that can be used to communicate with your module.

All eight communication pins speak in terms of simple on/off states, but only three of them (the GPIO pins) are meant to be controlled manually. The rest, when grouped in pre-defined ways, are capable of encoding complex messages by having their state rapidly toggled in accordance with various protocols. It's a lot like [Morse code](http://en.wikipedia.org/wiki/Morse_code), but for electronics.

In embedded electronics, there are four common protocols and Tessel [supports them all in JavaScript](https://tessel.io/docs/hardwareAPI).

  * [GPIO](#gpio)
  * [SPI](#spi)
  * [I2C](#i2c)
  * [UART](#uart)

This guide will provide a brief overview of the protocols and cover some of the strengths and weaknesses of each.

###Quick Reference
Most of the time, you will choose your protocol based on the parts you are using when designing your module. Other things to consider are the pins you have available, as well as your communication speed requirements. The following table can be used as a quick reference for the more detailed explanations of each protocol below.

| Protocol 	|          # Pins Required          	    |               Supported Ports               	|            Max Speed            	| Example Modules 	|
|:--------:	|:---------------------------------:	    |:-------------------------------------------:	|:-------------------------------:	|:---------------:	|
| GPIO     	|          **1** (G1,G2 or G3)          	| A,B,C,D                                     	| 1kHz                            	| [All Modules](https://tessel.io/modules)                	|
| SPI      	| **3+** (MOSI, MISO, SCK + 1 GPIO pin) 	| A,B,C,D                                     	| 25MBit/s                        	| ![](https://31.media.tumblr.com/e4a6b7e4982cb7800b344ddd5f4aeda2/tumblr_inline_nhxvuu2D961s75tgz.png)               	|
| I2C      	|          **2** (SCL and SDA)          	| A,B (shared bus I2C1) C,D (shared bus I2C0) 	| I2C0 - 1Mbit/s I2C1 - 400kbit/s 	| ![](https://31.media.tumblr.com/34287d5125d69888b44865c156d484d4/tumblr_inline_nhxvxmbwfj1s75tgz.png)                	|
| UART     	|           **2** (TX and RX)           	| A,B,D - hardware C - software               	| 8Mbit/s                         	|  ![](https://31.media.tumblr.com/41dc417bb6eab9cc4b4e014f8035105b/tumblr_inline_nhxvx9dw9y1s75tgz.png)             	|

###A Note on Level Shifting
All of the diagrams and discussions below regarding communication protocols assume that the hardware modules you are communicating with operate at 3.3V, just like the Tessel.

If you have a device on your custom module that operates at 5V, 1.8V, or any other non-3.3V voltage, be careful! Directly connecting components with different operating voltages can damage the Tessel and/or your device.

You can use devices which operate at different voltages by employing a technique called 'level shifting'. Sparkfun has a [nice writeup on voltage dividers and level shifting][level_shifting] that can be used as a starting point.

The easiest way to avoid this complication is by trying to find module components that natively work at 3.3V.

<a name="gpio"></a>
###GPIO
**Pros:** Simple, Requires a single pin

**Cons:** Not good for sending complex data

By far the simplest form of communication is via General Purpose Input/Output (GPIO). GPIO isn't really a 'protocol'. It is a rudimentary form of communication where you manually (in code) turn a pin on and off or read its state.

Each port on the Tessel exposes three GPIO pins that can serve as a digital input or output and are marked as G1, G2, and G3.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/communication-protocols/gpio_blowout.jpg" /></h1>

<p style="text-align:center"><em>GPIO pins available on a Tessel module port: G1, G2, and G3</em></p>

By default, Tessel's GPIO pins are configured to be inputs.

####Input
When acting as a digital input, a pin can be queried in software and will return a value indicating the current state of the pin: high (1 or true) or low (0 or false).

The following code snippet is an example of querying the G1 pin on port A.

<pre>
var tessel = require('tessel'); // Import tessel
var portA = tessel.port['A']; // Select Port A
var myInputPin = portA.pin['G1']; // Assign the G1 pin to a variable

var pinState = myInputPin.read(); // Query the state of the pin
</pre>

This is great for connecting things like [switches, buttons][button_post], and even [motion detectors][pir_project]. Just remember that the Tessel can only handle signals that are 3.3V or lower.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/product+pics/2014+05+15+production+modules/microsd.jpg" height="200px"/></h1>

<p style="text-align:center"><em>The [MicroSD Card Module][sd_module] uses a GPIO pin acting as an input to detect whether a card is inserted or not.</em></p>

#####Determining digital state– a note for the curious:

It's pretty clear that if an input pin sees 3.3V it would be interpreted as a high state and if the pin is connected to ground it would recognize that as a low state. But what if the pin senses something in between, like 2V?

Your first thought might be that a high state is anything 1.65V (halfway between 0 and 3.3) or higher, and anything lower than that would be considered the low state. However, this is not always the case.

The high/low threshold is always determined by the main processor. In the case of the Tessel, that's the LPC1830. The documentation on the LPC1830 tells us that the Tessel will consider an input to be high if it is at least 70% of the Tessel's supply voltage (VDD) which is 3.3V. It also tells us that any signal that is 30% of VDD or lower is guaranteed to be read as a low state. That means anything 2.31V (referenced as VIH) or higher would be considered high, and anything .99V (referenced as VIL) or lower is guaranteed to be interpreted as a low state.

What about the voltages between .99V and 2.31V? The read behavior is undefined and you are not guaranteed to get an accurate result. That's one reason why it's important to make sure that any module you connect to a Tessel input pin provides a high voltage that is between VIH and 3.3V and a low voltage between ground and VIL.

[More GPIO example code and information][gpio_code_example]

####Output
When acting as a digital output, a pin can be set to one of two states: high (on/1/true) or low (off/0/false).
High means the main Tessel board will set that pin to be 3.3V and low means it will set it to 0V.

Digital output is useful for connected hardware that understands simple on/off states. The following code snippet shows how you can set the state of the G2 pin on port B.

<pre>
var tessel = require('tessel'); // Import tessel
var portB = tessel.port['B']; // Select Port B
var myOutputPin = portB.pin['G2']; // Assign the G2 pin to a variable

// Set the pin state with ones and zeroes
myOutputPin.output(1); // Set the pin high
myOutputPin.output(0); // Set the pin low

// Or use booleans
myOutputPin.output(false);
myOutputPin.output(true);
</pre>

Some examples of using a GPIO pin as an output are [simple LEDs][led_example] and for turning appliances on and off with a [relay][relay_module].

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/communication-protocols/320px-5mm_Red_LED.jpg" /></h1>

<p style="text-align:center"><em>An output pin is perfect for controlling an LED. Image is licensed under the [Creative Commons Attribution-Share Alike 2.0 Generic](http://creativecommons.org/licenses/by-sa/2.0/deed.en) license.</em></p>

[More GPIO example code and information][gpio_code_example]

####Tessel Modules That Use The GPIO Protocol
Every Tessel First party module uses the GPIO protocol in some fashion.
The [MicroSD Card Module][sd_module] uses a digital input to detect state on a module.
The [Accelerometer Module][accel_module] uses a digital input to detect a data interrupt from the sensor.
The [Relay Module][relay_module] uses digital outputs to turn things on and off.

<a name="spi"></a>
###SPI
**Pros:** Fast, supports multiple devices on a single bus, allows two-way communication

**Cons:** Requires at least 3 pins

SPI stands for [Serial Peripheral Interface][spi_wikipedia]. The SPI protocol allows data to be exchanged one byte at a time between the Tessel and a module via two communication lines.
This is great for transferring data like sensor readings or sending commands to a module.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/communication-protocols/spi_blowout.jpg" /></h1>

<p style="text-align:center"><em>SPI pins SCK, MISO, and MOSI on Port B of the Tessel</em></p>

The SPI protocol is known as a Master/Slave protocol, which means that there is always a single master device which controls the flow of communication with one or more slave devices. Think of the master as a traffic cop. It directs all of the connected slave devices so they know when it's their turn to communicate.

When you are creating modules, the Tessel will always act as the master device, and your custom module will be a slave device.

The SPI protocol requires a minimum of three signal connections and usually has four (this is in addition to the power connections). The following diagram shows the connections (arrows indicate flow of data).

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/communication-protocols/Simple_SPI.png" /></h1>

<p style="text-align:center"><em>The red lines constitute the shared bus connections used for talking to the slave devices. The green wire is the shared bus connection used by the slaves to talk to the master. The blue line is the chip select for signaling each slave individually.</em></p>


####SCK
This is the clock signal that keeps the Tessel and the module synchronized while transferring data. The two devices need to have a mutual understanding of how fast data is to be transferred between them.
This is sometimes referred to as the baud or bitrate.
The clock signal provides that reference signal for the devices to use when exchanging data.

Without a clock signal to synchronize the devices, the devices would have no way to interpret the signal on the data lines.

One bit of data is transferred with each clock cycle (see the diagram below).

####MOSI
MOSI stands for **M**aster **O**ut **S**lave **I**n and is the connection used by the Tessel to send data to the module. It's on this line that the Tessel will encode its data.

####MISO
MISO stands for **M**aster **I**n **S**lave **O**ut and is the connection used by the module to send data to the Tessel.

####SS or CS
This line, normally referred to as the **Slave Select (SS)** or **Chip Select (CS)** line, is used by the master device to notify a specific slave device that it is about to send data. We normally call it CS, but you may see it either way in datasheets and other references.

When you create a Tessel module which uses the SPI protocol, the CS connection will be handled by one of the GPIO pins (G1, G2, G3) on the Tessel port.

In the SPI protocol, the SCK, MOSI, and MISO connections are shared between all of the slave devices on a given SPI bus. For example, if you connect the MicroSD Card, Camera, and nRF24 modules to the Tessel at the same time, they will all be using the same SCK, MOSI, and MISO lines from the main Tessel chip.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/communication-protocols/Multi_SPI.png" /></h1>


When the Tessel needs to send data to the Camera Module, the MicroSD and nRF24  will see that data but should just ignore it. To accomplish this, the Tessel will pull the CS line that is connected to the Camera Module low and leave the CS line high for the MicroSD and nRF24 modules. This lets the camera know that it is the active module and should pay attention.

The following diagram shows how the various pins in the SPI protocol are toggled to create meaningful data. In this case, the master sends the ASCII character 'S', and the slave responds with 'F'.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/communication-protocols/spi_diagram.jpg" /></h1>

<p style="text-align:center"><em>Timing diagram of SPI data exchange. Modified [image](https://dlnmh9ip6v2uc.cloudfront.net/assets/c/7/8/7/d/52ddb2dcce395fed638b4567.png) from Sparkfun is [CC BY-NC-SA 3.0](http://creativecommons.org/licenses/by-nc-sa/3.0/)</em></p>

Remember that the master initiates all communication. When it is ready, the first thing it will do is pull the CS/SS pin low to let the slave device know that a data transmission is about to begin.
The master holds this pin low for the duration of the data exchange as seen in the diagram above.

With the CS/SS pin low, the master will start to toggle the clock pin (SCK) while simultaneously controlling the MOSI to represent the bits of information it wishes to send to the slave.
The numbers in green on the diagram above delineate each bit in the byte being transferred.

It sounds complicated, but remember that the Tessel takes care of all of this pin manipulation for you. All you have to do is write some Javascript like this code snippet, which demonstrates the use of the SPI protocol on port A.

<pre>
var portA = tessel.port['A'];
var spi = new portA.SPI({
  clockSpeed: 4000000 // 4MHz
});

spi.transfer(new Buffer([0xde, 0xad, 0xbe, 0xef]), function (err, rx) {
  console.log('buffer returned by SPI slave:', rx);
});
</pre>

[More SPI example code and information][spi_code_example]

####Tessel Modules That Use The SPI Protocol
[Ambient][ambient_index], [Audio][audio_index], [Camera][camera_index], [Micro SD][sd_index], [nRF24][nrf_index], and [Infrared][ir_index]

<a name="i2c"></a>
###I2C
**Pros:** Only requires 2 pins, multiple devices on a single bus, allows two-way communication

**Cons:** Devices can have address conflicts, not as fast as SPI

I2C stands for [Inter-Integrated Circuit][i2c_wikipedia] and is pronounced "I squared C", "I two C" or "I-I-C". I2C is a protocol that allows one device to exchange data with one or more connected devices through the use of a single data line and clock signal.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/communication-protocols/i2c_blowout.jpg" /></h1>

<p style="text-align:center"><em>I2C pins SCL and SDA on Port B of the Tessel</em></p>

I2C is a Master/Slave protocol, which means that there is always a single master device which controls the flow of communication with one or more slave devices.

I2C only requires two communication connections:

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/communication-protocols/Simple_I2C.png" /></h1>


####SCL
This is the clock signal that keeps the Tessel and the module synchronized while transferring data. The two devices need to have a mutual understanding of how fast data is to be transferred between them. This is sometimes referred to as the baud or bitrate. The clock signal provides that reference signal for the devices to use when exchanging data. Without a clock signal to synchronize the devices, they would have no way to interpret the signal on the data lines.

####SDA
This is the data line used for exchanging data between the master and slaves. Instead of having separate communication lines for the master and slave devices, they both share a single data connection. The master coordinates the usage of that connection so that only one device is "talking" at a time.

Since multiple slave devices can use the same SDA line, the master needs a way to distinguish between them and talk to a single device at a time. The I2C protocol uses the concept of **device addressing** to coordinate traffic on the data line.

Every single I2C device connected to the Tessel will have an internal address that cannot be the same as any other module connected to the Tessel. This address is usually determined by the device manufacturer and listed in the datasheet. Sometimes you can configure the address through device-specific tweaks defined by the manufacturer. The Tessel, as the master device, needs to know the address of each slave and will use it to notify a device when it wants to communicate with it before transferring data.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/communication-protocols/Multi_I2C.png" /></h1>

<p style="text-align:center"><em>Flow of data between Tessel and multiple I2C devices.</em></p>

The following diagram illustrates how the SDA and SCL pins are toggled when transferring data with the I2C protocol.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/communication-protocols/i2c_modified_timing.png" /></h1>

To begin a data transaction, the master creates what is called a start condition by pulling the SDA pin low before the SCL pin.

The master then broadcasts the address of the device it wishes to communicate with by sending each bit of the 7 bit address. Notice the clock signal (SCL) is toggled for each bit. This toggling is how the slaves know when to read each bit of the address so they can determine with which device the master wants to communicate.

Right after the address, the master sends a read/write bit which signals whether it will be sending data to the slave or reading data from the slave.

After broadcasting the address, the master either transmits data to the slave or sends the address of a register (internal storage) on the slave from which it wishes to retrieve data.

Finally, the master will issue a stop condition on the bus by pulling SCL high, followed by SDA.

It's a little complicated, but the Tessel takes care of all the details for you. Using the I2C pins on port A looks like this:

<pre>
var tessel = require('tessel'); // import tessel
var portA = tessel.port['A']; // use Port A
var slaveAddress = 0xDE; // This is the address of the attached module/sensor
var i2c = new portA.I2C(slaveAddress)

i2c.send(new Buffer([0xde, 0xad, 0xbe, 0xef]), function (err) {
  console.log("I'm done sending the data");
  // Can also use err for error handling
})
</pre>

[More I2C example code and information][i2c_code_example]

####Tessel Modules That Use The I2C Protocol
[Accelerometer][accel_index], [Climate][climate_index], [RFID][rfid_index], and [Servo][servo_index]

<a name="uart"></a>
###UART
**Pros:** Widely supported, allows two-way communication

**Cons:** Can't share communication lines, slower than SPI and I2C

UART stands for [Universal Asynchronous Receiver/Transmitter][uart_wikipedia] and is really just a fancy way of referring to a serial port. It is really easy to understand as it only requires two lines: a transmission line (**TX**) and a receiving line (**RX**). The Tessel sends data to connected modules on the TX line and gets data back on the RX line.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/communication-protocols/uart_blowout.jpg" /></h1>

<p style="text-align:center"><em>UART pins TX and RX on Port B of the Tessel</em></p>

###TX
Used by the Tessel to send data to the module.

###RX
Used by the module to send data to the Tessel.

When using a UART, it's important to remember that the communication lines cannot be shared between modules. In fact, because of this, each Tessel port needs its own RX and TX line from the main Tessel chip (LPC1830) as seen below.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/communication-protocols/UART_Connections.jpg" /></h1>

<p style="text-align:center;"><em>Only ports A, B, and D have dedicated UART lines from the LPC1830.</em></p>

Since the LPC1830 doesn't have 4 UARTs, only Ports A, B, and D have a hardware UART. A software UART can be implemented on Port C but is beyond the scope of this guide. If you need to use a UART for communication we recommend using Port A, B or D.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/communication-protocols/uart_example.jpg" /></h1>

<p style="text-align:center;"><em>A UART data transmission.</em></p>

UART transmissions begin with a start bit where the appropriate line (TX or RX) is pulled low by the sending party. Then 5 to 8 data bits are sent. The diagram above shows a scenario where 8 bits are sent.

Following the data, an optional [parity bit](http://en.wikipedia.org/wiki/Parity_bit) is sent, followed by 1 or 2 stop bits, where the sending module pulls the pin high.

For this protocol to work, the sender and receiver have to agree on a few things.

  1. How many data bits are sent with each packet (5 to 8)?
  2. How fast should the data be sent? This is know as the baud rate.
  3. Is there a parity bit after the data, and is it high or low?
  4. How many stop bits will be sent at the end of each transmission?

When you want to interact with a specific module via UART, the answers to these questions are found in the module's datasheet. Using that information you can configure the UART in Javascript like this:

<pre>
var port = tessel.port['A'];
var uart = new port.UART({
  dataBits: 8,
  baudrate: 115200,
  parity: "none",
  stopBits: 1
});

uart.write('Hello UART');
</pre>

[More example code using a UART][uart_code_example]

####Tessel Modules That Use a UART
[BLE][ble_index], [Camera][camera_index], [GPS][gps_index], and [GPRS][gprs_index]




[led_example]: http://start.tessel.io/blinky
[relay_module]: https://tessel.io/modules#module-relay
[sd_module]: https://tessel.io/modules#module-sdcard
[climate_module]: https://tessel.io/modules#module-climate
[ambient_module]: https://tessel.io/modules#module-ambient
[accel_module]: https://tessel.io/modules#module-accelerometer
[ble_module]: https://tessel.io/modules#module-ble
[gps_module]: https://tessel.io/modules#module-gps
[spi_wikipedia]: http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus
[i2c_wikipedia]: http://en.wikipedia.org/wiki/I%C2%B2C
[uart_wikipedia]: http://en.wikipedia.org/wiki/Universal_asynchronous_receiver/transmitter
[level_shifting]: https://learn.sparkfun.com/tutorials/voltage-dividers
[spi_code_example]: https://tessel.io/docs/hardwareAPI#spi
[gpio_code_example]: https://tessel.io/docs/hardwareAPI#pins
[i2c_code_example]: https://tessel.io/docs/hardwareAPI#i2c
[uart_code_example]: https://tessel.io/docs/hardwareAPI#uart
[pir_project]: https://projects.tessel.io/projects/pir
[button_post]: https://projects.tessel.io/projects/a-button-on-tessel
[ambient_index]: https://github.com/tessel/ambient-attx4
[audio_index]: https://github.com/tessel/audio-vs1053b
[camera_index]: https://github.com/tessel/camera-vc0706
[sd_index]: https://github.com/tessel/sdcard
[nrf_index]: https://github.com/tessel/rf-nrf24
[accel_index]: https://github.com/tessel/accel-mma84
[climate_index]: https://github.com/tessel/climate-si7005
[rfid_index]: https://github.com/tessel/rfid-pn532
[servo_index]: https://github.com/tessel/servo-pca9685
[ble_index]: https://github.com/tessel/ble-ble113a
[gps_index]: https://github.com/tessel/gps-a2235h
[gprs_index]: https://github.com/tessel/gprs-sim900
[ir_index]: https://github.com/tessel/ir-attx4

*This post is also on our [docs page](//tessel.io/docs/communicationProtocols), where it will be kept up to date.*]]></content:encoded>
    <wp:post_name>108840925797</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/108750595487</link>
    <pubDate>Wed, 21 Jan 2015 13:34:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[modules]]></category>
		<category domain="tag" nicename="modules"><![CDATA[modules]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[kevin sidwar]]></category>
		<category domain="tag" nicename="kevin-sidwar"><![CDATA[kevin sidwar]]></category>
		<category domain="tag"><![CDATA[diy]]></category>
		<category domain="tag" nicename="diy"><![CDATA[diy]]></category>
		<category domain="tag"><![CDATA[diy module]]></category>
		<category domain="tag" nicename="diy-module"><![CDATA[diy module]]></category>
		<category domain="tag"><![CDATA[new module]]></category>
		<category domain="tag" nicename="new-module"><![CDATA[new module]]></category>
		<category domain="tag"><![CDATA[prototyping]]></category>
		<category domain="tag" nicename="prototyping"><![CDATA[prototyping]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/108750595487</guid>
    <!--<wp:post_id>108750595487</wp:post_id>-->
    <wp:post_date>2015-01-21 10:34:00</wp:post_date>
    <wp:post_date_gmt>2015-01-21 18:34:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Creating Your Own Tessel Module</title>
    <description></description>
    <content:encoded><![CDATA[#####1/21/2015– [Kevin Sidwar](http://blog.technical.io/search/kevin+sidwar)

*This post is also on our [docs page](//tessel.io/docs/DIYModule), where it will be kept up to date.*

### What Is a Module?

>Modules should be devices with clear-cut functionality. That is to say, they should have a single, well-defined purpose or a set of closely related functions, rather than an eclectic mix of capabilities onboard. This requirement is designed to reduce complexity, cost, and power consumption and maximize reusability in hardware and software.

>*[–Tessel hardware docs](https://tessel.io/docs/hardware#module-design-philosophy)*

One of the main goals of the Tessel platform is "connected hardware as easy as npm install." 
If you need an accelerometer, Bluetooth Low Energy connection, SIM card capability, or any of the other [14 first-party modules available][modules_page], you can literally plug, npm install, and play.

There is also a growing library of community-contributed [third-party modules][third_party_modules]: npm libraries paired with some simple wiring instructions, built for specific pieces of hardware.

But what if your project needs functionality that can't be provided by one of the existing first- or third-party modules? You make your own, of course.

This guide will walk you through the basics of creating your own Tessel module using our new [DIY Modules](https://shop.tessel.io/Modules/DIY%20Module%20Kit).

#### A Quick Note of Encouragement

Making your own module might seem like an overwhelming task best left to those who know things like Ohm's Law, how to solder, and why licking a 9V doesn't feel very good. But while having some electronics knowledge doesn't hurt, it's not a hard and fast prerequisite. If you know how to program, you are smart enough to figure out the basic concepts and make awesome things happen. Just trust us and read on.

### Module Design Basics

Before you venture into the world of custom module creation, we need to cover some basics that will help guide you along the way.

Every module created for the Tessel involves 5 parts:

  1. Power
  2. Communication
  3. Software
  4. Documentation
  5. Sharing

If you understand how each of these fit into the module creation process, you will be well on your way to creating your own custom module. Let's start with power.

### Power
When dealing with anything in electronics, whether it be sensors, displays, buttons, or servos, you have to provide power. Everything needs a power source, and Tessel modules are no exception. In its simplest form, you can think of a power source as two connections; a positive voltage and a ground connection. These connections are provided on each Tessel port as seen in the image below.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/diy-module-guide/power_zoomed.jpg" /></h1>

<p style="text-align:center;"><em>Power connections on Tessel's Port B</em></p>

The main Tessel board [can be powered several ways][power_options], but regardless of how you provide power to the main board it ultimately turns that source into 3.3V. That's the native "voltage language" of the Tessel. It likes to speak 3.3V to everything if possible.

One of the nice things about the proto-module is that the 3.3V and ground connections are exposed as two rails that run along each side of the module as seen below. This allows you to easily power your module components.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/diy-module-guide/diymod_power.jpg" /></h1>

<p style="text-align:center;"><em>Proto-module power rails</em></p>

#### Special Considerations
If all of the components on your custom module operate at 3.3V, then your power design is extremely simple. You just use the 3.3V and ground rails and connect your components accordingly (the [custom screen module](#screen_example) below is a good example). Sometimes, however, you may encounter a situation where 3.3V is not what you need, like in the case of the [servo module][servo_module].

Many servos like to operate at 5V. That's their native "voltage language" and so the 3.3V provided by the Tessel isn't ideal and, in many cases, just won't work. Servos can also draw a lot of current, which may overwhelm the Tessel's power supply. To solve this problem, you'll notice that the servo module has a DC barrel jack on it that allows you to plug in a 5V adapter to provide sufficient power to the connected servos.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/diy-module-guide/servo_jack_identified.jpg" /></h1>

<p style="text-align:center;"><em>DC Barrel Jack on the Servo Module</em></p>

From the [servo module schematic][servo_schematic], we can see that communication is accomplished with the normal I2C lines, which operate at 3.3V, but servo power is provided via schematic component J2, which is the barrel jack.

This guide isn't meant to be a comprehensive power reference, but we just want to point out that if you have any components on your custom module that work outside of the 3.3V realm, you will [need to design for it][level_shifting]. To simplify your module design, we recommend using 3.3V components where possible.

#### The Power Warnings
Here are some items to remember when working with power in electronics.

  * **ALWAYS** unplug your Tessel and any external power before making or altering connections.
  * Don't mix voltages unless you know what you're doing. For example, if you put 5V on any of the module pins, you can ruin your Tessel.
  * Never connect the positive voltage directly to ground. This is called a [short circuit](http://en.wikipedia.org/wiki/Short_circuit) and can ruin components and your day.
  * Always exercise caution and verify that you have hooked everything up correctly before plugging in your Tessel.

### Communication

Once you have decided how you are going to power your custom module, it's time to decide how the main Tessel board will talk to it.

In the world of web communication, there are standards like HTTP, HTTPS, and FTP that allow different systems to talk to each other in well-defined ways. The same concept exists in the hardware world and the Tessel supports four standard communication protocols for talking to modules.

  * [GPIO][comm_gpio]
  * [SPI][comm_spi]
  * [I2C][comm_i2c]
  * [UART][comm_uart]

Because the Tessel [does most of the heavy lifting][hardware_api] for all of these, you don't need to be an expert to use them in your custom module. However, if you'd like to learn a little more, we've [provided a simple overview of each][comm_protocols].

#### So Which Communication Protocol Should I Use?
Knowing that there are four communication options available to you, which should you use for your custom module? The good news is that this will usually be decided for you based on the type of module you are creating. For example, most [PIR sensor modules][pir_project] will set a pin high when motion is detected, which can be read with a simple digital input (GPIO). The same applies to sensors. For example, the Si7005 temperature and humidity sensor on the [Climate Module][climate_module] communicates via the [I2C protocol][comm_i2c]. Usually sensors will only support one protocol– so the decision is easy, you use that one.

You will find some modules that support both SPI and I2C, and either will work just fine with the Tessel. As a general rule of thumb, we recommend you favor the SPI protocol in these scenarios as it eliminates the risk of I2C address collisions with other connected I2C modules.

### Software

Once you have the power and communication all worked out and connected, it's time to start writing JavaScript to talk to your module. This is where the open-source nature of the Tessel really comes in handy. We've already used all of the possible communication protocols in [our modules][modules_page] and the [code is free to look at][tessel_github] and copy.

Design an API for working with your module so that it's easy for others to integrate into their projects. As a general rule, top priority is intuitive interaction. Second priority is exposing as many features as you can. You can find a lot of great information about organizing your project and writing an API in [Making a Tessel-style Library for Third-Party Hardware][third_party_doc].

### Documentation and Sharing

Once you have a working module, it's time to share the good news with everyone so other people can build amazing things with your work. We recommend doing a few things to share it with the community as outlined below. This helps create a consistent feel across all Tessel modules, whether they are official modules or submitted by the community.

#### Create A Git Repo
Having your code in a git repo and available online makes it easy for others to grab your code and start using it in their projects. To help you get started we've created a template repository that you can use as a starting point.

[Custom Module Git Repo Template][repo_template]

#### Document It
You may have just created the world's most amazing Tessel module, but how is anybody going to know about it or use it? Once you've hashed out the API and everything is working, it's important to document its use so others can easily apply your work to their projects. The best way to do this is to use the [README template][readme_template], which includes things like how to install the module, example usage, and API information.

#### Publish Your Code on NPM
Once your git repo is ready and you've documented your module, this step is really easy and makes your module fit the Tessel motto of "connected hardware as easy as npm install." If you've never published code to NPM before, you can get started with just four lines of code (run in a shell window).

    npm set init.author.name "Your Name"
    npm set init.author.email "you@example.com"
    npm set init.author.url "http://yourblog.com"

    npm adduser

This sets up your NPM author info. Now you're ready to create your package.json file. There is one in the repo template but we suggest creating it by running npm init from within the project directory.

```
npm init
```

Edit your package.json file to include a name, version, and description. We also highly recommend adding "tessel" as a keyword so that other Tessel users can easily find your work. Most of the package.json file is self-explanatory and follows the [npm package.json standard][package_json_standard] with the exception of the **hardware** member.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/diy-module-guide/package_hardware_section.png" /></h1>

<p style="text-align:center;"><em>**hardware** section of package.json</em></p>

This is a Tessel-specific item that you must add manually and is a list of files and folders in your project that you would like to exclude when code is pushed to your Tessel.

Once your package.json file is complete you're ready to publish your code. Run the following command from the top level directory of your project.

```
    npm publish ./
```

#### Create a Project Page
The [Tessel Projects page][tessel_projects] is a way to share your module directly with the Tessel community. You simply provide a few pieces of information, a picture, and can even use your README.md file from your Git repo as the contents.

#### Submit Your Module
We're always looking to add modules to our [third-party module list][third_party_modules] so if you'd like your custom module to be listed at [tessel.io/modules][modules_page] then fill out this form and we'd be happy to review it.

[Third-Party Module Submission Form][module_submission]

A great example of using this module-creation pattern can be found in [Making a Tessel-style Library for Third-Party Hardware][third_party_doc].

## Your First Custom Module
So now that we've described the pattern for making a custom module, let's walk through creating a very simple module using that pattern. The Tessel has a spare button on the main board, but maybe you'd like to add one as a module. Kelsey did [a great writeup on adding a button to the GPIO bank][orig_button_project_page] so let's use her work to take it one step further using a proto-module.

#### Power
You might not think of a button as needing power, and you're right, sort of. While the button itself doesn't need power to function, we can connect our button in such a way that it uses the power connections to create high and low states on a GPIO pin.

GPIO pins on the Tessel will always read high/truthy with nothing connected, because internally (inside the main Tessel chip), they are pulled up to the 3.3V supply. That's our positive connection.

The other power connection is ground, which we'll connect to one side of our button. It doesn't matter which side, because a button is just a momentary switch that creates and breaks a connection. You can't hook it up backward. We'll get to connecting the other side of the button in a minute.

#### Communication
As mentioned above, normally your communication protocol is determined by your module. In the case of a button, we use a GPIO pin because we want to read the state of the button.

Each port on the Tessel has 3 pins that can serve this purpose, and you are free to pick any one you like because it doesn't matter.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/communication-protocols/gpio_blowout.jpg" /></h1>

<p style="text-align:center"><em>GPIO pins available on a Tessel module port: G1, G2, and G3</em></p>

We're going to choose G1, which is what we will hook up to the other side of the button. When the button is not pressed, our input pin will read high, or true. When we press it, we are making a connection between our GPIO pin and ground, which will cause a low state to be present on the input pin. This is what the design looks like.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/diy-module-guide/switch_schematic.png" /></h1>

<p style="text-align:center"><em>Schematic of button connections</em></p>

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/diy-module-guide/button_module_angle.jpg" width=300 /></h1>

<p style="text-align:center"><em>Soldered together on a proto-module board.</em></p>

Don't let the soldering part scare you. Soldering components like this onto a proto-module is a little harder than learning to use a hot glue gun, but not a lot harder. 
[This tutorial from Sparkfun](https://learn.sparkfun.com/tutorials/how-to-solder---through-hole-soldering) is a great place to start learning soldering.

Let's go ahead and plug our module into Port A. **Remember to never make connections while your Tessel is powered up. Always unplug it first.**

#### Software
With everything hooked up, it's time to write some Javascript.

Actually, we're going to reuse the code from Kelsey and modify it just a bit. Since she followed the style guidelines and shared her work on NPM, we actually don't have to write the bulk of the code. She's even provided a [Quick Start guide](https://github.com/Frijol/tessel-button#quick-start-i-just-want-a-button) in her documentation, so we'll use that.

  1. Install the tessel-gpio-button package. This will allow us to reuse Kelsey's work.

    ```npm install tessel-gpio-button```

  2. Create a file named **myButton.js** and copy her Quick Start code into it. It should look like this:
<pre>
    // examples/button.js
    // Count button presses

    var tessel = require('tessel');
    var buttonLib = require('../');
    var myButton = buttonLib.use(tessel.port['GPIO'].pin['G3']);

    var i = 0;

    myButton.on('ready', function () {
      myButton.on('press', function () {
        i++;
        console.log('Press', i);
      });

      myButton.on('release', function () {
        i++;
        console.log('Release', i);
      });
    });
</pre>


This almost works right out of the box. We just need to make two small adjustments. Do you see them?

First, to include her module we won't use "require('../')." Instead we'll include the module directly with require('tessel-gpio-button').

Second, she hooked her button up to the G3 pin on the GPIO bank, but we've hooked our proto-module up to Port A and used the G1 pin. So all we have to change is the line where _myButton_ is defined. We'll change it to be:

<pre>
var myButton = buttonLib.use(tessel.port['A'].pin['G1']);
</pre>

Save your changes and test it out.

```
tessel run myButton.js
```

Every time you push your button it should log to the console.

Congratulations! You just created your first custom module for the Tessel.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/diy-module-guide/button_attached.jpg" /></h1>

<p style="text-align:center"><em>Custom button module connected to the Tessel</em></p>

#### Documentation and Sharing
We sort of cheated for our first module; Kelsey had already created an NPM package that we could reuse, so there wasn't really anything to document or share on the software side. There is nothing wrong with that. In fact, the less code you have to write, the better. This is a great example of how taking the time to document and share your work benefits the entire community.

What we can do though is create [a project page][button_project_page] showing how we took Kelsey's button to the next level in the form of a plug-in module. We created the physical module. It's a simple module, but we should document it in case someone else wants a button module like ours.

[Custom Button Module Project Page][button_project_page]

<a name="screen_example"></a>
### Custom Screen Module
Now that you have a simple module under your belt, it's time to level up. To date, the module that people have requested the most is a screen module. Displays are tricky because they come in so many flavors. There are simple 7-segment displays, LCD displays, OLEDs, resistive touchscreens, capacitive touchscreens, and more. This is a great use case for a custom module.

One of the popular screen modules in embedded projects is the Nokia 5110, because of its simple interface and low cost. Let's see how we'd create a module for it by following the same pattern as before.

For this example we'll use the [Nokia 5110 breakout from Sparkfun][nokia_sparkfun], but you could also use the [Adafruit version of the screen][nokia_adafruit] or just try to snag one [on Ebay][nokia_ebay]

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/diy-module-guide/nokia5110.png" /></h1>

<p style="text-align:center"><em>Nokia 5110 Graphic LCD</em></p>

#### Power
The 5110 has a listed power supply range of 2.7V to 3.3V, which means any voltage in between (inclusive) is sufficient to power the screen. Since the Tessel ports have a 3.3V supply pin we don't have to do anything special to hook it up. All we need to do is connect the screen VCC, or positive pin, to a 3.3V rail on the proto-module and the GND on the screen to a GND rail.

Because of the screen's size, we'll use one of the double-wide proto-modules this time, even though we'll only use a single port to connect everything.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/diy-module-guide/doublewide_module.jpg" /></h1>

<p style="text-align:center"><em>Double-Wide Proto-Module</em></p>

#### Communication
Just like in the button example, the communication protocol for the screen has already been chosen for us. The Nokia 5110 uses a slightly modified version of [SPI][comm_spi] to communicate with a parent controller, namely the Tessel in our case.

In addition to the normal SPI protocol, the 5110 has an extra pin involved (**D/C**) that tells the screen whether the data we are sending via SPI is a special command or actual screen data.

The D/C pin is controlled by a simple high or low signal, which is a perfect job for one of the GPIO pins.

The following table shows all of the communication connections available on our screen and how we'll attach them to the Tessel port.

| Nokia 5110 Pin | Proto-Module Connetion                   |
|----------------|------------------------------------------|
| SCE            | G1                                       |
| RST            | Connected to 3.3V through 10K resistor   |
| D/C            | G2                                       |
| MOSI           | MOSI                                     |
| SCLK           | SCK                                      |
| LED            | Connected to G3 through 330 ohm resistor |

##### Design Note
The Nokia 5110 has 4 connections that can utilize GPIO pins for functionality. The D/C (data/command) and SCE (chip select) pins have to be used to get data to the screen. That leaves just one GPIO pin on the port with RST and LED left unconnected. You have a few options here.

  1. Wire RST to 3.3V through a 10K resistor which prevents you from resetting the screen in code. This allows you to control the backlight with the free GPIO pin.
  2. Wire LED to 3.3V through a 330 ohm resistor (to limit current) which will permanently turn on the backlight. This leaves a GPIO free that can be used to reset the screen via Javascript.
  3. Since we're using the double-wide, you could use a GPIO pin from the adjacent port and have use of both LED and RST
  4. Connect SCE (chip select) to ground, which frees up a GPIO so you can control both LED and RST. Holding the chip select low, however, makes it so that **no other SPI device** (including other Tessel modules that use SPI e.g., the Camera module) can be connected to the Tessel on any other port.

We decided to go with option 1 because there isn't really a need to reset the screen in most cases and it allows control of the backlight with a GPIO pin. This is another great thing about custom modules. You can design it however you want to fit your project needs.

We hooked everything up using the [Graphic LCD Hookup Guide][screen_hookup_guide]. We recommend testing everything with a [breadboard](https://learn.sparkfun.com/tutorials/how-to-use-a-breadboard) before you solder everything in place, just to make sure it works the way you expect it to.

Here is what the module looks like soldered to the double-wide proto-module.

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/diy-module-guide/screen_soldered.jpg" /></h1>

<p style="text-align:center"><em>Nokia 5110 soldered to a large proto-module board</em></p>

#### Software
With the screen hooked up, it's time to start writing code. We'll follow the pattern found in the [Git Repo Template][repo_template] and start by creating a directory called **tessel-nokia5110** and cd into that directory. Next, we'll create **index.js** which is where we'll write our API using [the example index.js template][index_template] as a guide.

Because this screen is so popular, there are lots of code examples and libraries online for interacting with it. We don't need to reinvent the wheel; we just want to control the screen with JavaScript.

We took a [simple Arduino library][screen_arduino_code] for this screen and [ported it to JavaScript][screen_github].
Our API is very simple and exposes just one event and a few methods.

#####Event
Nokia5110.**on**('ready', callback(err, screen)) - Emitted when the screen object is first initialized

#####Methods
Nokia5110.**gotoXY**(x,y,[callback(err)]) - Sets the active cursor location to (x,y)

Nokia5110.**character**(char, [callback(err)]) - Writes a single character to the display

Nokia5110.**string**(data, [callback(err)]) - Writes a string to the display

Nokia5110.**bitmap**(bitmapData, [callback(err)]) - Draws a monochrome bitmap from _bitmapData_

Nokia5110.**clear**([callback(err)]) - Clears the display

Nokia5110.**setBacklight**(state) - Turns the backlight on if _state_ is truthy, off otherwise

#### Documentation
Now that the module is connected up and the software is working, it's time to document its use.

We can't stress enough how important this is, and it really only takes a few minutes once you've defined everything. Just think of all the times you've needed a piece of code and found a beautifully documented example that had you up and running in minutes. Share that love with others when you create your own modules, no matter how trivial you think they are.

In our case, we'll take the [template README.md file][readme_template] and [add some notes for getting started as well as document our API][screen_github].

We'll also create an **examples** folder to show how the module can be used.

#### Sharing
Now it's time to share our new creation with the world by:

  * Creating a [git repo and pushing the code online][screen_github]
  * [Publishing the module to NPM][screen_npm]
  * Creating a [project page][screen_project_page] for it
  * [Submitting][module_submission] it to the [third-party module list][third_party_modules]

<h1 style="text-align:center;"><img src="https://s3.amazonaws.com/technicalmachine-assets/tutorials/diy-module-guide/screen_connected.jpg" /></h1>

<p style="text-align:center"><em>Finished screen module</em></p>

#### Resource List
To help you get started creating your own custom modules, here is a list of the resources we used to put this tutorial together.

##### Power
  * [Powering Your Tessel][power_options]
  * [Level Shifting][level_shifting]

##### Communication
  * [Tessel Module Communication Protocols][comm_protocols]

##### Software
  * [Making a Tessel-style Library for Third-Party Hardware][third_party_doc]
  * [Tessel Hardware API][hardware_api]
  * [All first-party module code on Github][tessel_github]

##### Documentation
  * [Git Repo Template][repo_template]
  * [README.md Template][readme_template]

##### Sharing
  * [Publishing to NPM Tutorial][npm_tutorial]
  * [package.json Standard][package_json_standard]
  * [Tessel Project Page][tessel_projects]
  * [Third-Party Module Submission Form][module_submission]

[modules_page]: https://tessel.io/modules
[third_party_modules]: https://tessel.io/modules#third-party
[tessel_github]: https://github.com/tessel
[repo_template]: https://github.com/tessel/style/tree/master/Templates
[index_template]: https://github.com/tessel/style/blob/master/Templates/index.js
[package_json_standard]: https://www.npmjs.org/doc/files/package.json.html
[npm_tutorial]: https://gist.github.com/coolaj86/1318304
[readme_template]: https://github.com/tessel/style/blob/master/module_RM_template.md
[hardware_api]: https://tessel.io/docs/hardwareAPI
[tessel_projects]: https://projects.tessel.io/projects
[module_submission]: https://docs.google.com/forms/d/1Zod-EjAIilRrCJX0Nt6k6TrFO-oREeBWMdBmNMw9Zxc/viewform
[level_shifting]: https://learn.sparkfun.com/tutorials/voltage-dividers
[power_options]: https://tessel.io/docs/power
[servo_module]: https://tessel.io/modules#module-servo
[servo_schematic]: http://design-files.tessel.io.s3.amazonaws.com/2014.06.06/Modules/Servo/TM-03-03.pdf
[climate_module]: https://tessel.io/modules#module-climate
[pir_project]: https://projects.tessel.io/projects/pir
[button_project_page]: https://projects.tessel.io/projects/button-proto-module/
[orig_button_project_page]: https://projects.tessel.io/projects/a-button-on-tessel
[comm_protocols]: https://github.com/tessel/docs/blob/DIY-module/tutorials/communication-protocols.md
[comm_gpio]: https://github.com/tessel/docs/blob/DIY-module/tutorials/communication-protocols.md#gpio
[comm_spi]: https://github.com/tessel/docs/blob/DIY-module/tutorials/communication-protocols.md#spi
[comm_i2c]: https://github.com/tessel/docs/blob/DIY-module/tutorials/communication-protocols.md#i2c
[comm_uart]: https://github.com/tessel/docs/blob/DIY-module/tutorials/communication-protocols.md#uart
[third_party_doc]: https://github.com/tessel/docs/blob/master/tutorials/make-external-hardware-library.md
[nokia_sparkfun]: https://www.sparkfun.com/products/10168
[nokia_adafruit]: https://www.adafruit.com/products/338
[nokia_ebay]: http://www.ebay.com/sch/i.html?_from=R40&_trksid=p2050601.m570.l1313.TR6.TRC1.A0.H0.Xnokia+5110&_nkw=nokia+5110&_sacat=0)
[screen_arduino_code]: http://dlnmh9ip6v2uc.cloudfront.net/datasheets/LCD/Monochrome/Nokia_5110_Example.pde
[screen_github]: https://github.com/sidwarkd/tessel-nokia5110
[screen_npm]: https://www.npmjs.org/package/tessel-nokia5110
[screen_hookup_guide]: https://learn.sparkfun.com/tutorials/graphic-lcd-hookup-guide
[screen_project_page]: https://projects.tessel.io/projects/nokia-5110-graphic-lcd-proto-module

*This post is also on our [docs page](//tessel.io/docs/DIYModule), where it will be kept up to date.*]]></content:encoded>
    <wp:post_name>108750595487</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/108663838022</link>
    <pubDate>Tue, 20 Jan 2015 14:40:31 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[diy]]></category>
		<category domain="tag" nicename="diy"><![CDATA[diy]]></category>
		<category domain="tag"><![CDATA[module]]></category>
		<category domain="tag" nicename="module"><![CDATA[module]]></category>
		<category domain="tag"><![CDATA[new module]]></category>
		<category domain="tag" nicename="new-module"><![CDATA[new module]]></category>
		<category domain="tag"><![CDATA[diy module]]></category>
		<category domain="tag" nicename="diy-module"><![CDATA[diy module]]></category>
		<category domain="tag"><![CDATA[proto-module]]></category>
		<category domain="tag" nicename="proto-module"><![CDATA[proto-module]]></category>
		<category domain="tag"><![CDATA[community]]></category>
		<category domain="tag" nicename="community"><![CDATA[community]]></category>
		<category domain="tag"><![CDATA[community contributed]]></category>
		<category domain="tag" nicename="community-contributed"><![CDATA[community contributed]]></category>
		<category domain="tag"><![CDATA[open source]]></category>
		<category domain="tag" nicename="open-source"><![CDATA[open source]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/108663838022</guid>
    <!--<wp:post_id>108663838022</wp:post_id>-->
    <wp:post_date>2015-01-20 11:40:31</wp:post_date>
    <wp:post_date_gmt>2015-01-20 19:40:31</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Community-Contributed and DIY Modules</title>
    <description></description>
    <content:encoded><![CDATA[#####1/20/2015– [Updates](http://blog.technical.io/search/update)

We have a couple of small announcements for you:

We now have international resellers in Japan, China, Australia, and the UK/EU. Check them out [here](https://tessel.io/resellers)!

We’re also announcing a new module in our store: the [DIY Module](http://tessel.io/modules#module-diy). It comes in [single-wide](https://shop.tessel.io/Modules/DIY%20Module%3A%20Single-Wide), [double-wide](https://shop.tessel.io/Modules/DIY%20Module%3A%20Double-Wide), and a [kit](https://shop.tessel.io/Modules/DIY%20Module%20Kit) including both sizes and a few electronic components.

**Community-contributed modules**

Complementing the fourteen plug-and-play first-party modules we built, there are currently nine [third-party modules](https://tessel.io/modules#third-party) on our site. These are community-contributed projects, whereby someone publishes an npm abstraction for a piece of hardware and shows how to hook it up. Here are a few examples:

![](https://31.media.tumblr.com/e814acb12b2da7a9a4faa6c20b978856/tumblr_inline_nifyfvxOij1s75tgz.png)

[OLED Display](https://tessel.io/modules#oled-display)

![](https://31.media.tumblr.com/e1f322d364f883cfbbdd6fd84cdf9c60/tumblr_inline_nifygftBxE1s75tgz.png)

[Proximity Sensor](https://tessel.io/modules#proximity)

![](https://31.media.tumblr.com/a7252bcb5f996046610ed1650912510e/tumblr_inline_nifygxEuE11s75tgz.png)

[Matrix Keypad](https://tessel.io/modules#keypad)

These aren’t *quite* as plug-and-play as first-party modules, but they’re well-documented, nicely abstracted into npm libraries, and often pretty cheap. Definitely [check them out](https://tessel.io/modules#third-party).

(If you’ve made an npm module for using new hardware on Tessel, please [submit your module](https://docs.google.com/forms/d/1Zod-EjAIilRrCJX0Nt6k6TrFO-oREeBWMdBmNMw9Zxc/viewform) to be listed as well!)

**DIY Modules**

We’re also announcing a new module in our store: the [DIY Module](http://tessel.io/modules#module-diy). It comes in [Single-wide DIY Module](https://shop.tessel.io/Modules/DIY%20Module%3A%20Single-Wide), [Double-wide DIY Module](https://shop.tessel.io/Modules/DIY%20Module%3A%20Double-Wide), and a [the DIY Module Kit](https://shop.tessel.io/Modules/DIY%20Module%20Kit). including both sizes and a few electronic components.

Now, for those of you who want to take this a bit further, we’ve just added [the Single-wide DIY Module](https://shop.tessel.io/Modules/DIY%20Module%3A%20Single-Wide), [the Double-wide DIY Module](https://shop.tessel.io/Modules/DIY%20Module%3A%20Double-Wide), and [the DIY Module Kit](https://shop.tessel.io/Modules/DIY%20Module%20Kit) to our store. It has (unsoldered) 10-pin headers, labeled pins, and power and ground rails, and comes in regular-sized, double-wide (in case you’re making something big, like our RFID module), and a pack of both with some capacitors and buttons.

![](https://31.media.tumblr.com/692e05a2f8674cece39c233488555bdd/tumblr_inline_nifyo9n5t71s75tgz.png)

(Above: DIY module original prototypes. Below: DIY Module Kit in store)

![](https://31.media.tumblr.com/64b3fe5f5e2e802b6be5b9831ef65bef/tumblr_inline_nifyok3fTl1s75tgz.png)

If you’d like to get a bit more hands-on with electronics, we’ve written a [Beginner Guide](http://tessel.io/docs/DIYModule) for module creation and a [Companion Guide](http://tessel.io/docs/communicationProtocols) for understanding how different pieces of hardware talk to each other.

We’ve tried to assume no electrical engineering experience, so please [file issues on the guide repos](https://github.com/tessel/docs/blob/master/tutorials/diy_module_creation.md) if anything is confusing.

![](https://31.media.tumblr.com/48544d83f032192e8bedbdf47e02728f/tumblr_inline_nifyv71Lun1s75tgz.png)

[Button Module](https://projects.tessel.io/projects/button-proto-module)

![](https://31.media.tumblr.com/105941bb5e8bd1942bed54b99dfcc90a/tumblr_inline_nifyvsMBdC1s75tgz.png)

[EMIC 2 (Speech) Module](https://projects.tessel.io/projects/emic-2-module)

![](https://31.media.tumblr.com/b1c426c8387cb70919ed7e2030e39fe1/tumblr_inline_nifyw6Wp7l1s75tgz.png)

[Nokia Screen Module](https://projects.tessel.io/projects/nokia-5110-graphic-lcd-proto-module)

We hope you like it– this is a by-request module.

We also have something bigger in the works, but we’re not quite ready to talk about it yet… stay tuned!

Best,<br/>
Kelsey, Jia, Tim, Jon, Kwyn, Eric, Kevin, and Ken]]></content:encoded>
    <wp:post_name>108663838022</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/107602833137</link>
    <pubDate>Fri, 09 Jan 2015 11:07:59 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[pirumpi]]></category>
		<category domain="tag" nicename="pirumpi"><![CDATA[pirumpi]]></category>
		<category domain="tag"><![CDATA[microcontrollers]]></category>
		<category domain="tag" nicename="microcontrollers"><![CDATA[microcontrollers]]></category>
		<category domain="tag"><![CDATA[webservers]]></category>
		<category domain="tag" nicename="webservers"><![CDATA[webservers]]></category>
		<category domain="tag"><![CDATA[user interview]]></category>
		<category domain="tag" nicename="user-interview"><![CDATA[user interview]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/107602833137</guid>
    <!--<wp:post_id>107602833137</wp:post_id>-->
    <wp:post_date>2015-01-09 8:07:59</wp:post_date>
    <wp:post_date_gmt>2015-01-09 16:07:59</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>An Interview with Pirumpi: Webservers on Microcontrollers</title>
    <description></description>
    <content:encoded><![CDATA[#####1/9/2015– [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

Carlos’s face lights up as he says the names of his microcontrollers, holding them up to the screen so I can see each one: “Espruino, Netduino, EZ Robots, Tessel, of course.” Carlos Martin, or [pirumpi](https://forums.tessel.io/users/pirumpi) on the Tessel forums, is thankful that he gets to write code, and states simply that programming the physical world is what everyone wants to do.

Originally a math major in his native Venezuela, Carlos came to the United States in the early 2000s for a change of political climate. He didn’t go back to school right away, and spent some time working away from computers– but over the last several years, he’s been working his way back towards the work he loves– programming and building things.

Currently, he’s a software engineer at a network security company in Colorado, as well as a couple of other jobs and the full-time role of being a father to two daughters and one boy. But at night, when the kids are asleep, he takes a few hours to make robotics projects on every kind of microcontroller he can get his hands on.

**Kelsey:** Can you tell me a bit about your background?

**Carlos:** I’ve been working as a software engineer for  four years, at this security company. We do surveillance & video analytics for many chain companies in the US, Canada and the UK.

I’m originally from Venezuela, born and raised. Around 2000, I went to Central University of Venezuela, majoring in mathematics. Then this crazy government came in– you know, Chavez, and started messing with my family’s business and bank accounts. My mom got all freaked out, so we came to the United States around 2000, 2001.

When we first moved to the United States, I didn’t do much. I spent four or five years working at Disney World. But after about six years out of college, I decided to go to Westwood College, here in Colorado. They’ve got a great Associate’s degree, so I became a network engineer.

Because of that, I got a job working in IT, for a forensic accounting company in Denver. But my true passion was in math and coding, so I got really excited when I got to start this job.

I’m almost finished with my Bachelor’s degree in information security, through Colorado Technical University. I’ve only got three more classes left.

**Kelsey:** Why did you decide to get a Tessel?

**Carlos:** I’m kind of a microcontroller freak. I go on Kickstarter, or any other crowdsourcing site, anywhere people are trying to make microcontrollers. I really like them, I get so excited about it, and I want to have them all.

And then I saw Tessel. Of all of the microcontrollers, I like Tessel the most, because it’s so easy to use. You plug things together and it just works.

**Kelsey:** What sparked your interest in microcontrollers?

**Carlos:** I was always into it as a hobby. When I was around 12, I got my first computer. It was a Pentium 1, on Windows 3.1. My favorite thing to do was to take it apart. But I constantly burned the motherboard. My mom got really mad. So she decided I needed to learn to fix computers.

I was in middle school, and I worked through this certificate on computer repair. I learned how to take computers apart and fix them when I was pretty young. So from there, I started going into software and electronics. But I spent most of my time in middle school doing crazy math stuff.

I didn’t get into microcontrollers until I got to the United States, not until around 2005. I got so excited– programming electronics is the dream, for any software developer. You write code but you want to control things, physical things.

I like to combine electronics with web technologies. When Node.JS came out, I got so excited– JavaScript on the server side. Lots of people use it to create their own command line interfaces. You started seeing these web technologies being used for other things.

**Kelsey:** What’s the first thing you made on Tessel?

**Carlos:** The first thing that I do when I get a new microcontroller is make a webserver. I want a webpage running on every microcontroller. So the first thing that I did was this really simple webpage running on the Tessel, called  [tiny-router](https://www.npmjs.com/package/tiny-router).

I wanted something like Express, but made to run on any microcontroller. I want it to be easy, and simple, and not a lot of code. I want it to run on Edison, and Espruino, everywhere. So that’s what I made.

I like to follow the technology trend, see where software is going, and microcontrollers are big right now.

Every company that I know of is trying to come out with their own version of the Internet of Things, and companies like Intel, and like you guys [Technical Machine], are making tools to let people create their own Internet of Things.

That’s why I like microcontrollers so much, they empower people who don’t have the time to make a circuit from scratch, but who have the passion and the desire to create.

I’m a busy guy, but this is what I like to do. I go to my office at home, after the kids go to sleep, close the door, and just play with electronics.]]></content:encoded>
    <wp:post_name>107602833137</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/105980486687</link>
    <pubDate>Tue, 23 Dec 2014 13:52:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[interview]]></category>
		<category domain="tag" nicename="interview"><![CDATA[interview]]></category>
		<category domain="tag"><![CDATA[josh dudley]]></category>
		<category domain="tag" nicename="josh-dudley"><![CDATA[josh dudley]]></category>
		<category domain="tag"><![CDATA[io2work]]></category>
		<category domain="tag" nicename="io2work"><![CDATA[io2work]]></category>
		<category domain="tag"><![CDATA[industrial]]></category>
		<category domain="tag" nicename="industrial"><![CDATA[industrial]]></category>
		<category domain="tag"><![CDATA[industrial automation]]></category>
		<category domain="tag" nicename="industrial-automation"><![CDATA[industrial automation]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/105980486687</guid>
    <!--<wp:post_id>105980486687</wp:post_id>-->
    <wp:post_date>2014-12-23 10:52:00</wp:post_date>
    <wp:post_date_gmt>2014-12-23 18:52:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>An Interview with io2work: Industrial Automation</title>
    <description></description>
    <content:encoded><![CDATA[#####12/23/2014– [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

I first became intrigued by Josh Dudley when he mentioned a Tessel project that involved controlling a welder. Josh ([io2work](https://forums.tessel.io/users/io2work) on our forums) is a welding engineer by training, an industrial researcher and IT tech by trade, and a self-taught computer and electronics engineer by choice. He’s been picking up JavaScript, Node, and more recently Tessel in pursuit of his vision for modern web interfaces on industrial machines.

**Kelsey:** What’s your background in engineering?

**Josh:** My actual engineering degree is in something relatively unrelated– I’m a welding engineer from Ohio State. But I’ve started doing the computer stuff out of personal interest over the last five years or so– it’s something that’s grown out of interest, but there are also needs here at work for automating some different processes.

I’ve been exploring different avenues. Back in late 2011, I read about Node.JS. I’d been learning some JavaScript and wanted to continue down that path.

When I saw that I could communicate with serial devices through Node.JS, I set up a Node server on a Raspberry Pi and started figuring out how to communicate with these precision power supplies that we use for one of our manufacturing processes.

**Kelsey:** What’s the first thing you made on a Tessel?

**Josh:** The first thing I made with it was an automated welding process that controls rotation with some limit switches and turns the welder on and off with a Tessel relay module.

![](https://31.media.tumblr.com/5139ba140c2049f1f65930ecf3a5ede4/tumblr_inline_ngt0mc6ELm1s75tgz.png)

It’s relatively simple; it has three buttons on it, and one plunger-style limit switch on the turntable so I know when it’s made a 360 degree revolution. One button tells it to activate and start turning and welding. When it hits the limit switch, after it rotates around, it turns everything back off. It automates welding around the drum for us.

![](https://31.media.tumblr.com/4f51aa69fe8312549193b08227eb3dbc/tumblr_inline_ngt0mlgxaS1s75tgz.png)

**Kelsey:** How do you control a welder with a Tessel?

**Josh:** In this case, it’s just a simple relay. I’m using a standard MIG welder. It has a trigger that you pull, which is nothing more than opening and closing a contact. So all I did was the same thing, programmatically, with one of the Tessel relays.

![](https://31.media.tumblr.com/a9f34edeeadf4c30f3a2d6194787dc01/tumblr_inline_ngt0mugzWn1s75tgz.png)

*Editor’s note: the code for this project can be found [here](https://gist.github.com/io2work/14e4f2d72575550f7905).*


**Kelsey:** Did that make you nervous, hooking up something as critical as a welder to your own wiring?

**Josh:** Not really. I grew up in a machine shop environment, so I’m used to tinkering with things.

My skill set tends more naturally towards the mechanical side of things, and the electrical and computer stuff has become a personal interest– I learn it as I go.

**Kelsey:** Where do you envision this sort of automation going in the future?

**Josh:** When I started working on the Raspberry Pi, I came up with this vision. I’ve worked on a lot of homemade automation stuff, one-off stuff that’s relatively simple. But it’s aging– it’s written on stuff that was made fifteen years ago, applications that are in Visual BASIC, dependent upon Windows 95 or Windows 98 in order to run. I want to start moving some of these simpler things to the browser.

I’m creating a vision for that here, where I work, moving more and more of our custom automation stuff directly into the browser so we don’t have to deal with client-installed software. That’s the driver for all of this. And the Tessel just made it even easier to do, because it’s a microcontroller, with inputs and outputs on it, and the webserver’s built right in, so all that stuff fit perfectly with what I was already trying to do.

For most stuff in the manufacturing environment, it doesn’t matter if it happens in one millisecond or 100 milliseconds, so it isn't often necessary to deal with compiled, client-installed code that is dependent on complex IDEs. Plus technology keeps closing this performance gap to the point where it simply isn't an issue any more.

Therefore, the simplicity and the ability to use one language, whether I’m writing my frontend in the browser, or talking to the device that’s controlling the IO, makes my workflow easier, and it’s easier to maintain. Plus, I get to grow my skills quickly, because I’m concentrating on one thing.

A combination of laziness and necessity is the "mother of invention" here; as I become responsible for more of these machines, I want them to be easier to work on. I want to be able to open up a modern web browser and do what I need to do.

**Kelsey:** What would make it easier to develop these sorts of automations for the industrial sphere?

**Josh:** An industrial hardened version of the Tessel, similar to what they are doing with Arduino at [controllino.cc](http://controllino.cc/), would be absolutely awesome. The event-driven nature of Node.JS just makes a ton of sense for controls-based stuff, and being able to use the same language for the entire stack makes things simple and easy to upgrade and maintain.

Everything in the industrial environment gets mounted into a cabinet on a DIN rail, so a case that’s mountable would be one thing. And then of course things like electrostatic discharge protection. It would also need to be coupled with a relatively robust power supply.

A lot of things in the industrial world depends on 24V logic or 12V logic. I’ve been able to get around that with Tessel by using some digital relays that will take the 3.3V output that Tessel provides, and then I have a 24V secondary power supply. I’m opening and closing the relay with the Tessel and that’s my 24V logic.

**Kelsey:** What are some projects you’re working on right now?

**Josh:** I’m working on a project right now, where I have an HTML5-based web application, using websockets for talking to a machine that I’m controlling– making ramps go up and down. I’m also using UART (along with a [SparkFun RS232 Shifter](https://www.sparkfun.com/products/449)), reading the serial port, in order to get the information back from a digital level, and then I’ve got some proximity switches I’m reading and doing different stuff on.

![](https://31.media.tumblr.com/76ca2b44808275a3783b124e775978d2/tumblr_inline_ngt0n3UDIY1s75tgz.png)

I’ve got another project I’m working on, helping one of our other engineers prototype something for a new process – rotating a part and dipping it down in a masking material, so I’ve got to control a pneumatic raising and lowering device, and talking to a DC motor to rotate the part.

But now that I’ve got a little bit of experience with it, something like that takes just a few hours.

**Kelsey:** What do you see as the future of industrial automation?

**Josh:** I would hope that more and more of it will be moving to the web browser. The whole platform-independent aspect of the web is what’s so desirable. It doesn’t matter whether I bring my Macbook Air in, or my iPad, or my PC, I can pop open a webpage in a modern browser, and do whatever I want to do.

Creating web interfaces makes it easier to go back and update one codebase. Devices change over time, and the web progresses. On the web, you just update your codebase accordingly, and you still have it available on a larger number of devices.

I hope that the manufacturing industries get with the times and start taking advantage of these open platforms.]]></content:encoded>
    <wp:post_name>105980486687</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/105626011567</link>
    <pubDate>Fri, 19 Dec 2014 14:44:18 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[what's next]]></category>
		<category domain="tag" nicename="whats-next"><![CDATA[what's next]]></category>
		<category domain="tag"><![CDATA[community]]></category>
		<category domain="tag" nicename="community"><![CDATA[community]]></category>
		<category domain="tag"><![CDATA[projects]]></category>
		<category domain="tag" nicename="projects"><![CDATA[projects]]></category>
		<category domain="tag"><![CDATA[shipping]]></category>
		<category domain="tag" nicename="shipping"><![CDATA[shipping]]></category>
		<category domain="tag"><![CDATA[logistics]]></category>
		<category domain="tag" nicename="logistics"><![CDATA[logistics]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/105626011567</guid>
    <!--<wp:post_id>105626011567</wp:post_id>-->
    <wp:post_date>2014-12-19 11:44:18</wp:post_date>
    <wp:post_date_gmt>2014-12-19 19:44:18</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>What we're working on</title>
    <description></description>
    <content:encoded><![CDATA[#####12/19/14– [Updates](http://blog.technical.io/search/update)

Hope you’re all having a lovely December. We’ve been working hard, trying to get as much done as we can before all of the holiday madness sets in.

Some of you may have noticed that we’re having some trouble keeping modules in stock– we really appreciate your enthusiasm, and we have hundreds of modules in the mail on the way to our warehouse, but shipping takes longer across the globe during holiday season.

We’re doing our best to ship out orders as soon as possible, but those of you hoping for packages by Christmas might not get them in time. In case it helps, we made a little “it’s coming soon” printout you can give in the meantime, while you’re waiting for the package to arrive. You can download it [here](https://s3.amazonaws.com/technicalmachine-assets/press/coming-soon.jpg).

Meanwhile, we wanted to tell you that we’re working on a Next Thing. We listened to your feedback, particularly about Wifi reliability and about the cost of Tessel, and something is in the works. We aren't releasing the details yet, but we wanted you to know that we’re putting a lot of work into development. You can expect a product announcement early next year.

Other stuff we’re working on:

* The DIY module is a protoboard module for making your own Tessel modules. We should be adding that to our store within the next week or so– an email announcement is forthcoming. 
* There’s a new storefront in the works that we hope will make your Tessel shopping experience more pleasant and transparent. We’re hoping to push it live within the next couple of weeks.
* Kelsey (ifoundthemeaningoflife on the projects page) has pledged to publish 30 projects in 30 days, from 12/16 to 1/16. She’s hoping to show off some cool use cases and projects with Tessel that you can replicate and remix into your own Tesselations. You can see the beginning of the 30-day streak on the projects page: [https://projects.tessel.io/projects](https://projects.tessel.io/projects)
* There have been some subtle changes to [start.tessel.io](http://start.tessel.io/) – featured projects have been added to the bottom of each module page. Check it out– if you have a project on the projects page, your work might be featured!

From the community, here are some of our favorite recent projects:

[![](https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/631a8e4e-1c3e-4a7c-a625-d9772f85f35f.png)](https://projects.tessel.io/projects/emic-2-module)[![](https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/8c51b9c2-85b7-40aa-b4b9-4c840f2330fa.png)](https://projects.tessel.io/projects/oled-display)[![](https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/6b1785cd-4663-448b-9b39-9575d2f8497f.png)](https://projects.tessel.io/projects/website-down-alarm)
[![](https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/268a5198-f6b3-47f0-b147-0730b53d7d30.png)](https://projects.tessel.io/projects/tessel-ibeacon)[![](https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/e0b774da-945d-4a3d-9e51-2bb3b626e043.png)](https://projects.tessel.io/projects/npx-neopixels-for-tessel-made-easy)[![](https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/af04374a-3c60-493a-82b2-b0354f9004ec.png)](https://projects.tessel.io/projects/xmas-lights)

Keep in touch,<br/>
Kelsey, Jia, Tim, Jon, Kwyn, Eric, Kevin, and Ken]]></content:encoded>
    <wp:post_name>105626011567</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/105551338172</link>
    <pubDate>Thu, 18 Dec 2014 16:40:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[video]]></category>
		<category domain="category" nicename="video"><![CDATA[video]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[community]]></category>
		<category domain="tag" nicename="community"><![CDATA[community]]></category>
		<category domain="tag"><![CDATA[node.js]]></category>
		<category domain="tag" nicename="nodejs"><![CDATA[node.js]]></category>
		<category domain="tag"><![CDATA[node]]></category>
		<category domain="tag" nicename="node"><![CDATA[node]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[culture]]></category>
		<category domain="tag" nicename="culture"><![CDATA[culture]]></category>
		<category domain="tag"><![CDATA[tech culture]]></category>
		<category domain="tag" nicename="tech-culture"><![CDATA[tech culture]]></category>
		<category domain="tag"><![CDATA[tech talk]]></category>
		<category domain="tag" nicename="tech-talk"><![CDATA[tech talk]]></category>
		<category domain="tag"><![CDATA[nodeday]]></category>
		<category domain="tag" nicename="nodeday"><![CDATA[nodeday]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/105551338172</guid>
    <!--<wp:post_id>105551338172</wp:post_id>-->
    <wp:post_date>2014-12-18 13:40:00</wp:post_date>
    <wp:post_date_gmt>2014-12-18 21:40:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>######12/18/2014– [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)</title>
    <description></description>
    <content:encoded><![CDATA[
              <iframe width="400" height="225"  id="youtube_iframe" src="https://www.youtube.com/embed/c93WZXIN3Jk?feature=oembed&amp;enablejsapi=1&amp;origin=http://safe.txmblr.com&amp;wmode=opaque" frameborder="0" allowfullscreen></iframe>              
I gave a talk last week called "Node as a Movement: Building Community into Products" because I wanted to talk a bit about tech culture, how to be a good member of the open source community, and what I think makes the Node community special.

Slides are [here](http://www.slideshare.net/TechnicalMachine/node-as-a-movement-building-community-into-products-kelsey-breseman-nodeday-2014).

Intuit Labs followed up with me afterwards; you can read that interview [here](http://intuitlabs.com/supportive-coding-communities-spark-innovation/).

I'm curious to hear your thoughts on the matter– tweet at @selkeymoonbeam and let's have a conversation!

Kelsey      ]]></content:encoded>
    <wp:post_name>105551338172</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/104864533692</link>
    <pubDate>Wed, 10 Dec 2014 15:32:36 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Ken Nierenhausen]]></category>
		<category domain="tag" nicename="ken-nierenhausen"><![CDATA[Ken Nierenhausen]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[fulfillment]]></category>
		<category domain="tag" nicename="fulfillment"><![CDATA[fulfillment]]></category>
		<category domain="tag"><![CDATA[shipping]]></category>
		<category domain="tag" nicename="shipping"><![CDATA[shipping]]></category>
		<category domain="tag"><![CDATA[storefront]]></category>
		<category domain="tag" nicename="storefront"><![CDATA[storefront]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/104864533692</guid>
    <!--<wp:post_id>104864533692</wp:post_id>-->
    <wp:post_date>2014-12-10 12:32:36</wp:post_date>
    <wp:post_date_gmt>2014-12-10 20:32:36</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Cart to Doorstep - Things to consider when selling a product</title>
    <description></description>
    <content:encoded><![CDATA[##### 12/10/2014– [Ken Nierenhausen](http://blog.technical.io/search/ken+nierenhausen)

![](https://31.media.tumblr.com/b3bb033e39d774085fe2558f7d40dbcc/tumblr_inline_ngae52oZoT1s75tgz.png)

Ever wanted to sell a product online? No not your old Xbox, I mean a product you’re creating. Well the road ahead is can be a bumpy one, and it’s dangerous to go alone! If you’re curious about the process, are a startup looking to sell a physical product, or are searching for better ways to do a storefront or fulfillment, then stay tuned. Take this post as a roadmap for the course ahead.

There are many steps that take place when going from cart to doorstep. The major parts are the storefront, middleware, fulfillment, and shipping. There are a lot of options in each of these categories, so let’s explore the possibilities.

### The Storefront

![](https://31.media.tumblr.com/8fcec8803231bb1ad157b2c758d596af/tumblr_inline_ngae5aWBjk1s75tgz.png)

This is the part of the process that you have probably used before. The storefront is the portal from the product to the customer. It consists of two pieces: a place for customers to buy products, and a place where orders are stored for the seller to manage. There are two main approaches: doing it all yourself, or using an e-commerce solution. 

More often than not, storefronts are designed, implemented, and maintained by the seller. They do it themselves, and it’s a complete control solution. This allows for high customizability and complete control over incoming orders. The downside is overhead. Creating and maintaining a storefront from scratch is very time consuming.

On the other end of the spectrum, there are services that provide an instant storefront. A few good places to start looking are Volusion, Shopify, and Celery. Basically they control the storefront (often with design options), and provide a service to manage incoming orders. 

Volusion and Shopify are big names in this industry, who know how to get you set up with your own storefront. Shopify is slightly cheaper and generally better received, but Volusion has just as many features with great customer support. Along the same lines, Celery is a pre order management system; great for startups who might not have an actual product available yet. 

The biggest thing to remember when determining what to do about a storefront is time. If there’s no time to waste and you need to sell quickly, use one of the e-commerce solutions. They’re easy to set up, fast when it comes to order management, and often have a trial period so you can test them out.

If you’re considering doing a storefront yourself, look at these solutions again. They offer API’s that can make order management easier. If you want to do it all from scratch, go for it! But expect a longer deployment. Your storefront might be exactly how you want it, but three months too late.

### Fulfillment

![](https://31.media.tumblr.com/73e33bdca12e1f82297894122d3370d6/tumblr_inline_ngae5ivEyu1s75tgz.png)

So what happens next? You have a list of orders sitting around. This is where fulfillment comes into play. Fulfillment is the act of taking an order, finding the parts, packaging it, and dealing with shipping. So what are the options?

The one that probably comes first to mind is in-house fulfillment; aka doing it yourself. As you can imagine, this can be quite time consuming; especially as the number of orders increases. Although this may be perfect if you sell a small number of items or something that’s really customized, it’s not ideal for scale. However it does have the benefit of not needing any middleware (more on that soon).

There are companies that exist that will handle fulfillment for you. Shipwire, Whiplash, and Rush Order are a few good places to start looking. What these companies do is take your orders from the storefront and get the pieces and parts packaged up and shipped out to the customer. All the hassle of fulfillment is taken out of your hands… if the price is right.

Shipwire is one of the bigger names here. They handle fulfillment, and have a lot of services (like Shopify and Volusion) already integrated, so there’s no need for middleware. Whiplash is a fulfillment startup that’s a great choice for startups. Rush Order is a little less known, but they have a very personal touch with all their orders; something that might be important to your customer experience.

So what are the tradeoffs? Here the biggest thing to keep in mind is scalability. Doing in-house fulfillment may be super attractive due to its simplicity and low cost, but if business starts booming you might crash and burn out early. Fulfillment houses have this down. They have the warehouse space, the time, and manpower to get orders shipped; simple as that. However, one caveat to using a fulfillment house is that you have to have middleware. 

### Middleware Servers

![](https://31.media.tumblr.com/fa076fed9a494e5d69402bfb338fb4fe/tumblr_inline_ngae5r2QR41s75tgz.png)

Some fulfillment houses have built-in order integration, meaning that you don’t have to set up any middleware. The point of a middleware server is to take orders from the storefront, change them to a format that the fulfillment house understands, and then forward them to the fulfillment house. So what are the options?

A heavier approach would be having a database on your middleware server. This is great for maintaining history, but a pain to deal with consistency. Introducing a database here means your storefront has a state, your fulfillment house has a state, and now your server has a state. All three of these need to be consistent, and this is going to take time to get right; not to mention dealing with downtime. If you have a use a database, keep these things in mind.

A lighter approach is setting up a webhook managing server. If your storefront and fulfillment house use webhooks then your server just has to listen and forward accordingly. New order from the storefront? Forward the order to my fulfillment house. Order just shipped? Notify the customer via the storefront order management system. This is lighter than a database, but it still has problems with downtime because webhooks are unique events. If you miss one it’s gone, and now you need to synchronize the states.

An even lighter approach is setting up a polling middleware server. Basically all it has to do is make sure that the storefront and fulfillment house are consistent from time to time. Although this will also take time to implement, it removes the state from the middleware server. This has the added benefit of dealing with downtime. If your storefront or fulfillment house orders go dark, the middleware will synchronize orders as soon as it hears anything.

Just remember that downtime is inevitable. Whether it’s your server crashing because of some bug, or your storefront in inaccessible due to a massive DNS DDoS attack on cyber monday. They can happen, and they will happen; plan accordingly.

### Shipping and Distributors

![](https://31.media.tumblr.com/1dcfc677bedf7759666abdab0d75f32b/tumblr_inline_ngae60poEs1s75tgz.png)

Shipping a product from one place to another is pretty easy. It’s the options, international orders, and sheer cost that become problems. So how do you deal with this? What are the choices?

If you’re planning on doing in-house fulfillment, then you’re going to have to deal with shipping. This may be simple enough for domestic orders, but it gets less ideal when things start shipping overseas. Not only will there be high international shipping costs, there are also going to be import tariffs that differ from country to country (sometimes as much as 2x the cost of the actual package!)

This may work for a company with low volume or highly customized sales, but more often than not it’s a headache. Your customer is going to be dealing with customs themselves, and this takes away from their experience.

Another thing to consider if you’re doing in-house fulfillment is distributors. Distributors will take your product and sell it in another country. The benefit of distributors is that you and your distributor deal with international charges, not the customer. However the downside is that distributors take a cut of the profit. It’s not cost effective to use distributors if your shipping costs are less than it would be to pay them.

If you’re using a fulfillment house, make sure to ask about distributors. Fulfillment houses often have warehouses overseas that they use for international distribution. If they do, see if there are any additional charges for international orders. If they don’t, make sure you understand that your customer will be dealing with customs.

Shipping and distribution is a tricky trade off between financial management and end user experience. Is one more important than the other? Maybe, it really depends on your customer and your wallet; keep those both in mind.

### Conclusion

Selling something online is a process, not an ebay account. There’s going to be a lot of decisions made that are highly dependent on your timeline, business model, and finances. However taking a little time to set up a storefront and supply chain in the beginning will save you a lot of headaches down the line. 

Just remember the big points from each part:
Storefront - time to market
Fulfillment - scale
Middleware (if you need it) - murphy’s law
Shipping - customer satisfaction

As always, if you have any questions, comments, concerns, or hate mail, feel free to contact me at ken@technical.io

Cheers,<br/>
Ken]]></content:encoded>
    <wp:post_name>104864533692</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/102971943072</link>
    <pubDate>Tue, 18 Nov 2014 13:29:52 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[luajut]]></category>
		<category domain="tag" nicename="luajut"><![CDATA[luajut]]></category>
		<category domain="tag"><![CDATA[lua]]></category>
		<category domain="tag" nicename="lua"><![CDATA[lua]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[embedded]]></category>
		<category domain="tag" nicename="embedded"><![CDATA[embedded]]></category>
		<category domain="tag"><![CDATA[fractal]]></category>
		<category domain="tag" nicename="fractal"><![CDATA[fractal]]></category>
		<category domain="tag"><![CDATA[hiring]]></category>
		<category domain="tag" nicename="hiring"><![CDATA[hiring]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/102971943072</guid>
    <!--<wp:post_id>102971943072</wp:post_id>-->
    <wp:post_date>2014-11-18 10:29:52</wp:post_date>
    <wp:post_date_gmt>2014-11-18 18:29:52</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>LuaJIT on Tessel: First Steps</title>
    <description></description>
    <content:encoded><![CDATA[#####11/18/2014– [Updates](http://blog.technical.io/search/update)

Hello, Tessel aficionados!
 
We recently released a 2-3x performance improvement to Tessel, in our first step toward integrating LuaJIT as part of our JavaScript stack. This is a big step for high-level languages on embedded devices, and is key to some much bigger (order of magnitude) performance upgrades we’re working on over the next month. Update normally with `tessel update`, and read more about it [on the blog](http://blog.technical.io/post/102381339917/a-new-engine-for-your-tessel).
 
We also continue to develop Fractal, [our planned revolution in hardware production tools](http://blog.technical.io/post/101109458547/what-comes-next-fractal). We have decided to create our proof of concept on the Atmel’s [SAMR21](http://blog.technical.io/post/100084265042/onboarding-with-the-samr21-mcu-on-osx-ubuntu), and are fleshing out details of the system as a whole. Fractal is still in the design phase, and is being developed openly– so please read about it and discuss with us [here](https://github.com/technicalmachine/fractal-docs).
 
Finally, the company has made a new hire! Please welcome the eighth member of our company, [Kwyn Alice Meagher](http://blog.technical.io/post/101857408312/new-hire-kwyn-alice-meagher). We’re very excited to have her as a full-time web developer– expect to see site improvements soon! (We’re still hiring for various other positions, including 2015 summer internships– check out the [jobs](https://tessel.io/jobs) page for more details.)
 
Never a dull moment here at Technical Machine– here’s what else has been going on:

* We now have a page dedicated to helping you find a Tessel hack group near you: [https://tessel.io/community](https://tessel.io/community)
* A new storefront is in the works
* Made some [third-party modules](https://tessel.io/modules#third-party) ([submit your own](https://docs.google.com/forms/d/1Zod-EjAIilRrCJX0Nt6k6TrFO-oREeBWMdBmNMw9Zxc/viewform)!)
* Started shipping from a new fulfillment house
* Started new production runs for Tessels and almost every module
* Gave talks in [Guatemala](https://github.com/ekolker/fit-2014), [London](http://blog.technical.io/post/101190208282/bringing-hardware-to-life-with-js-and-node), and [Berlin](http://www.slideshare.net/TechnicalMachine/why-use-javascript-in-hardware-goto-conf-berlin)
* Opened up with our first [international distributor](http://www.switch-science.com/catalog/1942/), in Japan!
* Got Tessel’s runtime working on Edison (blog post coming soon)
 
We’d love to hear what you think about all these changes and ideas– get a discussion started on the [Forums](https://forums.tessel.io/)!
 
All the best,<br/>
Ken, Jia, Kevin, Tim, Jon, Kelsey, Kwyn, and Eric

![](https://ci6.googleusercontent.com/proxy/oPUdjhNpg3ejon3aiLTUYvzQVTb8A41CJNSV3lNaRJNzTTE7IWymeroUaO2CrlKmPPwl_CMNjbDt-61RyWK79UlPnY9-wqAlIWg_b1VX2x06WYNOBFyBIQYKi5rq36Bo5e0Zvz7XS4vegMQx8nqaUuheOFnM-KhWdTbLZIw=s0-d-e1-ft#https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/78586a46-3ea8-40da-ab93-fa65feb2e636.png)]]></content:encoded>
    <wp:post_name>102971943072</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/102381339917</link>
    <pubDate>Tue, 11 Nov 2014 14:25:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Tim Ryan]]></category>
		<category domain="tag" nicename="tim-ryan"><![CDATA[Tim Ryan]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[Technical Machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[Technical Machine]]></category>
		<category domain="tag"><![CDATA[JavaScript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="tag"><![CDATA[Hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[Hardware]]></category>
		<category domain="tag"><![CDATA[Lua]]></category>
		<category domain="tag" nicename="lua"><![CDATA[Lua]]></category>
		<category domain="tag"><![CDATA[LuaJIT]]></category>
		<category domain="tag" nicename="luajit"><![CDATA[LuaJIT]]></category>
		<category domain="tag"><![CDATA[Colony]]></category>
		<category domain="tag" nicename="colony"><![CDATA[Colony]]></category>
		<category domain="tag"><![CDATA[Performance]]></category>
		<category domain="tag" nicename="performance"><![CDATA[Performance]]></category>
		<category domain="tag"><![CDATA[Speed]]></category>
		<category domain="tag" nicename="speed"><![CDATA[Speed]]></category>
		<category domain="tag"><![CDATA[Bytecode]]></category>
		<category domain="tag" nicename="bytecode"><![CDATA[Bytecode]]></category>
		<category domain="tag"><![CDATA[Embedded]]></category>
		<category domain="tag" nicename="embedded"><![CDATA[Embedded]]></category>
		<category domain="tag"><![CDATA[Microcontrollers]]></category>
		<category domain="tag" nicename="microcontrollers"><![CDATA[Microcontrollers]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/102381339917</guid>
    <!--<wp:post_id>102381339917</wp:post_id>-->
    <wp:post_date>2014-11-11 11:25:00</wp:post_date>
    <wp:post_date_gmt>2014-11-11 19:25:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>A New Engine for your Tessel</title>
    <description></description>
    <content:encoded><![CDATA[#####11/11/2014– [Tim Ryan](http://blog.technical.io/search/tim+ryan)

When designing Tessel, we grappled with some very unique constraints for a developer platform. Most microcontrollers weigh in at perhaps a few dozen kilobytes of RAM, and a small factor more Flash. The average [amount of JavaScript in a single webpage](http://royal.pingdom.com/2012/05/17/javascript-size-up-48-percent/) exceeds the amount of space in most microcontrollers, including the Tessel’s Cortex-M3, which has only 200kb(!) of memory on-chip.

We didn't need to make a full PC to make Tessel an interesting prototyping platform for web developers. There are plenty of ways to have JavaScript co-exist and communicate with embedded devices, for example [Firmata](http://firmata.org/) or [Raspberry Pi’s](www.raspberrypi.org/) GPIO ports, but few products allow you to use existing software development tools to write code that directly interfaces at the level of a microcontroller or signal interface to other ICs. (An idea we're pushing further with Fractal. [Read more.](http://blog.technical.io/post/101109458547/what-comes-next-fractal))

To push JavaScript as a language down to this level, our major hurdle was getting an embedded platform to run code at all. Despite its surface similarity to C, dynamic languages like JavaScript, Python, or Ruby require a lot of overhead just to run a line of code. Usually this takes place in a "virtual machine", a language interpreter that provides the standard libraries, handles dynamic typing (`5 + 5` and `"5" + 5` mean different things in JavaScript), and of course memory allocation like garbage collection. Emulating a language in this way can naturally be more CPU and memory-intensive than compiling.

The problem with running JavaScript on a target like Tessel is that every commonly used JavaScript engine has been refined and tuned for Desktop PCs, with gigabytes of RAM and fast network connections. But not all VMs are created equal; they are tailored for wildly different use cases, including embedded platforms.

Fortunately, JavaScript has some essential similarities to the programming language [Lua](http://lua.org/). Lua is a dynamic, lightweight programming language with extensible semantics that has seen broad use as scripting language in video games, routers, servers, and much more. Much of its popularity is due to how simple it is to embed. Lua is [composed of a few dozen files](https://github.com/lua/lua) written in portable C and has no external dependencies. Thus with Lua, adding scripting to a project becomes as simple a proposition as including another C library. That Lua supports many similar properties to JavaScript—first-class functions, null/boolean/string/double/object/array types, and can be changed *at runtime* to act differently—made it an amazing starting point for exploring how to make a JavaScript-compatible, embedded runtime.

Heavyweight JavaScript engines like V8 and Spidermonkey are also embeddable, but where Lua shines is its low memory profile (taking only a few dozen kilobytes to start up instead of several megabytes) and simplicity. Thus, our first real demonstration of Tessel was in summer of 2013 getting Lua running on the LPC1830 (Tessel’s CPU). After that, it was "straightforwardly" a matter of closing the gap between Lua and JavaScript.

Because Lua is extremely extensible, allowing modification of everything from basic add operators to whether primitives act like objects, a year of effort has resulted in a runtime that emulates many real features of Node.js with only a fraction of the resources Node requires on PC.

### Just in Time

One year later, the landscape is much improved: several stellar alternative JavaScript engines are now freely available and freely licensed. Among these are projects like the [Espruino VM](https://github.com/espruino), optimized for size and memory conservation, and [Duktape](http://duktape.org/), a JS engine designed for embedding into C. Meanwhile, [Tessel’s JavaScript engine](https://github.com/tessel/runtime), dubbed “Colony”, leverages Lua’s VM and ecosystem to provide a Node-like environment that works across PC and embedded targets. But while Tessel is not lacking in memory, it is lacking in one of JavaScript's biggest modern advantages: speed. So over the past few months, I've experimented in what would bring Tessel up to speed (literally) with other modern dynamic languages, starting with a foundation lauded for its speed and minimal codebase, LuaJIT.

[LuaJIT](http://luajit.org/) is a combination of a few components: a parser/compiler converting Lua source into (LuaJIT’s own) bytecode, an interpreter for running this bytecode, and then a JIT (just-in-time compiler) for optimizing this bytecode into machine code at the lowest level. If you're not familiar with a JIT, imagine a compiler that runs alongside your code, observing your code as it's running. If it sees any loops that look intensive, are called often, and use similar types of variables on each iteration, it can bundle these assumptions up as compiler "guards" and generate low-level machine code that acts much more like C than a high level language. If, while your code is running, one of those guards fails (the variable `i` is no longer a number, because we suddenly assigned it to be an array!) we jump backward into interpreting your code one line at a time. This is [one of many optimizations](http://wiki.luajit.org/Optimizations) that happen while your code is running inside a VM with just-in-time compilation.

But why pursue LuaJIT? We've reached the limits of what our old runtime can do while sacrificing speed to emulate JavaScript compatibility. We'd like to implement many pedantic features—getters/setters/enumerable/writable/configurable properties, proper null values to arrays, and speedy execution in modifying binary data—while making code run much faster, and to top it all off, keep a freely MIT-licensed codebase. By building on top of some of the best technology that exists today, we can make it even more useful and flexible to programmers of all kinds, including Lua programmers interested in targeting microcontrollers.

### LuaJIT on Thumb

As of today, you can update Tessel to a new build built on LuaJIT's codebase instead of the classic Lua VM from PUC-Rio by running the usual `tessel update`. This doesn’t enable the just-in-time compilation I described; we are working on porting this. For now, LuaJIT’s codebase and interpreter (the first step toward speeding up your code) are enabled and yield a pleasant 2-3x speed improvement. We’re working on porting the JIT component itself to leverage interpreter and speed up code execution by orders of magnitude, so stay tuned.

What does this mean for Tessel users? Today, a small speed improvement. Next, we can address large incompatibilities in how Tessel runs JavaScript in a rigorous way. We can speed up all code by leveraging LuaJIT's interpreter, fast internal function paths, and eventually JIT to perform machine code assembly for JavaScript code. In addition, compilation of JavaScript on Tessel (enabling things like Function constructors and eval()) can be written to target LuaJIT bytecode directly, shortcutting our process of compiling to JavaScript to Lua source.

Outside of Tessel, this throws Colony's hat into the ring as a JavaScript engine with a focus on embeddability and performance. (You can test out Colony on PC today by cloning `https://github.com/tessel/runtime` and following the instructions. Colony’s JIT is enabled on PC, so benchmarks run quite fast considering its size.) Alongside the other great engines mentioned above, this furthers JavaScript's inroads in enabling web programmers to prototype high-level ideas in standardized languages for every part of the stack. In 2014, I can't think of anything cooler than that!

I'll be writing more on the technical details of this LuaJIT port in my next few blog posts, so stay tuned.]]></content:encoded>
    <wp:post_name>102381339917</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/101857408312</link>
    <pubDate>Wed, 05 Nov 2014 13:28:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kwyn meagher]]></category>
		<category domain="tag" nicename="kwyn-meagher"><![CDATA[kwyn meagher]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[hack reactor]]></category>
		<category domain="tag" nicename="hack-reactor"><![CDATA[hack reactor]]></category>
		<category domain="tag"><![CDATA[harleykwyn]]></category>
		<category domain="tag" nicename="harleykwyn"><![CDATA[harleykwyn]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/101857408312</guid>
    <!--<wp:post_id>101857408312</wp:post_id>-->
    <wp:post_date>2014-11-05 10:28:00</wp:post_date>
    <wp:post_date_gmt>2014-11-05 18:28:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>New Hire: Kwyn Alice Meagher</title>
    <description></description>
    <content:encoded><![CDATA[##(aka HarleyKwyn)
#####11/5/2014– [Kwyn Meagher](http://blog.technical.io/search/kwyn+meagher)

Hey there!

I’m Kwyn, aka [HarleyKwyn](https://twitter.com/HarleyKwyn), from Sunnyvale, CA, the original Silicon Valley. Unlike the majority of the Technical Machine crew, I do not hail from Olin College and instead graduated from University of California, Merced’s Materials Science and Engineering program with an emphasis in nano-technology. 

Specializing in carbon nano materials, I  fabricated graphene transistors and simulated nanoscale organic photovoltaic cells using MatLab, and COMSOL. I spent the majority of my time programming simulations, which I enjoyed. However, I did not enjoy the constant uphill battle of submitting lengthy proposals. Proposal writing took up half my time and it was a gamble whether or not they would get funded. When funding was awarded it was frequently  less than we needed to run our experiments. This led me to enroll in Hack Reactor once I realized the sad state of academia as a whole. So instead of climbing the ivory tower, I’ve joined the ranks of the Technical Machine team.

![](https://31.media.tumblr.com/d01a87e474eeafce4ba4f984179dc967/tumblr_inline_nekw59VehG1s75tgz.jpg)

While at Hack Reactor as a student and Hacker in Residence (Hack Reactor’s equivalent of a graduate program), I did a variety of projects. The first project I tackled with a group of other engineers was competing in a [Kaggle competition](https://www.kaggle.com/c/galaxy-zoo-the-galaxy-challenge) to classify galaxies, leveraging the power of a supercomputer to give us an upper hand since none of my team had done machine learning before or written a lick of code in python. I’m proud to say that we beat out university teams in the two weeks that we spent on the project.

My second project, and personal favorite, was Visual Interpreter, an interactive visualization of the JavaScript interpreter. Visual Interpreter hooked into a JavaScript interpreter written in JavaScript (very lisp-y). We built a visualization of the scope hierarchy and it could highlight when closure scopes were created and tell you when objects were === to each other. 

With my background in machine learning and research, it’s surprising that I originally took a strictly front-end position at Uber right after finishing Hack Reactor. I did a short stint there before I had coffee and a conversation with Jon. After our conversation it was obvious to me that my heart really belonged to Technical Machine and Tessel. My varied background in nano-engineering, teaching, and web engineering, lent me a special mix of skills that fit well with Technical Machine’s mission. 
 
I’ve been attracted to mentoring students--historically in physics, nano-engineering and software engineering, though that’s just the beginning. I take great pleasure in teaching and learning from others so I hope to see you all in the future at conferences, hack-a-thons and meetups. Stoked to be part of this amazing team and look forward to working with all of you via twitter and the forums. Feel free to reach out to me on twitter [@HarleyKwyn](https://twitter.com/HarleyKwyn) or via e-mail at kwyn [at] technical.io

Happy Hacking
]]></content:encoded>
    <wp:post_name>101857408312</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/101190208282</link>
    <pubDate>Tue, 28 Oct 2014 15:04:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[fullstack]]></category>
		<category domain="tag" nicename="fullstack"><![CDATA[fullstack]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[demo]]></category>
		<category domain="tag" nicename="demo"><![CDATA[demo]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[conferences]]></category>
		<category domain="tag" nicename="conferences"><![CDATA[conferences]]></category>
		<category domain="tag"><![CDATA[skillsmatter]]></category>
		<category domain="tag" nicename="skillsmatter"><![CDATA[skillsmatter]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/101190208282</guid>
    <!--<wp:post_id>101190208282</wp:post_id>-->
    <wp:post_date>2014-10-28 12:04:00</wp:post_date>
    <wp:post_date_gmt>2014-10-28 19:04:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Bringing Hardware to Life with JS and Node</title>
    <description></description>
    <content:encoded><![CDATA[#####10/28/2014– [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

Last week, I spoke at Fullstack Conference in London.

You can see a copy of my slides here: [Bringing Hardware to Life with JS and Node](http://www.slideshare.net/TechnicalMachine/bringing-hardware-to-life-with-js-and-node).

I left lots of time to live-fix my three demos if necessary, but they all worked so well that I ended earlier than expected. That left lots of time to take questions! Fortunately, I had a very engaged audience, and they asked lots of good questions. I recommend you watch the video of the talk, which includes the demos and the questions:

[Kelsey Breseman: Bringing Hardware to Life with JS and Node [video]](https://skillsmatter.com/skillscasts/5771-bringing-hardware-to-life-with-js-and-node)

![](https://31.media.tumblr.com/851d4af12ef8a95d14bd99840145d0f6/tumblr_inline_ne650s3s4y1s75tgz.png)]]></content:encoded>
    <wp:post_name>101190208282</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/101109458547</link>
    <pubDate>Mon, 27 Oct 2014 16:11:26 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kevin mehall]]></category>
		<category domain="tag" nicename="kevin-mehall"><![CDATA[kevin mehall]]></category>
		<category domain="tag"><![CDATA[fractal]]></category>
		<category domain="tag" nicename="fractal"><![CDATA[fractal]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/101109458547</guid>
    <!--<wp:post_id>101109458547</wp:post_id>-->
    <wp:post_date>2014-10-27 13:11:26</wp:post_date>
    <wp:post_date_gmt>2014-10-27 20:11:26</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>What Comes Next: Fractal</title>
    <description></description>
    <content:encoded><![CDATA[#####10/27/2014– [Kevin Mehall](http://blog.technical.io/search/kevin+mehall)

[Jon's last post](http://blog.technical.io/post/98840892607/the-unintended-cost-of-shipping) hinted at what we're working on next, a project we're calling [Fractal](https://github.com/technicalmachine/fractal-docs). I wanted to explain in a little more detail what we're planning for the Fractal software stack.

Our users love Tessel for the ease of getting started. This is especially apparent at hackathons and other [meetups we've held](http://www.meetup.com/APIs-to-Electrons/) for people to try Tessel. A first-time user can go from zero to something quite impressive in only a few hours. Many customers have been asking about their next steps once they build a prototype -- Tessel can't just be a device for winning hackathons. A good platform needs to scale as your project turns into a product and help you win in the marketplace too.

Fractal is a system design tool for microcontroller firmware and hardware. For Tessel prototypes, Fractal will improve IO performance and provide better debug tools. Once your prototype works, and you want smaller, cheaper, and lower-power boards in quantity, Fractal will help you optimize your system design. It'll help you choose the right parts and put together reference schematics and circuit board layouts as a starting point for your own hardware.

### Beyond JavaScript

We've already had to include some dedicated C code in our firmware for specific applications with timing requirements that JavaScript can’t meet. The Audio module requires code in the firmware to feed the audio chip data exactly when it needs it, without waiting for the JS event loop. We've [recently added](https://github.com/tessel/firmware/pull/81) code for driving Neopixel LEDs with the (really powerful, but nontrivial-to-configure) timer hardware built into the NXP micrcocontroller on Tessel. While this works for the handful of applications so far, it doesn't scale; these things should be libraries, not built into the main Tessel firmware. With Fractal, we’re working on a way to ship compiled code modules that integrate tightly into the firmware, while remaining easy to use.

Fractal adds [Components](https://github.com/technicalmachine/fractal-docs/blob/master/software-design.md), bundles of code for a discrete piece of your firmware, like an I2C controller, accelerometer driver, or JS VM containing your domain logic. Components have statically-defined, asynchronous, language-agnostic interfaces, and the Fractal compiler will be able to automatically generate cross-language bindings, so you don't have to [write them manually](https://github.com/tessel/docs/blob/master/tutorials/c-to-js.md). This makes it easier to use the right language for each piece and phase of your project, be it prototyping or realtime control.

The right language isn't always JS or C. I'm enjoying [Rust](http://rust-lang.org), and think it makes an ideal language for programming microcontrollers. Rust is a new language from Mozilla that combines high-level expressiveness and safety with low-level performance, size, and closeness to hardware. It's a new entry into the systems programming space that has been dominated by C for decades.

I'm also working on [Signalspec](http://signalspec.org), a domain-specific language for modeling IO protocols using regex-like definitions. Signalspec is a dedicated description language to abstractly define and then implement the state machines used to communicate with sensors and other chips. It saves you from writing asynchronous state machines by hand, a messy, error-prone process in existing imperative languages.

Because of the cross-language Component interfaces that abstract the underlying hardware, porting between languages and between hardware platforms isn't a full-system rewrite. Start by prototyping your domain logic in JS on Tessel, then port it to Rust and fit it on a $2 Cortex M0 part. Fractal will make such a port not only feasible, but easy and elegant.


Tessel brings a few aspects of Node / JS to embedded development that will become a broader part of Fractal and improve the platform for all languages:

#### Packages

Components involve a change in how code gets deployed to your Tessel. Right now, you normally download the [firmware](https://github.com/tessel/firmware) from us pre-compiled, and then `tessel run` or `tessel push` deploys a bundle of your JavaScript, which the firmware runs from a virtual filesystem. Under Fractal, your project specifies which Components get compiled in, and it will build a custom firmware image containing everything from the low-level drivers to the Colony JS runtime and your JS code, with each deploy. This means many errors are detected at compile time instead of runtime.

The ease of installing Tessel module drivers is important piece of the Tessel user experience, and will guide the design of the Component distribution story. `npm` will obviously remain the way to install pure-JS packages from the Node ecosystem within a JS component.

#### Events

There's one convention in JS that is actually more like how hardware works than most other languages: events. Hardware [interrupts](http://en.wikipedia.org/wiki/Interrupt) wake up the CPU and run an interrupt handler function on hardware events like button presses, SPI completions, and UART received bytes.  Sounds kind of like a JS async callback, right?

An OS kernel can be thought of as an interrupts-to-threads adapter. To achieve asynchronous events within this threaded model, Node uses `libuv`, which can be thought of as a threads-to-events adaptor. On Tessel, rather than going from interrupts to threads and back again, hardware interrupts enqueue events directly onto the JS event queue.

Fractal components add more structure to this asynchronous call / callback model, and use it throughout every layer of the system. Explicitly defining the beginning and end of IO actions as events saves power by spending more time in sleep mode, and saves RAM by avoiding the use of multiple stacks for threads.

----

We're just getting started developing Fractal. For more details, check out our [preliminary documentation](https://github.com/technicalmachine/fractal-docs) and [let us know what you think](https://forums.tessel.io). Sound like something you want to work on? We’ll be developing Fractal in the open on GitHub, and [we’re hiring](https://tessel.io/jobs).
]]></content:encoded>
    <wp:post_name>101109458547</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/100250783387</link>
    <pubDate>Fri, 17 Oct 2014 13:21:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[eric kolker]]></category>
		<category domain="tag" nicename="eric-kolker"><![CDATA[eric kolker]]></category>
		<category domain="tag"><![CDATA[apis to electrons]]></category>
		<category domain="tag" nicename="apis-to-electrons"><![CDATA[apis to electrons]]></category>
		<category domain="tag"><![CDATA[guatemala]]></category>
		<category domain="tag" nicename="guatemala"><![CDATA[guatemala]]></category>
		<category domain="tag"><![CDATA[talks]]></category>
		<category domain="tag" nicename="talks"><![CDATA[talks]]></category>
		<category domain="tag"><![CDATA[tech talk]]></category>
		<category domain="tag" nicename="tech-talk"><![CDATA[tech talk]]></category>
		<category domain="tag"><![CDATA[conferences]]></category>
		<category domain="tag" nicename="conferences"><![CDATA[conferences]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/100250783387</guid>
    <!--<wp:post_id>100250783387</wp:post_id>-->
    <wp:post_date>2014-10-17 10:21:00</wp:post_date>
    <wp:post_date_gmt>2014-10-17 17:21:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Talk slides: &quot;APIs to Electrons&quot;</title>
    <description></description>
    <content:encoded><![CDATA[#####10/17/2014– [Eric Kolker](http://blog.technical.io/search/eric+kolker)

Hey Tesselators, Eric here.

### FIT

Conference season has (unofficially) begun!

Jon and I just got back from speaking at an event in Guatemala called [Foro de Innovación Tecnológica (Forum on Technological Innovation)](http://fit.galileo.edu/), or “FIT” for short. We ran a four-hour hack event for the attendees, each gave a talk, and generally had a blast, which is pretty much par for the course.

### From API to Electrons

My talk was called “From API to Electrons” and walks through what happens when you set a sound trigger on the Ambient module. As you might expect, it looks at what happens at every level of the system, from JS all the way down to simulating the analog electronics on the Ambient module...and back.

![](https://31.media.tumblr.com/dc798b3b91ad353c5446f7bed27db8db/tumblr_inline_ndlmml29hv1s75tgz.png)

I had a lot of fun writing the talk and hope to give it again (in English this time) in the not too distant future. If you’re in the San Francisco Bay Area, give [our meetup](http://www.meetup.com/APIs-to-Electrons/) a look and keep your eyes peeled. If not, or if you just can’t wait, I put the slides online [here](https://github.com/technicalmachine/presentations) and all the resources for the presentation (code, [LT](http://www.linear.com/designtools/software/#LTspice) [SPICE](http://en.wikipedia.org/wiki/SPICE) simulation, SVGs, etc.) [here](https://github.com/ekolker/fit-2014).]]></content:encoded>
    <wp:post_name>100250783387</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/100161311142</link>
    <pubDate>Thu, 16 Oct 2014 10:45:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[jia huang]]></category>
		<category domain="tag" nicename="jia-huang"><![CDATA[jia huang]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[keen]]></category>
		<category domain="tag" nicename="keen"><![CDATA[keen]]></category>
		<category domain="tag"><![CDATA[keenio]]></category>
		<category domain="tag" nicename="keenio"><![CDATA[keenio]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[integration]]></category>
		<category domain="tag" nicename="integration"><![CDATA[integration]]></category>
		<category domain="tag"><![CDATA[cloud]]></category>
		<category domain="tag" nicename="cloud"><![CDATA[cloud]]></category>
		<category domain="tag"><![CDATA[analytics]]></category>
		<category domain="tag" nicename="analytics"><![CDATA[analytics]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/100161311142</guid>
    <!--<wp:post_id>100161311142</wp:post_id>-->
    <wp:post_date>2014-10-16 7:45:00</wp:post_date>
    <wp:post_date_gmt>2014-10-16 14:45:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessel + Keen.io</title>
    <description></description>
    <content:encoded><![CDATA[#####10/16/2014 – [Jia Huang](http://blog.technical.io/search/jia+huang)

Keen.io is a cloud analytics platform that’s extremely easy to use. It gives an endpoint to hit and logs all data sent to that endpoint as part of an event stream. 

![](https://31.media.tumblr.com/bac21ef098fe5a4eddc87eb927535bb7/tumblr_inline_ndgivxPYWE1s75tgz.png)

We’re excited to finally get it working with Tessel. In the early Tessel firmware/runtime releases we had bugs on our runtime (specifically about zlib decoding/encoding) that prevented their library from working properly.

Those bugs have since been fixed and working with Keen has been a breeze!

In order to use Tessel with Keen first [create an account](https://keen.io/).

Then go on to the projects page and find the project ID & API keys

![](https://31.media.tumblr.com/393166b315a8a4a7ddd3c7f991bb1275/tumblr_inline_ndgiqfORc21s75tgz.png)

Keen has an NPM library that takes in these keys. In order to configure Keen:

<pre>
var Keen = require('keen.io');
var keen = Keen.configure({
    projectId: "####", // swap these out with your own keys
    writeKey: "####",
    readKey: "####"
});
</pre>


As a test script I’ve sent over some data from the Accelerometer up to Keen. This script sets up the Accelerometer on port A of Tessel and sends data up to Keen every second:

<pre>
var Keen = require('keen.io');
var tessel = require('tessel');
// attach the accelerometer to port A
var accel = require('accel-mma84').use(tessel.port['A']);
var count = 0;

console.log("setting up keen...");
var keen = Keen.configure({
    projectId: "####", // swap these out with your own keys
    writeKey: "####",
    readKey: "####"
});

var dataArray = [];
accel.on('ready', function () {
  console.log("Accelerometer is ready!");
  // as we get data push it into an array
  accel.on('data', function (xyz) {
    dataArray.push(xyz);
  });
});

// every second send up all the accelerometer data
setTimeout(function sendData(){
  keen.addEvent("accel", {data: dataArray}, function(err){
    if (err) throw err;

    console.log("Added event #"+count, "data: ", dataArray);
    count++;
    dataArray = [];
    setTimeout(sendData, 1000);
  });
}, 1000);

</pre>

Before running this make sure Tessel is connected to the internet:

``` tessel wifi -n <your_network_ssid> -p <your_network_pw> -s <wpa2|wep>```

The security (`-s`) flag defaults to wpa2.

If the network is unsecure, the password and security flags can be omitted:

```tessel wifi -n <your_network_ssid>```

Tessel should go through the wifi connection process and the yellow LED should be lit after it successfully connects to the internet.

After connecting Tessel to wifi, just do a `tessel run index.js` to run the test script

![](https://31.media.tumblr.com/7f7de7e7816b24d75284672d1ac80311/tumblr_inline_ndgip5jzYk1s75tgz.png)

And we can see the data as it gets pushed to Keen along with a timestamp.

![](https://31.media.tumblr.com/6a65292045f7cc4c839e11913cb4814f/tumblr_inline_ndgiogJqCS1s75tgz.png)

The full code is here: https://github.com/jiahuang/tessel-keen

Let us know what you do with Tessel + Keen!

*See Keen's blog on our integration [here](https://keen.io/blog/100169284156/tessel-keen-node-js-connected-devices-and-custom)*]]></content:encoded>
    <wp:post_name>100161311142</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/100084265042</link>
    <pubDate>Wed, 15 Oct 2014 12:18:02 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[jia huang]]></category>
		<category domain="tag" nicename="jia-huang"><![CDATA[jia huang]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[samr21]]></category>
		<category domain="tag" nicename="samr21"><![CDATA[samr21]]></category>
		<category domain="tag"><![CDATA[zigbee]]></category>
		<category domain="tag" nicename="zigbee"><![CDATA[zigbee]]></category>
		<category domain="tag"><![CDATA[iot]]></category>
		<category domain="tag" nicename="iot"><![CDATA[iot]]></category>
		<category domain="tag"><![CDATA[6lowpan]]></category>
		<category domain="tag" nicename="6lowpan"><![CDATA[6lowpan]]></category>
		<category domain="tag"><![CDATA[microcontroller]]></category>
		<category domain="tag" nicename="microcontroller"><![CDATA[microcontroller]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/100084265042</guid>
    <!--<wp:post_id>100084265042</wp:post_id>-->
    <wp:post_date>2014-10-15 9:18:02</wp:post_date>
    <wp:post_date_gmt>2014-10-15 16:18:02</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Onboarding with the SAMR21 MCU on OSX &amp; Ubuntu</title>
    <description></description>
    <content:encoded><![CDATA[#####10/15/2014 – [Jia Huang](http://blog.technical.io/search/jia+huang)

I started playing with an [Atmel SAMR21](http://www.atmel.com/tools/atsamr21-xpro.aspx) dev kit this weekend. 

![](https://31.media.tumblr.com/0904bb018df36f0121382fe3268e9421/tumblr_inline_ndghxbfrF21qghbqy.png)

Atmel recently released the SAMR21 series. It combines everything good about the SAMD21 series (USB controller, low power cortex M0+ architecture) and the [AT86RF233](http://www.atmel.com/devices/at86rf233.aspx) (802.15.4 wireless radio). 802.15.4 is the standard for low power IoT devices using Zigbee and 6loWPAN (IPV6 for IoT, primarily used for mesh networks). 

So instead of having to use two chips (one for the logic and one for the wireless communications), both silicon wafers are put on one package:

![](https://31.media.tumblr.com/0b6f1ac5f03ad1d815c2a5adf8bd68dc/tumblr_inline_ndghy1fuDh1qghbqy.png)

Besides the main SAMR21 chip, the dev board has on it:

* Another chip that acts as the embedded debug chip. This allows us to load code and use gdb to debug hardware without having to buy an expensive JTAG debugger. Instead we can just plug the board into a USB port and start hacking.
* Two antennas. One is a chip antenna, and the other is an external antenna. During development we can switch between the two for different applications.
* The usual assortment of LEDs & buttons that comes with every dev board.

If you just want to get the code running, here’s the final github repo with build & deploy instructions on OSX & Ubuntu: [https://github.com/jiahuang/samr21-xplained-pro](https://github.com/jiahuang/samr21-xplained-pro). 

###Getting the example code

As usual, the default example code that the chip manufacturer gives is a bit convoluted. As of Oct 2014, the only example on the SAMR21 Xplained Pro page is [this project for doing FCC tests](http://www.atmel.com/tools/atsamr21-xpro.aspx?tab=documents), though Atmel has a few more examples from the actual [ATSAMR21G18A page](http://www.atmel.com/tools/ATMEGA256RFR2-XPRO.aspx?tab=documents). 

The FCC test example goes through some radio emissions so that the Federal Communications Commission (FCC) can certify that the radio isn’t emitting in frequencies it’s not supposed to. The FCC test example that Atmel gives isn’t a good choice for a starting program since I can’t easily tell if it’s working or not.

But I went ahead and used [the FCC test program](http://www.atmel.com/images/Atmel-42373-Transmitter-Test-with-Remote-Start_ApplicationNote_AT10216.zip) anyway because I thought that it might have some pin-specific configs for the Xplained board. Those pin configs would help me identify and get started with the LEDs & buttons, at the very least. 

###Making it do something I can see

My first goal was to get something working on the board. That way I could verify that I had a working programming & debugging environment for more complicated examples. Often I find that simple things like Makefiles aren’t configured properly in example code.

Blinky lights are the “Hello world” of hardware, so I modified the example FCC tester code to blink the LED on and off instead. 

In order to blink the LED, I had to find the program’s entry point. I had hoped for a `main.c` file, but the folder structure for Atmel’s test program is:

<pre>
fcc_test_r21/
  LwMesh_1_2_1/ 
    apps/
       Peer2Peer/ # main application
         astudio/ # AVR studio files
         linker/ #linker files used during compilation
         make/ #makefiles for the different boards
         config.h
         fcc_test_dut.c 
     doc/ #pdf files for explaining Atmel’s Light Weight Mesh protocol
     hal/ #the Hardware Abstraction layer. Useful because this application is for multiple boards
     phy/ #the physical layer. This is code specific to the radio.
     service/ # unused
     sys/ #system files, stuff like timers, clock config, and timers.
     tools/ # Also unused. 
</pre>

I ended up grepping for a `main(void)` function, found that it’s in the counterintuitively named `fcc_test_dut.c` file, and put in some blinky code:

<pre><code>
void delay_s(uint32_t time) {
	for (int i = 0; i  100*time; i++) {
	    // this delay is in us 
	    HAL_TimerDelay(10000);
  	}
 }

 int main(void)
 {
  SYS_Init();
  HAL_UartInit(38400);
  HAL_LedInit();
  while (1)
  {
  	HAL_LedOn(0);
  	delay_s(1);
  	HAL_LedOff(0);
  	delay_s(1);
  }
}
</code></pre>


###Building the program

Atmel has nicely included all the makefiles for their various boards so that I can build using GCC.

<pre>
>> ls LwMesh_1_2_1/apps/Peer2Peer/make
Debug
Makefile_Rcb128rfa1_ATmega128rfa1
Makefile_Rcb231_ATmega1281_Rf231
Makefile_Rcb256rfr2_ATmega256rfr2
Makefile_XplainedPro_ATSAMD20_Rf233
Makefile_XplainedPro_ATSAMR21
Makefile_XplainedPro_ATmega256rfr2
Makefile_Xplained_ATxmega128b1_Rf212
Makefile_Xplained_ATxmega128b1_Rf231
Makefile_ZigBit_ATmega1281_Rf230
</pre>

The makefile requires the [gcc-arm compiler](https://launchpad.net/gcc-arm-embedded). 

This is the same compiler we use for Tessel, and during Tessel’s development we made a brew tap to install it on our machines. We can use the same brew tap to install the tools needed for compiling the SAMR21 code.

<pre>
brew tap tessel/tools
brew install gcc-arm
</pre>

On Ubuntu, get gcc-arm from [Terry Guo’s PPA](https://launchpad.net/~terry.guo/+archive/ubuntu/gcc-arm-embedded):

<pre>
sudo add-apt-repository ppa:terry.guo/gcc-arm-embedded;
sudo apt-get update;
sudo apt-get install gcc-arm-none-eabi;
</pre>

With these tools, I could now build the makefile: `make -f Makefile_XplainedPro_ATSAMR21`

Remember the counterintuitively named `fcc_test_dut.c` file? Turns out at one point the program files were properly named the application name (as `Peer2Peer.c`) before being changed to `fcc_test_dut.c` because the makefile still looks for it:. 

<pre>
> make -f Makefile_XplainedPro_ATSAMR21
...
arm-none-eabi-gcc: error: ../Peer2Peer.c: No such file or directory
arm-none-eabi-gcc: fatal error: no input files
</pre>

The makefile also uses a `gmkdir` command that should just be a `mkdir`. 

I ended up modifying the makefile to fix these and the build succeded.

<pre>
> make -f Makefile_XplainedPro_ATSAMR21
size:
   text	   data	    bss	    dec	    hex	filename
   4776	      0	   1888	   6664	   1a08	Debug/Peer2Peer.elf
   4776	      0	   1888	   6664	   1a08	(TOTALS)
</pre>

###Configuring OpenOCD

[OpenOCD](http://openocd.sourceforge.net/) is an open source chip debugger. It allows me to do “on-chip” debugging, stuff like looking at registers, setting breakpoints, loading code, etc.

As of the current release (v0.8.0) OpenOCD does not have configurations for the SAMR21 chip, but it's already in their master branch. In order to get it, rebuild from master. When it releases, v0.9.0 should have these configs by default.

On OSX:

<pre>
brew install openocd --HEAD
</pre>

On Ubuntu:

<pre>
git clone https://github.com/ntfreak/openocd.git;
cd openocd;
./bootstrap;
./configure;
make;
sudo make install;
</pre>

Now running `openocd --version` should show something like:

<pre>
> openocd --version
Open On-Chip Debugger 0.9.0-dev-snapshot (2014-10-05-17:42)
</pre>

OpenOCD uses `.cfg` files to [set up configs](http://openocd.sourceforge.net/doc/html/Config-File-Guidelines.html#Config-File-Guidelines) for the type of board that it’s programming/debugging. The config file specifies things like how the chip is programmed, the interface used to do the programming, and the specifications of the MCU. 

In the make folder I added a `tools/samR21.cfg` file to tell OpenOCD what to do:

<pre>
#samR21.cfg
source [find interface/cmsis-dap.cfg]

# chip name
set CHIPNAME at91samr21g18

source [find target/at91samdXX.cfg]

$CHIPNAME.cpu configure -event gdb-attach {
   echo "halting"
   halt
}
</pre>

This tells OpenOCD to use cmsis-dap as its programming interface, and that the chip being programmed is a samr21. Once gdb attaches, I halt the microcontroller to prevent any code from being run. Having a halt as a first step is useful for debugging later if I want to set up breakpoints at the start.

### Loading up the program

By then I had:

* the built binary (Peer2Peer.elf)
* the OpenOCD config file (samR21.cfg)

Now I could run GDB on the dev kit with OpenOCD:

`arm-none-eabi-gdb Debug/Peer2Peer.elf -ex 'target remote | openocd -c "gdb_port pipe;" -f tools/samR21.cfg'`

Once GDB attached, I ran the `load` command to load up the `elf` into flash.

![](https://31.media.tumblr.com/e3cecbf333078695cbb3aa3bbbd4492e/tumblr_inline_ndghzlORwm1qghbqy.png)

The load command loads up the `.elf` file I specified earlier in the `arm-none-eabi-gdb` command.

After this is loaded, the board is put in a halted state again so I could attach breakpoints if I wanted. In order to run the code, I had to issue the “continue” command (c for short).

![](https://31.media.tumblr.com/69bcfb85f5ea9b1ab10a3f254e0e6b9f/tumblr_inline_ndgi3dSnJ31qghbqy.png)

And it blinks!

![](https://31.media.tumblr.com/6f8fbc393bd82d777ddc01afeba56f99/tumblr_inline_ndgiilG4RE1s75tgz.gif)

The modified example code is up [on github](https://github.com/jiahuang/samr21-xplained-pro).

Next up, putting two of these things together and getting them talking over 6loWPAN!]]></content:encoded>
    <wp:post_name>100084265042</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/100031936517</link>
    <pubDate>Tue, 14 Oct 2014 19:32:18 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[research]]></category>
		<category domain="tag" nicename="research"><![CDATA[research]]></category>
		<category domain="tag"><![CDATA[r&d]]></category>
		<category domain="tag" nicename="rd"><![CDATA[r&d]]></category>
		<category domain="tag"><![CDATA[fractal]]></category>
		<category domain="tag" nicename="fractal"><![CDATA[fractal]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[modules]]></category>
		<category domain="tag" nicename="modules"><![CDATA[modules]]></category>
		<category domain="tag"><![CDATA[suggestions]]></category>
		<category domain="tag" nicename="suggestions"><![CDATA[suggestions]]></category>
		<category domain="tag"><![CDATA[6lowpan]]></category>
		<category domain="tag" nicename="6lowpan"><![CDATA[6lowpan]]></category>
		<category domain="tag"><![CDATA[wifi]]></category>
		<category domain="tag" nicename="wifi"><![CDATA[wifi]]></category>
		<category domain="tag"><![CDATA[ble]]></category>
		<category domain="tag" nicename="ble"><![CDATA[ble]]></category>
		<category domain="tag"><![CDATA[bluetooth]]></category>
		<category domain="tag" nicename="bluetooth"><![CDATA[bluetooth]]></category>
		<category domain="tag"><![CDATA[biosensing]]></category>
		<category domain="tag" nicename="biosensing"><![CDATA[biosensing]]></category>
		<category domain="tag"><![CDATA[proto-module]]></category>
		<category domain="tag" nicename="proto-module"><![CDATA[proto-module]]></category>
		<category domain="tag"><![CDATA[diy]]></category>
		<category domain="tag" nicename="diy"><![CDATA[diy]]></category>
		<category domain="tag"><![CDATA[soil moisture]]></category>
		<category domain="tag" nicename="soil-moisture"><![CDATA[soil moisture]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/100031936517</guid>
    <!--<wp:post_id>100031936517</wp:post_id>-->
    <wp:post_date>2014-10-14 16:32:18</wp:post_date>
    <wp:post_date_gmt>2014-10-14 23:32:18</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>A Peek at Technical Machine's Plans</title>
    <description></description>
    <content:encoded><![CDATA[#####10/14/2014– [Updates](http://blog.technical.io/search/update)

We've been talking to a lot of customers recently and brainstorming what our next most important projects are. As of today, much of this is now in R&D, and we want to keep you apprised.

Taking prototypes into production is very difficult, almost occult. We're reinventing this process with a new project called **Fractal**. Our vision is a tool to create **software-defined hardware**– helping automate the prototyping process, reducing work duplication, and allowing for transparency through the whole design process. You can read more about our progress so far [here](http://technical.us7.list-manage.com/track/click?u=f32fc2fe1a1f2c3463a081e4b&id=c6c99c42af&e=8ef55c3e20). We'll be publishing more on this soon, and reach out to us if you want to learn more.

Variations on next-generation Tessel research and development are in the works. Currently, we’re investigating a few smaller development targets: **6LoWpan, Wifi, BLE, and 3G connectivity**. Expect to see more detailed product announcements within the next several months.

Also in the pipeline are **new Tessel modules**! Here are some we've been working on, based on user suggestions:

* A proto-module: a solderable module to make it easy to add your own capabilities to Tessel. This will be accompanied by some documentation about how to make your own module.
* A soil moisture sensing module.
* A biosensing module.

_What would you like to see next? Suggest modules [here](http://technical.us7.list-manage.com/track/click?u=f32fc2fe1a1f2c3463a081e4b&id=0f5f0b2a6a&e=8ef55c3e20)!_

Beyond research and development, here's how we've been spending our time:

* Events, workshops, and hackathons
* Re-released the GPS module into the store
* Talking with potential international distributors
* Runtime improvements
* Hiring [(interested?)](http://technical.us7.list-manage.com/track/click?u=f32fc2fe1a1f2c3463a081e4b&id=7aa0a2d71a&e=8ef55c3e20)
* Compiler improvements
* Soliciting user feedback
* Working on our pitch deck
* Support, as always
* Wifi improvements
* Got a 6LoWPAN chip running (R&D)
* Got closer to merging in LuaJIT

We have a blog post up with various conferences and events that have a connection to Tessel– if you’re doing a Tessel-related talk or event, contact [kelsey@technical.io](kelsey@technical.io) and she’ll add you!

All the best,<br/>
Jon, Tim, Kelsey, Jia, Kevin, Ken, and Eric]]></content:encoded>
    <wp:post_name>100031936517</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/99417337097</link>
    <pubDate>Tue, 07 Oct 2014 14:24:06 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[community]]></category>
		<category domain="tag" nicename="community"><![CDATA[community]]></category>
		<category domain="tag"><![CDATA[feedback]]></category>
		<category domain="tag" nicename="feedback"><![CDATA[feedback]]></category>
		<category domain="tag"><![CDATA[backers]]></category>
		<category domain="tag" nicename="backers"><![CDATA[backers]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/99417337097</guid>
    <!--<wp:post_id>99417337097</wp:post_id>-->
    <wp:post_date>2014-10-07 11:24:06</wp:post_date>
    <wp:post_date_gmt>2014-10-07 18:24:06</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Community Feedback</title>
    <description></description>
    <content:encoded><![CDATA[#####10/7/2014– [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

In order to be successful, a startup needs to know its customers. The company needs to talk to users, try to understand their needs, and react accordingly.

I’ve talked to a lot of our customers, largely because I’ve been taking lead on support since we started shipping product. But most of the time, I’m talking to prospective customers, customers who have questions about the delivery of their packages, and the self-selecting few who reach out to the team.

Jon decided, sometime in September, to individually email 100 users and personally ask for their thoughts. I decided to follow up Jon’s effort with one of my own: I sent out over 500 individual requests for feedback to our early backers, asking them what they thought of Tessel so far, what they’d made, and what they might like to see in the future.

### Requesting feedback

I sent the emails out one at a time, and adjusting the wording a bit where I could; if I’d had previous contact with a customer, I’d try to follow up on that interaction. I tried changing around my tone so I wouldn’t sound automated. Ultimately, I did everything I could think of to invite genuine conversation and useful feedback.

Around 16% of the people I emailed responded. Where useful and appropriate, I kept up the conversation. For some respondents, feedback requests funnelled into support, tracking down packages or finding examples and documentation. Others had very specific ideas for our company direction, and I discussed with them individual use cases and specific design concepts they needed.

### Understanding responses

In order to keep track of the body of correspondence, I worked through the whole process in Zendesk. I tagged each email that I sent with one tag, and had Zendesk automatically add another if a customer responded. I could then add my own tags to try and break down response types.

With one set of tags, I broke user reaction into five mutually exclusive categories:

* Has not yet used Tessel
* Happy with Tessel
* Has not yet received Tessel
* Unhappy with Tessel
* No opinion stated


I also added a set of descriptive tags for things I saw mentioned regularly:

* Has run across bugs
* Hasn't used Tessel much
* Called out first run experience as good
* Has plans for big projects
* Called out docs as good
* Doesn't know what to do next
* Seems to have hardware experience
* Developing a product
* Using Tessel in education
* Using Tessel in a workplace setting

My tagging wasn’t rigorous enough to merit statistical analysis, but it was useful to pull out these specific, common reactions. However, these lists are in order from most frequent to least.

I also pulled out quotes of specific feedback from emails, for example describing a use case or project, or details regarding a desired case or module. These, I collected in another sheet. After pulling out quotes, I categorized them thematically (e.g. “cases”, “product development”, etc.). If a specific piece of feedback spanned multiple categories, I broke it out onto multiple lines, to keep the feedback focused. This let me grow themes from feedback snippets in an organic way.

The feedback quotes were extremely useful. By filtering for different categories, it’s now easy to see several views on how people feel about our documentation, or about Tessel’s performance. Keeping the original wording and context also has great value; the way a user talks about a feature gives insight into their expertise in hardware and software.

Interestingly, the key themes were different in this set than the specific reactions I’d tagged:


* Modules
* Product
* Ease of Use
* Cases
* Project
* Compatibility and Integration
* Performance
* Documentation
* Remote deploy
* Features
* Size
* Powering Tessel
* Cables
* Tessel 2
* Education

Of course, I must again stress that the feedback from these categories was specific and often conflicting. But even when reduced to mere categories, it highlights what’s on our users’ minds.

### Taking it to the team

Feedback from users should be pervasive in a startup, especially one as small as we are. So I took this distilled version of the many feedback response emails, sent it to the team, and scheduled a discussion.

Everyone read through the feedback, then we opened the meeting with each person silently writing post-its of the things that stood out or surprised them. We then followed up by trying to identify the strongest user needs.

The two strongest areas that stood out were:

* Users felt the need to make a “final” project: in the form of a case, a specific form factor, external power, etc. They felt that this need was not yet met.
* Users were often unsure where to go next. Nearly all agreed that the first run experience was excellent, and were impressed by how quickly they could get a light blinking and a sensor collecting data. However, they weren’t sure how to take next steps– say, combining different modules, using the GPIO port, or taking ideas closer to productization.

There were also some less abstract and very clear wants:

* More modules– though there were few repeats on requests for specific modules. (We have a module suggestion form [here](https://docs.google.com/forms/d/1DZIgW97Cg4CkrgSBuP9O8mABSV7aX1EOF5Gjs3DKMR8/viewform) if you’d like to weigh in)
* Cases– ideally with a power source built in
* Remote deployment of code

![](https://31.media.tumblr.com/37676721f24420c2e4dd5b9ad22a47d8/tumblr_inline_nd36zspEEk1s75tgz.png)

We continued to discuss for an hour or two, putting our company plans and vision in the context of user feedback. Ultimately, I think we’re headed in the right [direction](http://blog.technical.io/post/98840892607/the-unintended-cost-of-shipping), but it’s useful to factor user needs into the current design phase for the specifics of features and interface.

I’d also like to call out a bit of specific follow-up:

* [Tim](https://twitter.com/timcameronryan) is taking point on a docs page redesign. We’re hoping to make it more navigable and complete, and to add more tutorials in the vein of start.tessel.io.
* [Kelsey](https://twitter.com/SelkeyMoonbeam) and [Jon](https://twitter.com/jonmckay) will be working together to put up a page offering support for those of you who want to take your prototype and turn it into a product. (But don’t wait for the page to go up; email [team@technical.io](mailto:team@technical.io) if you’d like to discuss.)
* [Eric](https://twitter.com/twiddlee) is working on more modules. He’s also working on a way to make hardware components of tessel more modular, such that we might be able to scale a PCB that’s more specific to a given use case.
* [Jia](https://twitter.com/jia) and [Eric](https://twitter.com/twiddlee) have been working with manufacturers to produce module extension cables. We’re making sure the quality is good before we mass produce and sell them.
* [Ken](https://twitter.com/nplus11) is working on bug fixes and compatibility issues.
* [Jia](https://twitter.com/jia) is working on Wifi bug fixes.
* [Kevin](https://twitter.com/kevinmehall) is working on Fractal, which should help streamline product development. It’s [under development](https://github.com/technicalmachine/fractal-docs).
* [Kelsey](https://twitter.com/SelkeyMoonbeam) will look into modular case solutions.

We really appreciate your feedback! If you’d like to add your opinion, I’m listening: [kelsey@technical.io](mailto:kelsey@technical.io)]]></content:encoded>
    <wp:post_name>99417337097</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/98930010967</link>
    <pubDate>Wed, 01 Oct 2014 20:11:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[events]]></category>
		<category domain="tag" nicename="events"><![CDATA[events]]></category>
		<category domain="tag"><![CDATA[conferences]]></category>
		<category domain="tag" nicename="conferences"><![CDATA[conferences]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/98930010967</guid>
    <!--<wp:post_id>98930010967</wp:post_id>-->
    <wp:post_date>2014-10-01 17:11:00</wp:post_date>
    <wp:post_date_gmt>2014-10-02 00:11:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessel Near You: Events and Conferences</title>
    <description></description>
    <content:encoded><![CDATA[Some of the events we’ll be at this season– come find us! We'll have Tessels you can play with:

* 10/6 [Foro Inovación Tecnología](http://fit.galileo.edu/) Guatemala – hang out with [Jon](https://twitter.com/jonmckay) and [Eric](https://twitter.com/twiddlee)
* 10/13 [Dreamforce](http://www.google.com/url?q=http%3A%2F%2Fwww.salesforce.com%2Fdreamforce%2FDF14%2F&sa=D&sntz=1&usg=AFQjCNHd4F9lTz2WGFzg2ifIF5OSpvMyKA) San Francisco, CA – [Kelsey](https://twitter.com/SelkeyMoonbeam) and [Jia](https://twitter.com/jia) will have a booth
* 10/23 [Fullstack](https://skillsmatter.com/conferences/6361-fullstack-node-and-javascript-conference) London – [Kelsey](https://twitter.com/SelkeyMoonbeam) will be speaking and hosting a hardware hack day.
* 10/25 [Mozfest](http://2014.mozillafestival.org/) London – [Kelsey](https://twitter.com/SelkeyMoonbeam) will miss the first day, but she'll be there for the other two days!
* 11/4 [GOTO](http://gotocon.com/berlin-2014) Berlin – [Jon](https://twitter.com/jonmckay) is giving a talk
* 12/6 [RobotsConf](http://2014.robotsconf.com/) Florida – [Tim](https://twitter.com/timcameronryan) and [Eric](https://twitter.com/twiddlee) will be manning a tableful of Tessels.

Events we won’t be at, but Tessels will:

* [PragueJS](http://www.praguejs.cz/) in the Czech Republic has a presentation by [Ladislav](https://twitter.com/abtris) lined up for October 23rd.
* [CampJS](http://campjs.com/) 10/31-11/3 in Australia looks like an amazing event. We wish we could go, but [Glen](https://twitter.com/garrows) has kindly agreed to run a workshop with quite a number of Tessels at the event.
* Node One-Shot in Budapest (11/20) is running a Tessel [Nodebots meetup](http://www.meetup.com/nodebp/events/208743332/) hosted by the marvelous [Matteo](https://twitter.com/matteocollina)
* [MLH](http://mlh.io/) Hackathons USA have Tessels as part of their hardware library all fall.
* [CodeMash](http://www.codemash.org/) in Ohio in early January features a talk about Tessel by [Adam](https://twitter.com/cabarney).

Other ways to play with Tessels near you:

* [APIs to Electrons](http://www.meetup.com/APIs-to-Electrons/) Berkeley/San Francisco, CA has regular meetups along the spectrum of web development to hardware.
* [Melbourne Tessel Enthusiasts](http://www.meetup.com/Melbourne-Tessel-Enthusiasts/) Australia looks like a cool group!

Want to host your own Tessel-related meetup or event? We’d like to help! Reach out to [kelsey@technical.io](mailto:kelsey@technical.io)

*Also send me an email if you're giving a Tessel talk or workshop and would like me to list you here!*]]></content:encoded>
    <wp:post_name>98930010967</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/98840892607</link>
    <pubDate>Tue, 30 Sep 2014 18:59:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[motivation]]></category>
		<category domain="tag" nicename="motivation"><![CDATA[motivation]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
		<category domain="tag"><![CDATA[vision]]></category>
		<category domain="tag" nicename="vision"><![CDATA[vision]]></category>
		<category domain="tag"><![CDATA[reinvigorate]]></category>
		<category domain="tag" nicename="reinvigorate"><![CDATA[reinvigorate]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[scaling]]></category>
		<category domain="tag" nicename="scaling"><![CDATA[scaling]]></category>
		<category domain="tag"><![CDATA[node]]></category>
		<category domain="tag" nicename="node"><![CDATA[node]]></category>
		<category domain="tag"><![CDATA[prototyping]]></category>
		<category domain="tag" nicename="prototyping"><![CDATA[prototyping]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/98840892607</guid>
    <!--<wp:post_id>98840892607</wp:post_id>-->
    <wp:post_date>2014-09-30 15:59:00</wp:post_date>
    <wp:post_date_gmt>2014-09-30 22:59:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>The Unintended Cost of Shipping</title>
    <description></description>
    <content:encoded><![CDATA[#####9/30/2014– [Jon McKay](http://blog.technical.io/search/jon+mckay)

*Note: The opinions voiced in this retrospective are Jon’s. Other Technical Machine team members may or may not share the same thoughts.*

### The Low Point

Anyone who has started a company will inevitably tell you “it’s an emotional rollercoaster”. True to the maxim, Technical Machine hit its first real valley just after we shipped Tessel, a crowdfunded, JavaScript programmable microcontroller platform. The months of June and July at Technical Machine were the most difficult times I’ve experienced as both an engineer and as a CEO. 

We had some legitimate problems: when we shipped we had nearly a third of customers contact us with fulfillment issues, we missed a critical GPS module hardware issue, and most of our software testing infrastructure was decrepit when we shipped rushed code, to name a few. But those issues aren’t difficult to solve. Those issues have been more or less fixed with a combination of engineering time and money.  

But we had a scarier issue: our motivation to keep pushing was dwindling. Before shipping, we had this single, unifying, direction-full goal of getting this novel product out the door. But after Tessel was in the hands of users, all there was to do was feel burnt out from the 16 hours days, fix those difficult bugs that had been haunting us (and now our customers) for months, and try to track down lost shipments. Sure, there was the joy of hearing from our customers how much they loved our getting started experience but, between those snippets, it was hard to not feel demoralized. Surely, there had to be more to it than this?

During my one-on-one meetings with everyone on the team, they each independently explained that they felt that we were now directionless. Why wasn’t I providing more direction for the company? “We need to be working on the next thing by now”, they all said. What was the grand vision for Technical Machine?

The truth was, I didn’t have one yet. I felt that this was our time to learn as much as we could from our product being released into the wild. I thought that the future of our company depended on what our customers taught us about how they build hardware with Tessel. 

It turns out, as is usually the case, I was partially right and mostly wrong.

### The Cause

We started Technical Machine with the idea that developing hardware should be as easy for a web developer as deploying to a server. Whether or not it’s possible, it is an ambitious technical and social engineering challenge. These types of lofty goals attract the type of people that want to work on very hard, unsolved problems every single day. We were all comfortable working towards solving looming, unanswered technical questions. But after we shipped Tessel, there weren’t many architectural questions left. We had proven that JavaScript and Node on microcontrollers could make for a great prototyping experience; all that was left was (a lot) of polish. 

Myself excluded, the entire team consisted of “research-heavy” engineers. Engineers who want to build entirely new things as quickly as possible and aren’t as interested in polish. Nobody on our team strongly identified as the type of engineer who likes to sit down and make a code base shine. The desire to fix bugs and maintain the product after it was released was not as high as developing a prototype to begin with. 

To compound the problem, we had little testing infrastructure in place while developing Tessel, so our product was buggier than it could have been (an artifact of having just graduated from college, where testing code was rarely discussed or practiced).

 In short, there were more bugs to fix and nobody interested in fixing them. Asking our engineers to continue preening over our existing code base after months of working on it wasn’t making anyone happy or productive.

At this point, we had two related but distinct issues: the company had little sense of direction, and what we did have to work on wasn’t making anyone excited to come in to work. 

### The Lessons

In an effort to give our company more direction, we started having long brainstorming sessions about what we wanted to build and where we wanted the company to go. We talked about what we had learned from customers using Tessel in the wild. We talked about what we were interested in as individuals. 

Ultimately, we arrived at a couple of key points:

* Prototyping tools and manufacturing tools have traditionally been disjointed. There has always been a leap from the device that proves out the viability of an idea and the device that eventually gets to market. Creating a sustainable funnel for customers to progress from prototype to a product at scale is a business opportunity worth pursuing.
* As a company, we’d like to head further away from the toy/hobbyist market and closer to being a trusted provider of embedded hardware tools – not just for web developers but eventually electrical engineers and seasoned product developers as well.
* We’re not interested in being another hardware platform that succumbs to building the “IoT cloud” to rule them all. We feel that, while cloud platforms have their intricacies, the technical and social engineering challenges are not appealing. 
* Tessel’s getting started experience is top-notch. Integrating npm with the hardware modules provides for (in our opinion) the fastest prototyping platform available. Users could go from unboxing with no hardware experience to serving pictures from the camera module in a web app in under 5 minutes. It’s important to us to continue enabling that type of interaction.
* While we do believe Tessel is the best way to prove out an idea’s viability, it leaves the user further from a technical prototype than they could be if they used other hardware platforms like Arduino or Launchpad. Working in JavaScript and Node land doesn’t scale well in hardware because of the unavoidable consequence of working with components that are overpowered. 

### Focusing our attention on Scalability

We reframed the problem as “How can developers leverage the speed of development of JavaScript and Node while still making the transition to a technical prototype as simple as possible?”. In order to get an idea of the areas of opportunity in the space, we drew up a checklist of all the task items that have to be complete before a developer is ready to ship a product (the topic of an upcoming blog post) to get a better idea of where we can add value. 

Based on what we’ve heard from users of Tessel, one of the most important and opaque transition points from the “idea viability” stage to the “technical prototype” stage is picking out the actual components (integrated circuits, sensors, etc.) that are to be used in the final design. 

We held quite a few brainstorming sessions as a whole team but didn’t make much progress until Kevin, Eric, and I were casually discussing the hardware development process. 

![](https://31.media.tumblr.com/3999ddbd1418e327b8f3011679305c08/tumblr_inline_ncql5qTiZk1s75tgz.png)

Kevin, our lead firmware engineer and previously a co-founder of a hardware tools company called [Nonolith Labs](http://www.nonolithlabs.com/), started explaining an idea he had for how hardware development should be done. I’m not sure how much of it was formed before our brainstorming meeting, but it came out in a fairly cohesive stream. Kevin's idea was largely focused on software defining hardware interfaces in such a way that it becomes possible to automatically generate more components of a hardware device.

Imagine embedded hardware development as being composed of six levels of abstraction:

1. Data Flow: A description of how data flows between different inputs (sensors) and output (network) blocks, as well as code blocks (JS, Rust, C, etc.) of various languages.

2. Firmware: A verbose and precise description of machine-readable code that dictates how the hardware works at the lowest level to allow that flow of information. Boilerplate configuration code, for example, setting up registers to communicate with external memory, can be autogenerated if parts are known. 

3. Part Selection: The actual integrated sensors and integrated circuits that comprise the system. There is a dependency between the code that is generated and the microcontroller that is used. 

4. Schematic: How the pins should be connected together. If parts are known, then this becomes an datasheet scraping problem. 

5. PCB: How components are physically laid out on a circuit board. If a schematic is known and context of each signal is known (is this power, ground, a high speed usb signal, RF signal, etc.), then a PCB becomes easier to automatically route. Auto routing has traditionally been considered a bad practice and nobody has done it well yet.

6. Manufacturing: Who actually manufactures the PCB and/or assembles the parts.

In theory, the hardware development process could be described from any of the above levels of abstraction (besides manufacturing) and a circuit board could be generated as precisely as it was described. Each level of the process should be optimizable so that a seasoned firmware engineer could tweak the firmware or an electrical engineer could add necessary passive components and modify the size of any sensitive traces.

The idea of “software defined hardware” resonated with the team as a solution space worth attacking. An accessible but powerful hardware development tool that would take years of development work aligned very well with the personal interests of everyone on the team. The question turned from “what are we building next?” to “how do we approach such a giant, complicated system?” Once we we were able to frame the problem around solid technology choices that could accomplish the goal of “software defined hardware”.

As a first step towards that goal, we’d like to enable a user to program a single application in both low-level and high-level languages. This means developers can prototype an idea quickly in JavaScript, and if it proves viable, start breaking the component parts into C or Rust. It’s a much easier path to a technical prototype than starting from scratch when moving to a technical prototype. 

Tessel is just the first development board which would be the target of this new hardware development tool. Over time, we hope more and more microcontroller targets will be contributed so that our open source tool can extend past just the Tessel ecosystem. We’ll be releasing more information about this new tool as we start speccing it out. 

### Maintaining Tessel

As for maintaining Tessel’s architecture, we’ve made a huge amount of progress. By having each person in the company split their time between working towards these new engineering goals and working on maintaining the released Tessel platform, we’ve reinvigorated our collective enthusiasm for our vision. We’ve also started hiring people who would be well-suited for support positions. In that vein, we’ve hired Ken, who is one of the most patient and detail-oriented people I know, to work on improving Tessel’s JS and Node compatibility. We’ve also hired an external contractor to work on some of the finer points of JS compatibility like [the unicode implementation](https://github.com/tessel/runtime/pull/137).

### Unanswered Questions

We’re really excited about our new direction but we still have a few questions to answer:

* Who are our customers? Tessel’s customers are usually web developers interested in hardware. But now that we’re starting to prototype tools for the wider user group of product developers, how do we market our product and who do we approach about user research? We also need to gather more information about how much of our current customer base is interested building scalable devices and how many are building one-off solutions.
* Is this user group big enough and growing fast enough to be sustainable? Tessel itself hasn’t yet answered the question of how big the group of hardware-interested web-developers really is and it’s unlikely that traditional product developers will use our system until it’s more proven.
* How do we go about automating the “human” parts of hardware development? The deals with manufacturers and working with suppliers, smoothing out issues with contract manufacturers, and debugging issues with field application engineers all currently require face to face interactions. 


### Going Forward

We’re continuing to dish out more Node and JavaScript compatibility for Tessel and make WiFi more robust. We’re pushing forward with enabling more programming languages on Tessel, enabling more microcontrollers and microprocessors to take advantage our runtime, and looking into more diverse wireless hardware. We’ve released the [Project Portal](projects.tessel.io) to share Tessel-based projects and we’re working on remote code deployment. More and more Node Modules are starting to work out of the box, like [Twilio](https://www.twilio.com/blog/2014/09/building-a-sleep-tracker-for-your-dog-using-tessel-and-twilio.html) and [MQTT](http://blog.technical.io/post/98339010407/mqtt-on-tessel).

We’ve still got a lot of work to do before we start making the hardware development experience we’ve been dreaming up. In the past year we’ve learned a ton about what it means to build a company but we need to start talking to users to get these new questions answered. If you have experience or suggestions you’d like to share, please email me at jon@technical.io. I’d love to hear it.

We also have [open, full-time positions](https://angel.co/technical-machine/jobs) that we’re hiring for, including web developers, HR/recruiting, business development, and firmware engineers. If you’d like to contribute to our vision of reimagining hardware development, don’t hesitate to reach out!]]></content:encoded>
    <wp:post_name>98840892607</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/98339010407</link>
    <pubDate>Wed, 24 Sep 2014 18:25:14 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[mqtt]]></category>
		<category domain="tag" nicename="mqtt"><![CDATA[mqtt]]></category>
		<category domain="tag"><![CDATA[js]]></category>
		<category domain="tag" nicename="js"><![CDATA[js]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[node]]></category>
		<category domain="tag" nicename="node"><![CDATA[node]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[temperature]]></category>
		<category domain="tag" nicename="temperature"><![CDATA[temperature]]></category>
		<category domain="tag"><![CDATA[home automation]]></category>
		<category domain="tag" nicename="home-automation"><![CDATA[home automation]]></category>
		<category domain="tag"><![CDATA[climate]]></category>
		<category domain="tag" nicename="climate"><![CDATA[climate]]></category>
		<category domain="tag"><![CDATA[jon]]></category>
		<category domain="tag" nicename="jon"><![CDATA[jon]]></category>
		<category domain="tag"><![CDATA[mckay]]></category>
		<category domain="tag" nicename="mckay"><![CDATA[mckay]]></category>
		<category domain="tag"><![CDATA[matteo]]></category>
		<category domain="tag" nicename="matteo"><![CDATA[matteo]]></category>
		<category domain="tag"><![CDATA[collina]]></category>
		<category domain="tag" nicename="collina"><![CDATA[collina]]></category>
		<category domain="tag"><![CDATA[mqtt.js]]></category>
		<category domain="tag" nicename="mqttjs"><![CDATA[mqtt.js]]></category>
		<category domain="tag"><![CDATA[node.js]]></category>
		<category domain="tag" nicename="nodejs"><![CDATA[node.js]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/98339010407</guid>
    <!--<wp:post_id>98339010407</wp:post_id>-->
    <wp:post_date>2014-09-24 15:25:14</wp:post_date>
    <wp:post_date_gmt>2014-09-24 22:25:14</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>MQTT on Tessel</title>
    <description></description>
    <content:encoded><![CDATA[#####9/24/2014– [Jon McKay](http://blog.technical.io/search/jon+mckay)

### Using MQTT on Tessel

[MQTT](http://mqtt.org/) is a lightweight publish/subscribe protocol designed for machine to machine communication. The architecture features one central server that manages the subscriptions and publications from each of its numerous clients. Clients can publish data without having to be aware of who is subscribed (much like Node’s EventEmitter class).

![](https://31.media.tumblr.com/3cfc9aab7d858849977153a2a7c82192/tumblr_inline_ncf86p6VMZ1s75tgz.jpg)

*source: [Eurotech](http://www.eurotech-inc.com/mqtt-protocol-for-data-delivery.asp)*

MQTT is also designed to require minimum protocol overhead for each packet in order to preserve bandwidth for resource-constrained embedded devices. It’s a really simple framework for managing mesh networks of TCP-enabled devices.

### Tessel-MQTT Compatibility Backstory

As far as I could tell, there is only one MQTT implementation in Node (surprising, right?!) and it’s really well maintained. Up until a few weeks ago, the library couldn’t run on Tessel due to a couple of Node and JS incompatibility issues. The biggest problem was the use of Function constructors, used primarily for speed improvements, which isn’t supported on Tessel yet. 

In JavaScript, the [Function constructor](http://dailyjs.com/2012/07/09/function-2/) accepts a string of JavaScript code which it processes into an actual function:
<pre>
var f = new Function(foo, bar, “console.log(‘the arguments are’, foo, bar)”);
f(‘a trivial’, ‘example’); // prints ‘the arguments are a trivial example'
</pre>
It’s often used as a faster way to template a function, replacing Function.prototype.bind which runs [abnormally slow on V8](http://stackoverflow.com/questions/8656106/why-is-function-prototype-bind-slow). 

Tessel’s runtime translates JavaScript to Lua on a host PC before being pushed to Tessel and run on a Lua Virtual Machine. We’ll need to push compilation functionality over to Tessel before Function constructors (or eval) can work on the device. Tim has made stready progress on [a compiler written in C](https://github.com/tcr/colonyjit-compiler) (as opposed to JavaScript) that will reside on Tessel itself and compile JavaScript to LuaJIT bytecode. But it isn’t quite ready yet, so we looked for another way around the issue.
 
Matteo Collina, one of the primary maintainers of the MQTT.js library, and I started a discussion about the MQTT library’s compatibility with Tessel. He was kind enough to accept a pull request that replaced the Function constructors so that we wouldn’t have to wait for the C-based compiler to be complete to use MQTT on Tessel. I just had to fix one more issue with Buffer parsing and the library worked without a hitch on Tessel!  

### Code Example

Tessel can act as either an MQTT server or a client, and the client code is impressively simple in practice. In this code snippet, I publish the current temperature to an MQTT server every five seconds:

<pre>
var mqtt = require('mqtt')
  , host = '192.168.8.102'
  , port = 1883
  , client = mqtt.createClient(port, host, {keepalive: 10000})
  , tessel = require('tessel')
  , climate = require('climate-si7020').use(tessel.port['A']);

climate.on('ready', function ready() {
  console.log('climate ready');
  setInterval(function() {
    climate.readTemperature(function(err, temperature) {
      if (!err) {
       // You can only publish strings
        client.publish('temperature', temperature.toString());
      }
    });
  }, 5000);
});
</pre>

You can find the entire example on this [Github Gist](https://gist.github.com/johnnyman727/0a9402494816ebbe2d56).

If you have a project that requires the use of multiple data gathering clients interacting through a single server, consider trying out MQTT because it’s one of the simplest protocols for M2M communications. 

-Jon
]]></content:encoded>
    <wp:post_name>98339010407</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/98322857662</link>
    <pubDate>Wed, 24 Sep 2014 14:40:41 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[button]]></category>
		<category domain="tag" nicename="button"><![CDATA[button]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[tutorial]]></category>
		<category domain="tag" nicename="tutorial"><![CDATA[tutorial]]></category>
		<category domain="tag"><![CDATA[how-to]]></category>
		<category domain="tag" nicename="how-to"><![CDATA[how-to]]></category>
		<category domain="tag"><![CDATA[electrical engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[electrical engineering]]></category>
		<category domain="tag"><![CDATA[electronics]]></category>
		<category domain="tag" nicename="electronics"><![CDATA[electronics]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/98322857662</guid>
    <!--<wp:post_id>98322857662</wp:post_id>-->
    <wp:post_date>2014-09-24 11:40:41</wp:post_date>
    <wp:post_date_gmt>2014-09-24 18:40:41</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>How-to: Adding Buttons to Tessel</title>
    <description></description>
    <content:encoded><![CDATA[#####9/24/2014– [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

A number of users have requested a button module on Tessel. We welcome this and other module suggestions [here](https://docs.google.com/forms/d/1DZIgW97Cg4CkrgSBuP9O8mABSV7aX1EOF5Gjs3DKMR8/viewform), but in the meanwhile, I thought you’d find a tutorial on adding your own buttons (of any size and shape) useful.

I’ve put this up on the [Projects Page](https://projects.tessel.io/projects/a-button-on-tessel), so I encourage you to also check it out, access the repo, and comment there!

But as long as I’m going into the details of how buttons work, I thought you all might appreciate it on the blog.

### Quick start: I just want a button.

Your button should have two wires sticking out of it. Plug in one side to ground, and the other to pin G3.

![](https://lh5.googleusercontent.com/-VFXEUYqlb2w/VCHwX6JIsnI/AAAAAAAAKak/XS4eqXJ5RmM/w913-h514-no/20140923_151215.jpg)

Install:

<pre>
npm install tessel-gpio-button
</pre>
Use:

<pre>
var tessel = require('tessel');
var buttonLib = require('tessel-gpio-button');
var myButton = buttonLib.use(tessel.port['GPIO'].pin['G3']);

var i = 0;

myButton.on('ready', function () {
  myButton.on('press', function () {
    i++;
    console.log('Press', i);
  });
});
</pre>

Congratulations, you now have a button!

### How it works, and why

#### Why add a button over the GPIO?
Buttons are a nice, easy way to make your project interactive. Tessel comes with [API access to the Config button on the board](https://tessel.io/docs/hardwareAPI#buttons). For many use cases, this is enough. But perhaps you want more buttons, or buttons with a certain look or feel. That's where this tutorial will come in handy.

#### What is a button, in terms of circuits?
Electrically, a button is nothing more than a switch. One wire goes into the button; one wire comes out. When the button is pressed, the wires are connected. When not pressed, the wires are not connected.

#### Making a button talk to Tessel
Tessel communicates over 3.3V. That means that its [pins](https://tessel.io/docs/hardwareAPI#pins) operate between 0V and 3.3V. For a digital pin, 3.3V evaluates to "high" or 1 (truthy), and 0V evaluates to "low" or 0 (falsy).

Tessel has six digital pins along the GPIO bank, marked G1-G6. Each of these pins is pulled high (3.3V) by default. In order to change the state of these pins from high to low, all you have to do is connect a digital pin to ground (GND).

If you have a wire, you can try it out– plug in a wire (ideally black, for ground) in to the GND pin on Tessel's GPIO bank. While running the code below, try sticking the other end of the wire into G3:

![](https://lh4.googleusercontent.com/-sgF_HmYkKLs/VCIGYOqdtcI/AAAAAAAAKdY/8PmTATEWaII/w913-h514-no/20140923_164633.jpg)

<pre>
// tutorial/polling-read.js
// Read Tessel's GPIO pin G3 every 100ms

var tessel = require('tessel');
var myPin = tessel.port['GPIO'].pin['G3'];

setInterval(function readPin () {
  console.log(myPin.read());
}, 100);
</pre>

You should see a stream of ones while the wire is not plugged in, and a stream of zeroes when it is plugged in.

Okay, now let's try it with a button. It's basically the same thing. Unplug your Tessel (it's bad practice to mess around with wires while your Tessel is powered). Your button should have two wires sticking out of it. One of them should plug into GND; the other into pin G3.

![](https://lh5.googleusercontent.com/-VFXEUYqlb2w/VCHwX6JIsnI/AAAAAAAAKak/XS4eqXJ5RmM/w913-h514-no/20140923_151215.jpg)

Run the same code, and try pressing the button. You should see zeroes when the button is pressed, and ones when the button is not pressed.

#### Button events

Tessel has [events](https://tessel.io/docs/hardwareAPI#api-pin-on-type-callback-time-type) for its pins. It fires an event each for `rise`, `fall`, and `change`.

Since the signal falls to low when the button is pressed, and rises to high when the button is released, it seems like you should be able to just use `pin.on(fall, function () {})`. Let's try it and see what happens:

<pre>
// tutorial/simple-event.js
// Logs a message each time the pin falls

var tessel = require('tessel');
var button = tessel.port['GPIO'].pin['G3'];

var i = 0

button.on('fall', function buttonPress () {
  i++;
  console.log('You pressed the button!', i);
});
</pre>

If you have a really nice button, this might just work. However, if you have a cheap button like mine, the `fall` event will be emitted more than once per button press. This is because you are dealing with a mechanical system, and the electrical contact is actually bouncing a little bit on contact and messing up the signal. You can read about this phenomenon [here](http://en.wikipedia.org/wiki/Switch#Contact_bounce).

![](http://upload.wikimedia.org/wikipedia/commons/a/ac/Bouncy_Switch.png)

In order to correct this problem, we need to do some software debouncing.

Debouncing can be a very complicated problem if you need the ability to read the button several times a second (read a few approaches [here](http://www.embedded.com/electronics-blogs/break-points/4024981/My-favorite-software-debouncers)). However, for most applications, you can simply reduce the rate at which your events can fire.

Let's try adding a delay timer to the event:

<pre>
// tutorial/debounced-event.js
// Logs a message at button presses that are sufficiently spaced

var tessel = require('tessel');
var button = tessel.port['GPIO'].pin['G3'];

var delay = 500; // Let's try every 500ms
var ready = true;

var i = 0

button.on('fall', function () {
  if(ready) {
    buttonPress();
  }
});

function buttonPress () {
  i++;
  console.log('You pressed the button!', i);
  
  // Set a delay timer
  ready = false;
  setTimeout(function () {
    ready = true;
  }, delay);
}
</pre>

500ms worked well for my button, but feel free to adjust the delay and see how long it takes for your button to stop bouncing.

#### Wrapping the events
For the sake of consistency, I've set up index.js of this folder [the same way we set up every module](http://blog.technical.io/post/94084496782/making-a-tessel-style-library-for-third-party-hardware), to emit an event on `press`. `press` and `release` are individually easy, but harder to have both due to our simple debouncing method. I've left that as an exercise for the reader (PRs welcome).

Here's some example code requiring index (or just `npm install tessel-gpio-button`):

<pre>
// examples/button.js
// Count button presses

var tessel = require('tessel');
var buttonLib = require('tessel-gpio-button');
var myButton = buttonLib.use(tessel.port['GPIO'].pin['G3']);

var i = 0;

myButton.on('ready', function () {
  myButton.on('press', function () {
    i++;
    console.log('Press', i);
  });
});
</pre>

#### Multiple buttons
Say you want more than one button. Maybe you're making a game controller, or a musical instrument or something. So you have several buttons to connect.

All you have to do is connect one side of each to ground, and the other side to a different digital pin.

![](https://lh6.googleusercontent.com/-Cr5us5zJ9SA/VCIBTDnpmqI/AAAAAAAAKcw/O-NE2P8AJOE/w913-h514-no/20140923_162433.jpg)

Then make different instances for each button. Like this:

<pre>
// examples/two-buttons.js
// Log button presses from two different buttons

var tessel = require('tessel');
var buttonLib = require('tessel-gpio-button');

var button1 = buttonLib.use(tessel.port['GPIO'].pin['G3']);
var button2 = buttonLib.use(tessel.port['GPIO'].pin['G2']);

button1.on('press', function () {
  console.log('Pressing button 1.');
});

button2.on('press', function () {
  console.log('Pressing button 2.');
});
</pre>
Pressing the different buttons will give you different messages.

Note that I used a breadboard to connect several buttons to the same ground. If you're interested/want to know more about breadboards, [this](http://www.instructables.com/id/Breadboard-How-To/) is a really good place to start.

That's all! Enjoy.

*I'll keep this tutorial up to date on its [projects page](https://projects.tessel.io/projects/a-button-on-tessel)*]]></content:encoded>
    <wp:post_name>98322857662</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/98257815497</link>
    <pubDate>Tue, 23 Sep 2014 18:16:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[contribution guide]]></category>
		<category domain="tag" nicename="contribution-guide"><![CDATA[contribution guide]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[howstuffworks]]></category>
		<category domain="tag" nicename="howstuffworks"><![CDATA[howstuffworks]]></category>
		<category domain="tag"><![CDATA[software]]></category>
		<category domain="tag" nicename="software"><![CDATA[software]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[lua]]></category>
		<category domain="tag" nicename="lua"><![CDATA[lua]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[compiler]]></category>
		<category domain="tag" nicename="compiler"><![CDATA[compiler]]></category>
		<category domain="tag"><![CDATA[runtime]]></category>
		<category domain="tag" nicename="runtime"><![CDATA[runtime]]></category>
		<category domain="tag"><![CDATA[firmware]]></category>
		<category domain="tag" nicename="firmware"><![CDATA[firmware]]></category>
		<category domain="tag"><![CDATA[cli]]></category>
		<category domain="tag" nicename="cli"><![CDATA[cli]]></category>
		<category domain="tag"><![CDATA[how tessel works]]></category>
		<category domain="tag" nicename="how-tessel-works"><![CDATA[how tessel works]]></category>
		<category domain="tag"><![CDATA[how to run javascript on a microcontroller]]></category>
		<category domain="tag" nicename="how-to-run-javascript-on-a-microcontroller"><![CDATA[how to run javascript on a microcontroller]]></category>
		<category domain="tag"><![CDATA[javascript on microcontrollers]]></category>
		<category domain="tag" nicename="javascript-on-microcontrollers"><![CDATA[javascript on microcontrollers]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/98257815497</guid>
    <!--<wp:post_id>98257815497</wp:post_id>-->
    <wp:post_date>2014-09-23 15:16:00</wp:post_date>
    <wp:post_date_gmt>2014-09-23 22:16:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>How Tessel Works: The Basics</title>
    <description></description>
    <content:encoded><![CDATA[#####9/23/2014– [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

Ever since Jon pushed out the [Contribution Guide](https://github.com/tessel/contribution-guide), I’ve been meaning to distill some of it into a more digestible format. It’s the basics of how Tessel works, hardware and software.

This is an overview, not a complete picture– I recommend that you check out the [docs](tessel.io/docs) and the full [contribution guide](https://github.com/tessel/contribution-guide) if your interest is piqued.

*Rolls up sleeves.*

Okay, here’s how it works:

###Software

![](https://github.com/tessel/contribution-guide/raw/master/assets/system-diagram.jpg)

Let’s dig into the software first. This software is designed to work on Tessel’s specific hardware, but we’re working on making it portable to other platforms as well.

The basic interaction with Tessel is this:

1. In the command line, you enter `tessel run <file.js>`.
1. From here, the CLI bundles all of the files except those blacklisted in the hardware section of your package.json. If there is no package.json or node_modules folder, Tessel will bundle only the specified file.
1. We then pass all the files found through Colony, our JS to Lua compiler.The CLI creates a tarball and sends it off to Tessel’s firmware via USB.
1. The firmware receives the tarball, puts it in RAM*, and loads the script into the Lua VM in Tessel runtime. *or Flash, if you use `tessel push` instead of `tessel run`. We’ll go into that in the hardware section.
1. The runtime environment takes over and defines all the global functions and node modules that the Lua code called into.
1. When hardware-specific tasks are called by the Lua code, runtime makes calls into the appropriate C functions.
1. When the process completes, runtime is shut down and the script is freed from memory.
1. After the initial script runs and sets up event callbacks, the runtime waits for events. When an event occurs, the processor wakes up, runs the callback, and then goes back to sleep.
1. When no event sources are waiting for events, or when you call `process.exit()`, runtime is shut down.

To separate this out by components instead of chronology, there are four basic parts of Tessel’s software:

**CLI:** Command line interface for interacting with Tessel over USB (repo: https://github.com/tessel/cli)

**Colony:** JavaScript to Lua compiler (bundle installed with the CLI) (repo: https://github.com/tessel/colony-compiler)

**Runtime:** Lua VM running the interpreted code. The runtime layer also includes the compatibility layer for core JS functions (such as String and Number) and core Node function (such as fs and buffers). (repo: https://github.com/tessel/runtime)

**Firmware:** C code interfacing the Lua runtime with all of the hardware components (Wifi, RAM, Flash, SPI/UART/I2C busses). The firmware layer also handles interrupts. (repo: https://github.com/tessel/firmware)

All right, that’s the software basics. There are more details overall and for each subsystem on our contribution guide (https://github.com/tessel/contribution-guide), so for the sake of brevity I’ll let you investigate on your own. Let’s move on to Tessel’s hardware.

###Hardware

![](https://s3.amazonaws.com/technicalmachine-assets/doc+pictures/hardware_design_docs/TM-00-04-ports.png)

At its core, Tessel runs a 180MHz ARM Cortex-M3 LPC1830. The M3 was chosen as the smallest available chip with the capacity to support external Flash and RAM. Tessel’s Wifi chip is the TI CC3000. There was a lot of excitement about this chip at the time of prototyping, and it was chosen as a good balance between cheap and easy to integrate into a system.

Since Tessel was designed to be intuitive and familiar to web programmers, we needed a bit more memory to play around with than, say, an Arduino. So we have 32 Megabytes each of Flash and SDRAM. (For comparison, Arduino Uno has 32 Kilobytes of Flash, and 2 Kilobytes of SRAM.)

Tessel’s firmware and runtime (compiled into the firmware) are stored in Flash memory. Current firmware takes up about 1.3MB, but the boot and firmware partitions reserve 2MB of memory just in case– leaving you 30MB to use for your own files.

Tessel’s CLI gives you the option to either `push` or `run` any given JS file. When you `run`, code is temporarily stored in RAM and is not persistent across hardware resets; if Tessel loses power, you will need to re-run the code. This is designed for quickly testing code in development.

If you `push`, the files are saved to Flash memory and run every time Tessel boots up– so if you want to plug Tessel into a battery, you’ll need to `tessel push`, disconnect, and plug the battery in. This is designed for deployment. You can read more about `push` vs. `run` [here](http://start.tessel.io/usage).

The primary interaction for Tessel takes place through the four module ports. Each can be used to communicate with devices using SPI, I2C, and/or three digital GPIO pins. Ports A, B, and D also include UART, another communication interface.

Module ports are designed for hardware modularity; currently we have fourteen single-function modules (BLE, servo, accelerometer, etc.) that you can swap into (almost) any of these ports. Drivers and APIs are npm installed with the package name written on the silk screen on the module. These modules are also all OSS/OSHW. You can find third-party design guidelines and module design philosophy [here](https://tessel.io/docs/hardware#modules).

There’s also a GPIO bank on the board designed to make it easy to interface with other hardware, or anything not available in module form. All of Tessel’s input and output signaling is 3.3V maximum voltage.

You can power Tessel through its microUSB port (5V USB sources only), or through a pair of solderable pins on the board. Please read the [guide on powering Tessel](https://tessel.io/docs/power) before you use these, though.

You can find links to all of Tessel’s hardware designs (schematics and layouts for Tessel and all modules) here: https://github.com/tessel/hardware

Whew! Now that you understand everything about Tessel, you're all set to [contribute](https://github.com/tessel/contribution-guide) to this open source project!

See you on the repos,<br/>
Kelsey]]></content:encoded>
    <wp:post_name>98257815497</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/97680406747</link>
    <pubDate>Tue, 16 Sep 2014 18:11:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[twilio]]></category>
		<category domain="tag" nicename="twilio"><![CDATA[twilio]]></category>
		<category domain="tag"><![CDATA[node]]></category>
		<category domain="tag" nicename="node"><![CDATA[node]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[compatibility]]></category>
		<category domain="tag" nicename="compatibility"><![CDATA[compatibility]]></category>
		<category domain="tag"><![CDATA[wifi]]></category>
		<category domain="tag" nicename="wifi"><![CDATA[wifi]]></category>
		<category domain="tag"><![CDATA[sms]]></category>
		<category domain="tag" nicename="sms"><![CDATA[sms]]></category>
		<category domain="tag"><![CDATA[iot]]></category>
		<category domain="tag" nicename="iot"><![CDATA[iot]]></category>
		<category domain="tag"><![CDATA[internet of things]]></category>
		<category domain="tag" nicename="internet-of-things"><![CDATA[internet of things]]></category>
		<category domain="tag"><![CDATA[internet of people]]></category>
		<category domain="tag" nicename="internet-of-people"><![CDATA[internet of people]]></category>
		<category domain="tag"><![CDATA[node.js]]></category>
		<category domain="tag" nicename="nodejs"><![CDATA[node.js]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[ricky]]></category>
		<category domain="tag" nicename="ricky"><![CDATA[ricky]]></category>
		<category domain="tag"><![CDATA[robinett]]></category>
		<category domain="tag" nicename="robinett"><![CDATA[robinett]]></category>
		<category domain="tag"><![CDATA[jon]]></category>
		<category domain="tag" nicename="jon"><![CDATA[jon]]></category>
		<category domain="tag"><![CDATA[mckay]]></category>
		<category domain="tag" nicename="mckay"><![CDATA[mckay]]></category>
		<category domain="tag"><![CDATA[jon mckay]]></category>
		<category domain="tag" nicename="jon-mckay"><![CDATA[jon mckay]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/97680406747</guid>
    <!--<wp:post_id>97680406747</wp:post_id>-->
    <wp:post_date>2014-09-16 15:11:00</wp:post_date>
    <wp:post_date_gmt>2014-09-16 22:11:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Twilio, Tessel, and the Internet of People</title>
    <description></description>
    <content:encoded><![CDATA[#####9/16/2014– [Jon McKay](http://blog.technical.io/search/jon+mckay)

![](https://31.media.tumblr.com/f811a4c2a87bb871167c90b88cae2677/tumblr_inline_nc0lm6XZDq1s75tgz.jpg)

### Twilio and Tessel

[Twilio](https://www.twilio.com/) is a company that is near and dear to our hearts at Technical Machine. We’re excited to announce that their Node.js library runs on Tessel. Twilio is the SMS and Voice glue for any communications-based applications and they have an amazing developer experience. Hands down, Twilio is the easiest way to send SMS and voice communications and I’ve yet to meet a dissatisfied customer. 

In my opinion, Twilio and Tessel seem like a perfect match. Tessel is the fastest way to gather data about the physical world, and Twilio is the fastest way to get that information to the people who care.

### Why SMS?

There are a whole slew of ways devices communicate with each other and with people: lightweight, data transfer protocols (MQTT, CoAP, XMPP, BLE), haptics, or visual displays. But what happens when an individual needs to be notified of an event regardless of where they are in the world? 

SMS is the best way to immediately get data to to the right person. While push notifications are also a reliable way of getting information directly to a user, it still requires them to download [yet another app](http://www.mediapost.com/publications/article/226386/will-iot-mean-too-many-apps.html). As more and more connected devices have their own applications, it becomes increasingly tedious to download and use a separate smartphone application for each. Text messages are still the simplest way to get data from a device to a smartphone.


### Running Twilio on Tessel

When we shipped Tessel, the runtime wasn’t compatible enough with Node for the Twilio Node.js library to run on Tessel. Not only that, but our WiFi state machine was unstable and prone to crashing making HTTP requests unreliable.

We’re really proud of the progress we’ve made since then to get the Twilio Node.js library running directly on a microcontroller. We’ve slogged [through a whole slew of WiFi, JavaScript, and Node compatibility bugs](https://github.com/tessel/runtime/issues?q=label%3ATwilio-Compat) for this library to start working. We’re starting to see other libraries (like [Keen.io](https://www.npmjs.org/package/keen.io) and [MQTT](https://www.npmjs.org/package/mqtt) which we’ll talk about more soon) Just Work on Tessel and it’s really exciting to see our original design finally coming to fruition. 

We worked Ricky Robinett, a developer evangelist at Twilio to test out the Node library as we were fixing it. He was able to [write a simple app](https://www.twilio.com/blog/2014/09/building-a-sleep-tracker-for-your-dog-using-tessel-and-twilio.html) on Tessel to get an idea of exactly how lazy his dog, Gif, really is. Using the Twilio Node library and the accelerometer module, he could detect when his dog was napping on the job, and send him a text with the nap duration. While it is an, admittedly, silly use case, his blog post shows the basics of loading the Twilio node module, monitoring the accelerometer values, and posting an SMS with an event has occurred. [Check it out](https://www.twilio.com/blog/2014/09/building-a-sleep-tracker-for-your-dog-using-tessel-and-twilio.html) if you’re interested in sending a text message from Tessel!


### Note: SMS in production

Lastly, running Twilio on Tessel is the fastest way to *prototype* an SMS-enabled system but you would want a different system design when moving to production. For example, you could move to a proxy-service oriented architecture: Tessel would send an HTTP request to a remote server and that server would take care of interacting with the Twilio service. The proxy server could also route incoming SMS messages down to the Tessel. 

If you’re building an SMS-enabled Tessel application and you’d like help, feel free to post on our [forums](forums.tessel.io) or shoot me an email at jon@technical.io. 

-Jon




 

]]></content:encoded>
    <wp:post_name>97680406747</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/97578591877</link>
    <pubDate>Mon, 15 Sep 2014 13:57:51 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[luajit]]></category>
		<category domain="tag" nicename="luajit"><![CDATA[luajit]]></category>
		<category domain="tag"><![CDATA[jobs]]></category>
		<category domain="tag" nicename="jobs"><![CDATA[jobs]]></category>
		<category domain="tag"><![CDATA[interns]]></category>
		<category domain="tag" nicename="interns"><![CDATA[interns]]></category>
		<category domain="tag"><![CDATA[hiring]]></category>
		<category domain="tag" nicename="hiring"><![CDATA[hiring]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/97578591877</guid>
    <!--<wp:post_id>97578591877</wp:post_id>-->
    <wp:post_date>2014-09-15 10:57:51</wp:post_date>
    <wp:post_date_gmt>2014-09-15 17:57:51</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>We’re hiring, cool projects, and meeting up</title>
    <description></description>
    <content:encoded><![CDATA[#####9/15/2014– [Updates](http://blog.technical.io/search/update)

*We're hiring*

We miss our summer interns– seven people is too few for our grand plans! Check out [tessel.io/jobs](http://tessel.io/jobs) if you think you can help fill the hole in our hearts.

*Progress report*

Here’s what we’ve been up to lately:
* Bug fixes and feature requests, as always. See the changelogs [here](https://forums.tessel.io/t/changelogs-for-tessel-firmware-cli/644).
* Prep for conference/hackathon season: there should be Tessel hardware to borrow at most of [Major League Hacking](http://mlh.io/)’s hackathons, and we’re speaking and providing hardware at a number of to-be-announced conferences.
* Improved internal testing infrastructure: we’re working on a continuous integration server that automatically runs a suite of tests on every PR through Tessel and merges if acceptable.
* Added contribution labels to Github issues to make it easier to contribute– see details [here](https://forums.tessel.io/t/new-contribution-tasks/806).
* Added Tessel Packs to the [store](http://tessel.io/shop): bundles of modules for specific applications, such as the Hackathon Pack.
* Reached out to a lot of customers for feedback– we love to hear your feedback, so much so that Jon spent a lot of time last week individually emailing customers to hear their thoughts. If you have anything to share, please [let us know](mailto:team@technical.io)!
* Made a [meetup group](http://www.meetup.com/APIs-to-Electrons) in the Bay Area and held our first couple of events.
* Got LuaJIT running some JS scripts.

*Meeting up*

Hardware is more fun in person– want to start a meetup group in your area at the intersection of hardware and web development? Reach out to [kelsey@technical.io](mailto:kelsey@technical.io) for support and ideas– and we’ll cover your meetup fees. Check out [our group](http://www.meetup.com/APIs-to-Electrons) as an example.

*Projects*

We’ve been watching projects roll in, as well. Here are a few picks:
* [Tessel + Auth0 authentication](https://projects.tessel.io/projects/authenticating-and-authorizing-a-tessel-device-with-auth0)
* [Neopixel animation over websockets](https://projects.tessel.io/projects/animate-neopixels-over-websockets)
* [A ring level using accelerometer + Neopixels](https://projects.tessel.io/projects/super-neo-bulls-eye-level-tessel)
* [A Meteor.js temperature monitoring dashboard](https://projects.tessel.io/projects/enviroreport-web-dashboard-for-climate-module)

Do you have a Tessel project you’ve been working on? Please [post](projects.tessel.io)!

Until next time,<br/>
Kelsey, Tim, Ken, Eric, Jon, Jia, and Kevin]]></content:encoded>
    <wp:post_name>97578591877</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/96182401967</link>
    <pubDate>Sat, 30 Aug 2014 12:58:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[interview]]></category>
		<category domain="tag" nicename="interview"><![CDATA[interview]]></category>
		<category domain="tag"><![CDATA[backer]]></category>
		<category domain="tag" nicename="backer"><![CDATA[backer]]></category>
		<category domain="tag"><![CDATA[svdockum]]></category>
		<category domain="tag" nicename="svdockum"><![CDATA[svdockum]]></category>
		<category domain="tag"><![CDATA[stefanvandockum]]></category>
		<category domain="tag" nicename="stefanvandockum"><![CDATA[stefanvandockum]]></category>
		<category domain="tag"><![CDATA[projects]]></category>
		<category domain="tag" nicename="projects"><![CDATA[projects]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[neopixels]]></category>
		<category domain="tag" nicename="neopixels"><![CDATA[neopixels]]></category>
		<category domain="tag"><![CDATA[3D Printing]]></category>
		<category domain="tag" nicename="3d-printing"><![CDATA[3D Printing]]></category>
		<category domain="tag"><![CDATA[iot]]></category>
		<category domain="tag" nicename="iot"><![CDATA[iot]]></category>
		<category domain="tag"><![CDATA[smart home]]></category>
		<category domain="tag" nicename="smart-home"><![CDATA[smart home]]></category>
		<category domain="tag"><![CDATA[sensors]]></category>
		<category domain="tag" nicename="sensors"><![CDATA[sensors]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/96182401967</guid>
    <!--<wp:post_id>96182401967</wp:post_id>-->
    <wp:post_date>2014-08-30 9:58:00</wp:post_date>
    <wp:post_date_gmt>2014-08-30 16:58:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>An Interview with Stefan van Dockum</title>
    <description></description>
    <content:encoded><![CDATA[#####8/30/2014– [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

Stefan Van Dockum, or [stefanvandockum](https://projects.tessel.io/users/stefanvandockum) on our projects page, has made a number of cool projects lately: a [haptic metronome](https://projects.tessel.io/projects/metronomrrr), a [bulls-eye level](https://projects.tessel.io/projects/super-neo-bulls-eye-level-tessel) using Neopixels and an accelerometer, Tessel adaptations for a [Wii Nunchuck](https://projects.tessel.io/projects/wii-nunchuck-tesselized) and an [NES controller](https://projects.tessel.io/projects/nes-controller-tesselized), and a couple of other promising works in progress. So I sent him a message to see if I could learn more about his background, inspirations, and impressions.

Stefan made time to speak with me late at night his time in The Netherlands . He’d just put his two young kids to bed, and so Skyped me quietly, white earbuds in. Quick to smile, he was full of ideas– both for projects he wanted to make and for directions he thought we as a company might want to look.


**Kelsey:** You’ve made a broad range of projects– what’s your background in engineering?

**Stefan:** I have a pretty standard background for here in Holland for engineering. I got a bachelor’s degree in higher informatics; embedded systems. Before that I was in electrical engineering.

I hadn’t done anything with engineering until now, since then; I went right into the internet business– that’s more .NET and PHP programming.

I had played with electronics since I was seven, since we got our first Nintendo 8-bit thing, and after that, we got our first XT8086 computer with less than 64 kilobytes of RAM. So I started programming then. But then after that, you get to puberty, so you go skating, guitar playing, drinking, that sort of stuff.

I’m more of a “knower” than a “doer”; if I see something for electronics, I know what it does, but I  don’t know exactly how to make it from scratch. So copy and enhance is the standard tactic.

That’s why I love the Tessel right now. It has the electronics– what I went to school for– and it has the programming language that I’ve done the last couple of years, for the internet business. It’s the perfect combination for me right now.

When Tessel came out, I ordered the whole set, and I was very happy.

**Kelsey:** Would you consider yourself primarily a JavaScript programmer?

**Stefan:** JavaScript was always a thing you did ‘on the side’. It was not a main thing for me; I was mainly a backend developer. Databases were my specialty. But the last two, three years I’ve gone into JavaScript some more, with JQuery and stuff. Last year, at our work, Node.JS was a hot topic, so we’ve learned stuff from that, too.

In the end, the programming language itself is not that interesting to me; it’s just what you can do with it. I have learned ten programming languages, I think: Delphi, PHP, .NET, Turbo Pascal and even Basic in the old days; I also did some Java stuff in school. I’ve seen almost every programming language there is. The only thing that’s hard is switching between the languages.

**Kelsey:** Did you have anything particular in mind when you bought a Tessel?

**Stefan:** Not really; I always had my eye on the Arduino, but the problem was that it was C, and I didn’t want to go back to C after programming with .NET and PHP for so long.

I wanted an Arduino for just making things. You always want to build a robot or something– standard stuff. Just dabbling in electronics is always a cool thing to do. I just wanted to have it as a new gadget.

**Kelsey:** You’ve been prolific so far; you’ve published, I think, five projects?

**Stefan:** Five or so. I’ve got some more in my mind.

I need to move to a new house, so I’m thinking about a home sensor network, with small temperature sensors, to monitor the whole house.

I have a checklist of all the modules that work with Tessel. When I got the Tessel first, I said, let’s try module 1. Okay, example code works. What to do with it? Thinking, thinking, don’t know yet, let’s try module 2. Let’s try that one. At first I tried all the example codes. Then you have a really nice idea of what you can do with them.

One thing on my checklist was the infrared module. Controlling your TV is so dull, it’s standard, so controlling the TV was not very cool. But I’m also a portrait photographer. I had my DSLR in front of me, and I was thinking, wait a second, I’ve got a remote for that, and that remote is infrared. I’ve done a couple of product photography assignments; now I can automate my product photography just by sending IR codes to the camera and using the servo to turn a table.

I’m still working on the woodwork part. I went to Ikea to buy some really cheap turntable thing; it’s like seven euros for a turntable, and I just have to put on the servo to move it. That’s a project that I’m still doing. Like I said, moving into a new house, but it will probably be done before the end of the month.

*Editor’s note: [here is Stefan’s product photography project writeup so far.](https://projects.tessel.io/projects/360deg.-product-photography-ir-controlled)*

**Kelsey:** A lot of your projects involve a physical component– is that a fun piece of the project for you?

**Stefan:** It depends on what I want to achieve, the problem is that it takes some more thinking; programming is easier than making a piece of hardware. But it’s bringing back childhood memories, the electrical part. It was fifteen years ago that I created my own PCB boards. In the old days, I etched my own PCB boards, with the lighting and the different kinds of chemicals. When I was at school, the SMD technology was just arriving. I really had to do everything by hand then.

I had an internship that shipped amplifiers to Hong Kong.  I was soldering on my own, I made some mistakes, and I really hated that part. But now when I’m tinkering, I’m thinking, why that capacitor, why that resistor?

That’s really a fun part to think of: what kind of schematic do you need? But it’s still a hard part. I think most software programmers really hate that part, to get that electronic stuff up and running. You really don’t know what’s happening if you’ve never had any background. Why would I learn four years for it, if someone could do it in two weeks? So the pre-made modules are pretty cool, because you can just plug in and do your stuff.

**Kelsey:** How long does it take you to make a project?

**Stefan:** One evening, or two or three evenings, depending on how much I need to debug.

I’m always thinking about really short code blocks, trying to get those basic blocks first: turn a servo, send an IR command, that sort of stuff. Later on, I can always extend those basic building blocks.

Mostly it’s just one evening to get the prototype running. If I wanted to make it really complete, I think I would be doing two days or something. For the projects that I do right now, I get the idea in the morning, and then in the evening I program it, hook it up, and it’s ready to go.

**Kelsey:** What are you excited about making right now?

**Stefan:** The Neopixel stuff is really cool. You can get a nice ring with colorful LEDs. It’s just so easy to program, you can do basically anything with it.

I got a 3D printer, also. I’m trying to mix and match some ideas that I have with the Tessel. But the problem is, my 3D modeling capabilities are also from ten years ago, so I need to pick that up also.

I saw the Rapiro robot– that’s a pretty nice robot for 3D printing. So I want to make it with much more stuff on it– more lights, more talking back.

Robots are pretty standard. You always want to make a robot, but in the end it’s sometimes too hard, and everybody does it. But to make a really cool robot, that’s still on the bucket list.

**Kelsey:** Have you thought about turning any of your projects into products?

**Stefan:** I was thinking about how to do it. You need to do it in quantity.

For most people, the Tessel is expensive. It’s not a really expensive thing, but it’s still an expensive thing to buy for a product.

You could do something Bluetooth Low Energy and NFC. I was thinking about a teddy bear with NFC in it. My kids could put the telephone to its paw and an app would come to life and it would say how old the teddy bear is, its birthday, that sort of thing.

It’s in my mind to try selling some things. But the Tessel right now isn’t the right thing to do to sell. You really need to make your own microcontroller with its own chips. I could maybe make things for friends.

**Kelsey:** What would make it better for the applications you have in mind?

**Stefan:** The Arduino proto-mini is ten euros if I get it from Hong Kong. But I really hate Arduino’s programming language, and I really like Tessel. You should make a Tessel mini, or some ‘satellite’  sensor like boards which can directly talk to a tessel ‘hub’.

The sensors need wireless communication– I want to make a low-mesh network.

Tessel mini should be one of the products you should sell. Max of two modules, and half its price, you would sell a lot more I think. Especially for hackathons. At my company, there are some other front-end developers who are looking into Tessels, but don’t have the money yet.
Sell them by tens, you can really have a cool hackathon.

**Kelsey:** What do you think is a good direction for this sort of technology?

**Stefan:** The nicest things about Tessel– and those were the first things that triggered me– there are two things. The JavaScript, and the built-in Wifi.

Connecting a physical thing to the internet is the way to go. The only thing you need to know is, what do you want to do with this connection? It’s an in between medium; you’ve got some actuators, you’ve got some sensors, and you can always reach and trigger them. You can move something through the internet. But in the end, I don’t really have a concrete idea yet. First get the basics up and running and expand from there...

The basic implementation would be the sensors: getting to know your environment, and adapt your environment to the situation. 
So the  the next best thing, what I think, in the next five years is really automating your house and making sure everything in it knows what it’s doing: close the windows, sun screens, temperature, air conditioning. Together with information (weather for example), shared algorithms as API etc. 

The other thing I was thinking about is portable stuff. That’s a race against the phone, because your phone can do a lot of things, but they’re consumer things. You can’t add really other hardware things to it, other than the microUSB port. You have Bluetooth protocol. In ten years, maybe there will be a difference between a phone and a microcontroller, but maybe not. That’s a possibility.

![](https://31.media.tumblr.com/f94d7cf8f1764036cd840ccaff868f8c/tumblr_inline_nb1l0uhnmX1s75tgz.png)]]></content:encoded>
    <wp:post_name>96182401967</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/96095111562</link>
    <pubDate>Fri, 29 Aug 2014 12:36:14 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[paige cote]]></category>
		<category domain="tag" nicename="paige-cote"><![CDATA[paige cote]]></category>
		<category domain="tag"><![CDATA[intern]]></category>
		<category domain="tag" nicename="intern"><![CDATA[intern]]></category>
		<category domain="tag"><![CDATA[internship]]></category>
		<category domain="tag" nicename="internship"><![CDATA[internship]]></category>
		<category domain="tag"><![CDATA[summer 2014]]></category>
		<category domain="tag" nicename="summer-2014"><![CDATA[summer 2014]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/96095111562</guid>
    <!--<wp:post_id>96095111562</wp:post_id>-->
    <wp:post_date>2014-08-29 9:36:14</wp:post_date>
    <wp:post_date_gmt>2014-08-29 16:36:14</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Paige’s Intern Farewell</title>
    <description></description>
    <content:encoded><![CDATA[#####8/29/2014– [Paige Cote](http://blog.technical.io/search/paige+cote)

Choosing a startup for my first technical internship was pretty scary. While the benefits of working for a very small company are definitely large (I’ll get to that in a minute), I knew that this was going to be jumping into the deep end. Looking back at the end of the summer, I can say that while I was definitely justified in my anxiety, I would make the same choice again.

![](https://31.media.tumblr.com/7b067c6588845a71a0958a76e5e6fc20/tumblr_inline_nb2u25rQ151s75tgz.jpg)

### Jump Right In
The best thing for me about this summer was that I could make an impact from day one. While my other friends shared stories about weeklong onboarding processes and intern projects that would never see the light of day, I was immediately pulled into the craziness of shipping Technical Machine’s first product, with all hands needed. Any worry that I would not be making a significant impact this summer was quickly put behind me. We were working on bug fixes from the first day, and as soon as our customers had Tessels in their hands, we were the first line of support.

After the first few weeks, which included surviving shipping, things hardly slowed down. I eventually got involved with every facet of the company. From web development to firmware to support, I was encouraged to find projects that were interesting to me and tackle them. Because Technical Machine is so small (7 full-time and 3 interns), there were always projects that were genuinely important. I could simply express interest in working a specific project and then start working. 

This freedom encouraged me to attempt to solve problems that would have intimidated me a month earlier. It also highlighted a huge benefit of startups. At Technical Machine, everyone who made the product is in the same room/building as you. As I worked to solve problems, I knew I would have the support from the team if I needed it. If something strange was going on with the my project, I could just ask the person who wrote the entire section of code or designed the circuit that you’re having trouble with. It was a pretty awesome introduction to a professional engineering environment. 

### Back to The Real World
As I get ready to go back to school again this fall, I am so excited to apply what I’ve learned this summer. There are the obvious skills that I gained, like my confidence with JavaScript and general appreciation for writing tests. And then there is the less obvious personal motivation that I will take away from my summer at Technical Machine. 

Considering that Tessel didn’t even exist as a concept until about a year ago, the amount of quality product that the team has been able to produce is amazing. I am so close to being in a similar position, and it is incredibly encouraging to see how much I could do with the knowledge I gain in the next few years.

Contributing to Tessel this summer gave me a new perspective to take back to school with me this fall. It gave me insight on what problems I look forward to solving, and what I need to focus on improving if I want to make an impact on similar projects in the future. Working in the startup space feels like the best parts of school mashed into one, there are always new things to learn, and you learn new skills with the purpose of immediately applying it. 

![](https://31.media.tumblr.com/1afe59c660049f7aa4f6fc4d00c0615c/tumblr_inline_nb2u2vJi371s75tgz.jpg)

This fall you’ll find me back at Olin taking classes, Tessel-vangelizing at medical hackathons in Boston, and trying to learn C on the side so that I can more successfully tackle firmware problems next time I’m presented with that opportunity.

If you have any questions about my summer, feel free to get in touch!

[Paige](https://twitter.com/paigereads)]]></content:encoded>
    <wp:post_name>96095111562</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/95945850577</link>
    <pubDate>Wed, 27 Aug 2014 18:22:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[c]]></category>
		<category domain="tag" nicename="c"><![CDATA[c]]></category>
		<category domain="tag"><![CDATA[js]]></category>
		<category domain="tag" nicename="js"><![CDATA[js]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[compiler]]></category>
		<category domain="tag" nicename="compiler"><![CDATA[compiler]]></category>
		<category domain="tag"><![CDATA[native]]></category>
		<category domain="tag" nicename="native"><![CDATA[native]]></category>
		<category domain="tag"><![CDATA[lua]]></category>
		<category domain="tag" nicename="lua"><![CDATA[lua]]></category>
		<category domain="tag"><![CDATA[js on hardware]]></category>
		<category domain="tag" nicename="js-on-hardware"><![CDATA[js on hardware]]></category>
		<category domain="tag"><![CDATA[jia huang]]></category>
		<category domain="tag" nicename="jia-huang"><![CDATA[jia huang]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/95945850577</guid>
    <!--<wp:post_id>95945850577</wp:post_id>-->
    <wp:post_date>2014-08-27 15:22:00</wp:post_date>
    <wp:post_date_gmt>2014-08-27 22:22:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>How to Expose a C Function up to JS Userspace on Tessel</title>
    <description></description>
    <content:encoded><![CDATA[#####8/27/2014– [Jia Huang](http://blog.technical.io/search/jia+huang)

*This document will be kept up to date on [Github](https://github.com/tessel/docs/blob/master/tutorials/c-to-js.md)*

This tutorial goes over how to expose a C function to JS where the user can interact with it via any JS function.

The function will pass this simple test case:

<pre>
var tessel = require('tessel');
console.log("Can Tessel add?", 3 == tessel.add(1, 2));
</pre>

1. Clone down the [tessel/firmware](https://github.com/tessel/firmware) repo.
2. Set up the firmware according to the [tessel/firmware readme](https://github.com/tessel/firmware/blob/master/README.md). 
3. Open up `src/tessel.c`. Add these lines 

	<pre>
	uint32_t tessel_add(uint32_t x, uint32_t y)
	{
		return x + y;
	}
	</pre>
5. Add this function to the header file. Open up `src/tessel.h` and add

	<pre>
	uint32_t tessel_add(uint32_t x, uint32_t y);
	</pre>
6. Add the Lua binding. Open up `src/hw/l_hw.c` and add

	<pre>
	static int l_hw_add(lua_State* L)
	{
		uint32_t x = (uint32_t)lua_tonumber(L, ARG1);
		uint32_t y = (uint32_t)lua_tonumber(L, ARG1+1);
		lua_pushnumber(L, tessel_add(x, y));
		return 1; // return 0 if the c function doesn't return a value
	 }
	 </pre>
7. Scroll down to the bottom of `src/hw/l_hw.c` where we're defining all the JS function names in `luaL_reg regs[]` and add in the following entry:

	<pre>
	{"add", l_hw_add}
	</pre>

	So it should look something like:

	<pre>
	luaL_reg regs[] = {
		{"add", l_hw_add},
		// spi
		{ "spi_initialize", l_hw_spi_initialize },
		{ "spi_enable", l_hw_spi_enable },
		...
	</pre>

8. Add the JS bindings. Open up `builtin/tessel.js` and find this function:

	<pre>
	this.deviceId = function(){
  		return hw.device_id();
	}; 
	</pre>

	Add the following right below it

	<pre>
	this.add = function(x, y){ // the "this" object is referring to the "tessel" object
  		return hw.add(x, y); // the "add" function here corresponds with the string in the lua binding. That's how we get from C -> Lua -> JS
	}
	</pre>

9. Go back to the main directory of the `firmware` repo and do a `make arm`. You should see an output like this

	<pre>
	[183/183] STAMP obj/tessel-firmware.actions_depends.stamp
	arm-none-eabi-size out/Release/tessel-firmware.elf out/Release/tessel-boot.elf out/Release/tessel-otp.elf
   	text	   data	    bss	    dec	    hex	filename
 	824912	   3576	  24660	 853148	  d049c	out/Release/tessel-firmware.elf
  	30848	   2260	   3232	  36340	   8df4	out/Release/tessel-boot.elf
   	6100	  34272	     36	  40408	   9dd8	out/Release/tessel-otp.elf
	</pre>

	This outputs the [elf file](http://en.wikipedia.org/wiki/Executable_and_Linkable_Format) for hardware debugging. 

10. Now go to `out/Release/` and do an `ls`. You should see the following 

	<pre>
	build.ninja              tessel-cc3k-patch.bin    tessel-firmware.bin.cpgz
	gen                      tessel-cc3k-patch.elf    tessel-firmware.elf
	obj                      tessel-erase.bin         tessel-firmware.hex
	tessel-boot.bin          tessel-erase.elf         tessel-otp.bin
	tessel-boot.elf          tessel-firmware.bin      tessel-otp.elf
	</pre>

	Here's what each of those do:
	* `tessel-boot`: bootloader for Tessel. Also writes the Tessel version number (04) in [otp](http://en.wikipedia.org/wiki/One-time_programmable). 
	* `tessel-cc3k-patch`: updates the firmware for the [CC3000 wifi chip](http://processors.wiki.ti.com/index.php/CC3000) on Tessel. Current version is 1.28.
	* `tessel-erase`: erases all JS user code on Tessel.
	* `tessel-firmware`: the firmware for Tessel. This was just changed this to add the '.add' function.

11. Overwrite the Tessel firmware with the new firmware you just built. In the `Release` directory:

	`tessel update ./tessel-firmware.bin`
	Don't forget that `./` before tessel-firmware. It specifies a local path. Otherwise `tessel update` will look for firmware patches on our build server.

12. Now run the test code you have for this function and it should pass.

If you want to revert back to the original Tessel firmware, just run a `tessel update --force` which will force Tessel to update to the newest release version.

*This document will be kept up to date on [Github](https://github.com/tessel/docs/blob/master/tutorials/c-to-js.md)*

![](https://31.media.tumblr.com/d102e9951a2f6be7a92e3f917374e27a/tumblr_inline_nao3o5zKsO1s75tgz.png)]]></content:encoded>
    <wp:post_name>95945850577</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/95383451952</link>
    <pubDate>Thu, 21 Aug 2014 13:22:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[arduino]]></category>
		<category domain="tag" nicename="arduino"><![CDATA[arduino]]></category>
		<category domain="tag"><![CDATA[uart]]></category>
		<category domain="tag" nicename="uart"><![CDATA[uart]]></category>
		<category domain="tag"><![CDATA[serial port]]></category>
		<category domain="tag" nicename="serial-port"><![CDATA[serial port]]></category>
		<category domain="tag"><![CDATA[jia huang]]></category>
		<category domain="tag" nicename="jia-huang"><![CDATA[jia huang]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/95383451952</guid>
    <!--<wp:post_id>95383451952</wp:post_id>-->
    <wp:post_date>2014-08-21 10:22:00</wp:post_date>
    <wp:post_date_gmt>2014-08-21 17:22:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Arduino &lt;-&gt; Tessel communication</title>
    <description></description>
    <content:encoded><![CDATA[#####8/21/2014– [Jia Huang](http://blog.technical.io/search/tim+ryan)

*This document will be kept up to date on [Github](https://github.com/tessel/docs/blob/master/tutorials/connect-arduino-tessel.md)*

This is a tutorial for how to pass data back and forth between an Arduino and a Tessel.

The data is passed via a [UART](http://en.wikipedia.org/wiki/Uart) bridge. Arduino has the [SoftwareSerial](http://arduino.cc/en/Reference/SoftwareSerial) library for UART comm and Tessel has it's built in UART functions.

UART works through having TX (transmit) and RX (recieve) pins. A TX of one device is hooked up to the RX of another device like this:

* Tessel TX  <---> Arduino RX
* Tessel RX  <---> Arduino TX
* Tessel GND <---> Arduino GND

###Step 1: Get an Arduino

The Arduino needs to operate at 3.3V. Some boards which operate at this voltage are:

* [Arduino Mini](https://www.sparkfun.com/products/11114)
* [Seeeduino](http://www.seeedstudio.com/depot/Seeeduino-V30-Atmega-328P-p-669.html)
* [Crowduino](http://www.elecrow.com/crowduino-with-atmega-328-v11-p-338.html)

Both the Seeeduino and the Crowduino can switch between 5V and 3.3V.


#### Arduino Uno
Arduino Unos send over signals at 5V and **this will damage Tessel**. If you are planning on using an Arduino Uno, you need to make a [5V to 3.3V level converter](https://www.sparkfun.com/products/12009) which shifts the 5V UART TX signal from the Arduino to 3.3V. 

The UART TX coming **from** Tessel is at max 3.3V, but this will register as a digital "high" signal so it does not need to be boosted up to 5V.

###Step 2: Hook up the Arduino to the Tessel

There are 3 pins that need to be hooked up, UART TX, UART RX, and Ground.

In the code example, we're going to be using Arduino's SoftwareSerial on pins 10 and 11.

![wiring an arduino to a tessel](https://s3.amazonaws.com/technicalmachine-assets/doc+pictures/arduino-tessel-wiring-uart.jpg)

* Arduino Pin 10 (orange wire) <--> Tessel Port D, pin TX/G1
* Arduino Pin 11 (white wire)  <--> Tessel Port D, pin RX/G2
* Arduino Ground (brown wire)  <--> Tessel Ground

###Step 3: Program the Arduino

Run this code on the Arduino

<pre>
#include <SoftwareSerial.h>
#define rxPin 10 // connect to TX of other device
#define txPin 11 // connect to RX of other device

SoftwareSerial tesselBridge =  SoftwareSerial(rxPin, txPin);

void setup()  
{
  // open serial port at 9600 baud
  Serial.begin(9600);
  Serial.println("Starting up...");
  
  // set the data rate for the SoftwareSerial port
  tesselBridge.begin(9600);
}

void loop() // run over and over
{
  if (tesselBridge.available())
    Serial.write(tesselBridge.read());
  if (Serial.available())
    tesselBridge.write(Serial.read());
}
</pre>

###Step 4: Program Tessel

Make a folder for the code:

<pre>
mkdir arduinoBridge;
cd arduinoBridge; touch uart.js;
</pre>

Put this in the uart.js file.

<pre>
var tessel = require('tessel');
var led1 = tessel.led[0].output(0);
var led2 = tessel.led[1].output(0);
var i = 0;

// baudrate must match the baudrate set in the Arduino file
uartBridge = tessel.port['D'].UART({baudrate: 9600}); 

uartBridge.on('data', function(data){
  // UART data is not packetized, so you will get the data 
  // buffer as the message is sent. This means that long
  // messages will be truncated as several events.
  
  var number = parseInt(data[0]) - 48; // convert hex to ascii to int
  console.log("got data", data, number);

  if (number == 1)
    led1.toggle();

  if (number == 2)
    led2.toggle();
});

// every 3 seconds write some data over to the arduino
setInterval(function(){
  uartBridge.write("Hi there "+i+"\n");
  i++;
}, 3000);
</pre>

Run the code with `tessel run uart.js`, or if you want this to be persistent through power cycles, `tessel push uart.js`.

###Step 5: Test it
You should be able to go into the Arduino console and see the blue and green LEDs on Tessel change as you enter a "1" or a "2".

![terminal](https://s3.amazonaws.com/technicalmachine-assets/doc+pictures/arduino-to-tessel.jpg)

*This document will be kept up to date on [Github](https://github.com/tessel/docs/blob/master/tutorials/connect-arduino-tessel.md)*]]></content:encoded>
    <wp:post_name>95383451952</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/95294380547</link>
    <pubDate>Wed, 20 Aug 2014 13:32:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[nathan lintz]]></category>
		<category domain="tag" nicename="nathan-lintz"><![CDATA[nathan lintz]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[portable tessel platform]]></category>
		<category domain="tag" nicename="portable-tessel-platform"><![CDATA[portable tessel platform]]></category>
		<category domain="tag"><![CDATA[ptp]]></category>
		<category domain="tag" nicename="ptp"><![CDATA[ptp]]></category>
		<category domain="tag"><![CDATA[raspberry pi]]></category>
		<category domain="tag" nicename="raspberry-pi"><![CDATA[raspberry pi]]></category>
		<category domain="tag"><![CDATA[cubieboard]]></category>
		<category domain="tag" nicename="cubieboard"><![CDATA[cubieboard]]></category>
		<category domain="tag"><![CDATA[portable]]></category>
		<category domain="tag" nicename="portable"><![CDATA[portable]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[C]]></category>
		<category domain="tag" nicename="c"><![CDATA[C]]></category>
		<category domain="tag"><![CDATA[platform]]></category>
		<category domain="tag" nicename="platform"><![CDATA[platform]]></category>
		<category domain="tag"><![CDATA[performance]]></category>
		<category domain="tag" nicename="performance"><![CDATA[performance]]></category>
		<category domain="tag"><![CDATA[speed]]></category>
		<category domain="tag" nicename="speed"><![CDATA[speed]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/95294380547</guid>
    <!--<wp:post_id>95294380547</wp:post_id>-->
    <wp:post_date>2014-08-20 10:32:00</wp:post_date>
    <wp:post_date_gmt>2014-08-20 17:32:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessel Faster Better Stronger</title>
    <description></description>
    <content:encoded><![CDATA[#####8/20/2014– [Nathan Lintz](http://blog.technical.io/search/nathan+lintz)

How do we make Tessel faster? How do we keep Tessel simple for users yet powerful enough to take on big problems? What does it take to make a bulletproof wifi connected microcontroller that can truly deliver on the promise of the Internet of Things? These were just a few of the questions which guided the projects I worked on the summer. 

To solve these sorts of problems, I focused on improving the speed of Tessel by writing new firmware apis and porting the Tessel platform to other chipsets. I learned a lot about developing hardware and software platforms, so I thought I’d share some of the insights I gained along the way.

<br>
<center>
![](https://31.media.tumblr.com/5da0a758f8437347eb72c9df5f9d3dfe/tumblr_inline_nakxuxWzXK1s75tgz.jpg)
<div>
How Fast? This Fast
</div>
</center>
<br>
### Moving Pixels
I was inspired to work on improving the Tessel’s performance after reading a request on our forums for an LCD screen module. I naively believed that getting the Tessel to cooperate with a screen would be as simple as porting a C graphics library to JavaScript and plugging in an LCD. 

My first attempt resulted in a graphics library which could output approximately 1 pixel a second. At this rate, filing a phone screen sized display would take approximately 100 hours...bummer. I profiled the program to find what was taking so long and it turned out that making a JavaScript call per pixel was causing the library’s performance to degrade dramatically.

Not wanting to give up quite yet, I decided to dive into the firmware and see if there was any way to pump out pixels at a faster rate. I created a new hardware API for the Tessel, the [SPI Batch](https://tessel.io/docs/hardwareAPI#spi) API, which improved the performance of the graphics library I wrote by a factor of 400! With this new implementation we went from making one JS call per pixel to one JS call for the entire screen. When I tested the library, colorful pixels began pouring into the screen, proving that graphics programming is possible on the Tessel.

Developing a graphics library and a firmware API for the Tessel taught me a lot about the power and limitations of JavaScript. When it comes to event driven programming and IO bound tasks, JavaScript is great. However, when it comes to matters of raw speed, C is usually the right answer. This insight can be distilled into the following heuristic which is applicable any time you’re writing code which involves hardware and software components:

> For CPU bound tasks, like pushing pixels to a buffer,write your code in C. For IO bound tasks, like reading from a file or handling HTTP requests, use a high level language like JavaScript.


### Portable Tessel - Modules Everywhere
After modifying the Tessel firmware to handle graphics, I talked to the team about other ways we could improve Tessel’s performance. We realized that many of our problems could be solved by having an operating system. At the moment, Tessel doesn’t run an operating system; rather, it has a firmware layer which can run a single program. As a result, we can’t use libraries which rely on an OS. By running Tessel on a Linux board, we would have access to these sorts of libraries such as V8, Google’s JS engine, and the Linux TCP stack. This insight blossomed into the Portable Tessel Platform, a node package which emulates the Tessel API on a computer such as the Raspberry Pi or Cubieboard.

<br>
<center>
![](https://31.media.tumblr.com/12a04056371b5c09aa6e50ad51598b87/tumblr_inline_nakxv8HL3S1s75tgz.jpg)
<div>
Raspberry Pi
</div>
</center>
<br>

<center>
![](https://31.media.tumblr.com/1ce42e28cf9c04c32e67ab7e3b08352a/tumblr_inline_nakxvjns4X1s75tgz.jpg)
<div>
Cubieboard
</div>
</center>

I started off this project by writing up a spec and picking node libraries that would emulate the hardware APIs for the Tessel. Our modules each use either [SPI](http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus), [UART](http://en.wikipedia.org/wiki/Universal_asynchronous_receiver/transmitter), [GPIO](http://en.wikipedia.org/wiki/General-purpose_input/output) pins, [I2C](http://en.wikipedia.org/wiki/I%C2%B2C), or some combination thereof. After some quick searching on NPM, I found found libraries which would implement the needed protocols. 

The libraries I found seemed to work, so I assumed that all I had to do was wire the boards to the modules. Unfortunately, I neglected to make sure that the hardware of the different boards was similar enough to the Tessel and that Linux fully supported all of the drivers I needed. I began testing some of our modules on the Raspberry Pi and Cubieboard, and I found that I2C on the Raspberry Pi has [issues](http://www.RaspberryPi.org/forums/viewtopic.php?t=15840&p=302378) communicating with our modules, as its processor doesn’t support certain commands such as repeated start transfers. Similarly, the Cubieboard doesn’t have [SPI support](http://www.cubieforums.com/index.php?topic=602.0) unless you recompile the kernel drivers. 

After discovering that the boards did not support the needed protocols, I began to research how other people got them working. It took a while, but eventually I found a way to properly compile the drivers for the Cubieboard and how to fix the I2C driver for Raspberry Pi. Once I had working drivers, I just had to hook up the boards to the Tessel modules and the [Portable Tessel Platform](https://github.com/nlintz/PTP-Client) was born. Now users can build projects using our hardware modules on their own boards, opening our platform up to people who haven’t purchased a Tessel yet.

Working on the Portable Tessel Platform taught me a lot about the challenges of hardware-software integration. In pure software projects, it is easy to just swap out or modify source code to meet your needs. In hardware, planning out everything ahead is necessary as some boards not have all the features you need. I was lucky that I found new drivers for the Cubieboard and Raspberry Pi, but picking boards which have full support for SPI and I2C would have made building the Portable Tessel Platform much easier.

Next year I’ll be back at college so you won’t be hearing from me on the blog for a while. Please message me @nlintz if you get a chance to build any exciting hardware projects on the Portable Tessel Platform or graphics projects using SPI Batch.

Best,<br/>
Nathan Lintz]]></content:encoded>
    <wp:post_name>95294380547</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/95112616457</link>
    <pubDate>Mon, 18 Aug 2014 14:04:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[evan simpson]]></category>
		<category domain="tag" nicename="evan-simpson"><![CDATA[evan simpson]]></category>
		<category domain="tag"><![CDATA[internship]]></category>
		<category domain="tag" nicename="internship"><![CDATA[internship]]></category>
		<category domain="tag"><![CDATA[summer]]></category>
		<category domain="tag" nicename="summer"><![CDATA[summer]]></category>
		<category domain="tag"><![CDATA[summer intern]]></category>
		<category domain="tag" nicename="summer-intern"><![CDATA[summer intern]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[open source]]></category>
		<category domain="tag" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/95112616457</guid>
    <!--<wp:post_id>95112616457</wp:post_id>-->
    <wp:post_date>2014-08-18 11:04:00</wp:post_date>
    <wp:post_date_gmt>2014-08-18 18:04:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Evan's Summer Internship Farewell</title>
    <description></description>
    <content:encoded><![CDATA[#####8/18/2014– [Evan Simpson](http://blog.technical.io/search/evan+simpson)

It feels like just last week that Jon turned to me in the car and asked, "now that you're halfway through your internship, what do you think so far?" I then pointed out to him that I had only been at Technical Machine for three weeks, and had planned on staying for two more months, so I was nowhere near halfway done. I can't really blame Jon for thinking I'd been there longer, since I joined during the busiest time of the company’s short history, when Tessel was getting ready to ship for the first time. That being said, I'm finding it hard to believe how quickly the remaining time has gone by. 

The work that I did for Technical Machine was so diverse that there was never a dull moment. I started with small module examples and README fixes, and went on to actually adding functionality to the module libraries, as well as fixing bugs. At one point I was making changes to the runtime, at another, firmware. From hardware debugging and module design to web server development, I've certainly had my fill of fun things to work on. Through all of this fun work, though, I did learn quite a bit in just these short months, and I'd like to share some of those things with you now.

### Internships Can be Meaningful Without Gimmicks
I've seen and heard about too many different intern programs that will include things like field trips and fun events to make sure the interns have a good summer. While I do appreciate the intent of these activities, I feel that sometimes it is done as a way of saying "sorry the work isn't very interesting, let's take a break and have some fun". Working at Technical Machine I realized that when the work itself is fun, those other perks and gimmicks don't really seem all that special. What I wanted out of an internship was to work on something I enjoyed with other people, and to feel like my accomplishments mattered to the company. That's exactly what I got here at Technical Machine, and I couldn't have asked for more.

### Hardware Doesn't Have to be Hard
I'd say I had a very basic understanding of electronics and hardware development before joining Technical Machine, having only worked with Arduino on a handful of different projects. That quickly changed as I started to make changes to different module libraries. I became much more familiar with how microcontrollers load and run programs, and the different protocols devices use to talk to each other over, with or without wires. The thing that struck me the most was how simple it all was. Most of the devices we use today are all digital electronics, which coming from a background in software development, isn't nearly as complex as I thought it all was. Putting a "digital-only" constraint on a system means that it can translate very well from the hardware domain into the software domain, where it can be abstracted and automated with ease.

If you're a software developer looking to learn more about hardware, I'd definitely recommend reading through some of the source code for some of the Tessel module libraries. They're all written in JavaScript, so they're easy to understand, but they also show you how the Tessel is communicating with the different modules. This also leads me straight into my next point...

### Open Source is Great
Tessel is the first open source project I've ever contributed to, and I love it. I think there is a lot of good that can come from open source projects, whether they be based in software, hardware, data, or otherwise. Right now there isn't nearly as much open source hardware as there is software, but there are still some good resources out there that are invaluable when it comes to starting a new hardware project. There were a few times when I was working on one of our modules and the best resources for debugging certain problems were other open source projects using similar parts.

Now that I'm all done, it's time for me to return to school for one more year. I had a great time out here and I plan to continue contributing to the project in my spare time, so expect to see me around on Github. 

See you around,<br/>
- Evan

P.S. If you're interested in working or interning for Technical Machine, and want to know more about what it's like day-to-day, [let me know](https://twitter.com/evanmsimpson)! I'd love to share more of my experiences.

![](https://31.media.tumblr.com/6409daa51bc7dc2a958542e0ec32d888/tumblr_inline_naiksywT8k1s75tgz.png)]]></content:encoded>
    <wp:post_name>95112616457</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/94836877892</link>
    <pubDate>Fri, 15 Aug 2014 14:42:21 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Jia Huang]]></category>
		<category domain="tag" nicename="jia-huang"><![CDATA[Jia Huang]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[Technical Machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[Technical Machine]]></category>
		<category domain="tag"><![CDATA[cc3k]]></category>
		<category domain="tag" nicename="cc3k"><![CDATA[cc3k]]></category>
		<category domain="tag"><![CDATA[cc3000]]></category>
		<category domain="tag" nicename="cc3000"><![CDATA[cc3000]]></category>
		<category domain="tag"><![CDATA[wifi]]></category>
		<category domain="tag" nicename="wifi"><![CDATA[wifi]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[api]]></category>
		<category domain="tag" nicename="api"><![CDATA[api]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/94836877892</guid>
    <!--<wp:post_id>94836877892</wp:post_id>-->
    <wp:post_date>2014-08-15 11:42:21</wp:post_date>
    <wp:post_date_gmt>2014-08-15 18:42:21</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Getting the CC3000 working with JavaScript</title>
    <description></description>
    <content:encoded><![CDATA[#####8/15/2014– [Jia Huang](http://blog.technical.io/search/jia+huang)

When Tessel's wifi is connected the wifi chip's features can be accessed through Node's `net` and `http` libraries.

However, there are a few features of the CC3000 that do not fit within Node's API, such as the ability to connect to a network, or exposing to a user that their network connection has been dropped. 

We recently introduced the ability to control Tessel's onboard wifi connections from JavaScript. It's done through another library called `wifi-cc3000` that now comes bundled on Tessel, much like the `tessel` library. It allows for something like this:

<pre>
var wifi = require('wifi-cc3000');

// connect to a network
function connect(){
  wifi.connect({
    security: 'wpa2'
    , ssid: '#####' // network name
    , password: '#####'
    , timeout: 30 // in seconds
  });
}

// reconnect on dropped connection
wifi.on('disconnect', function(err, data){
  console.log("disconnect emitted", err, data);
  connect(); // try to reconnect
});
</pre>

A more indepth example is on Tessel's [getting started page](http://start.tessel.io/wifi) and the full documentation is on [our docs page](https://github.com/tessel/docs/blob/master/hardware-api.md#wifi).

###How it’s implemented

The technical details behind the `wifi-cc3000` library are similar to how we expose other C functions to JS, with the exception of having to also work with the CC3000 wifi chip. 

![](https://31.media.tumblr.com/f55937c7b4ad05374fcbc16f6ddc82a4/tumblr_inline_nad094cjwo1s75tgz.png)

TI gives out a closed source firmware binary that gets loaded on to the CC3000, along with the C libraries needed to communicate with the CC3000. This provides us the socket interface and CC3000 specific functions like network connection. 

It communicates over [SPI](http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus), where our Tessel MCU acts as the master and the CC3000 is the slave device. In addition to the default SPI pins (clock, data in, data out, and slave select), it also has an interrupt pin (IRQ). 

An interrupt is raised by pulling the IRQ pin low, which triggers an interrupt on our main MCU. This allows our microcontroller to give the CC3000 a set of commands (like go connect to X network), and then go do other processing until the CC3000 responds with a connected or disconnected event.

A typical call on the CC3000 looks like this:

1. We call a CC3000 driver function.
2. The command gets translated into a SPI signal which is passed to the CC3000.
3. The CC3000 does some processing.
4. The CC3000 fires an interrupt.
5. We handle the interrupt by calling a CC3000 processing function to the interrupt handler.

Some calls from the CC3000 are unsolicited, such as when we drop a wifi network. In this case the CC3000 directly fires an interrupt without us initiating the call. 

The `wifi-cc3000` library needs to handle both types of calls:

1. Calls which are initiated from the user, such as `.connect`.
2. Unsolicited events from the CC3000, such as a `disconnected` event.

In order to make this easier, we wrote some [wrapper libraries](https://github.com/tessel/firmware/blob/126ad55e4194b4784ca7c39117774f50bdd9a15d/src/tessel_wifi.c).

#### Calls initiated by the user

Calls initiated from JS are similar to any other JS -> C exposure (like our Pin API for example). It usually follows these three steps:
<ol>
<li> Bind C functions to Tessel’s VM functions. We have two locations for this, one in the <a href="https://github.com/tessel/runtime/blob/b489d344474fc9984bcf783531b85b87c063457d/src/colony/lua_tm.c">runtime repo</a>, and another in the <a href="https://github.com/tessel/firmware/blob/126ad55e4194b4784ca7c39117774f50bdd9a15d/src/hw/l_hw.c">firmware repo</a>. The bindings on runtime relate to anything needed for Node compatibility (such as the `net` lib) while the ones in firmware relate to how Tessel specifically operates (such as Pin toggling and LEDs). Since the wifi commands we're looking at (connect, disconnect, setting timeouts) are specific to the CC3000 and not to Node, the bindings are in <a href="https://github.com/tessel/firmware/blob/126ad55e4194b4784ca7c39117774f50bdd9a15d/src/hw/l_hw.c#L713">the firmware repo</a>. A typical binding looks like this:
   
   <pre>
   static int l_wifi_is_busy(lua_State* L) {
     lua_pushnumber(L, hw_net_inuse() ||  
         tessel_wifi_is_connecting() ? 1 : 0);
	
	 return 1;
   }
   
   </pre>

   This pushes a `1` into the global Lua context for this function's return value if the wifi chip is in use, otherwise it pushes a `0`.
   
<li> Expose VM functions through a process binding to JS. All of our firmware's hardware functions are bound to the <a href="https://github.com/tessel/firmware/blob/126ad55e4194b4784ca7c39117774f50bdd9a15d/src/hw/l_hw.c#L807">`luaopen_hw` context</a>. When Tessel first boots up <a href="https://github.com/tessel/firmware/blob/126ad55e4194b4784ca7c39117774f50bdd9a15d/src/main.c#L448">we push in these functions into the VM</a>.

<li> Wrap it in a JS library. We can link to a process binding in order to access the functions exposed through `hw`. This allows us to <a href="https://github.com/tessel/firmware/blob/126ad55e4194b4784ca7c39117774f50bdd9a15d/builtin/wifi-cc3000.js#L86">call C functions</a>.
   
   <pre>
   self.isBusy = function(){
     return hw.wifi_is_busy() == 1 ? true : false;
   }
   </pre>
</ol>

#### Unsolicited calls
Unsolicited calls are more complicated since we're going from C -> JS. 

All JS is handled inside of the event loop, so in order to surface up a call from C we have to wrap our C function as if it were an event and then push it to the head of the event queue.

The process is:
<ol>
<li> Create a <a href="https://github.com/tessel/firmware/blob/126ad55e4194b4784ca7c39117774f50bdd9a15d/src/tessel_wifi.c#L50">tm_event</a> from C. In this case it’s the disconnect event.

   <pre>
   tm_event wifi_disconnect_event = TM_EVENT_INIT(wifi_disconnect_callback);
   </pre>
<li> On the C callback that the CC3000 triggers, also <a href="https://github.com/tessel/firmware/blob/126ad55e4194b4784ca7c39117774f50bdd9a15d/src/tessel_wifi.c#L192">trigger the tm_event</a>.

   <pre>
   void _cc3000_cb_wifi_disconnect ()
   {
	   ...
	   tm_event_trigger(&wifi_disconnect_event);
   }
   </pre>
<li> This <a href="https://github.com/tessel/runtime/blob/b489d344474fc9984bcf783531b85b87c063457d/src/tm_event.c#L44">pushes the event</a>  to the head of the event queue.

   <pre>
   void tm_event_trigger(tm_event* event) {
	tm_events_lock();
	if (event->pending == false) {
		event->pending = true;
		event->next = 0;
		if (event_queue_head) {
			// Link it on to the end of the existing linked list
			event_queue_tail->next = event;
			event_queue_tail = event;
		} else {
			event_queue_head = event_queue_tail = event;
		}
	}
	tm_events_unlock();
   }
   </pre>
<li> <a href="https://github.com/tessel/firmware/blob/126ad55e4194b4784ca7c39117774f50bdd9a15d/src/tessel_wifi.c#L83">Push the event message on to the VM and clean up</a>.

   <pre>
   void wifi_disconnect_callback(void) {
	  lua_State* L = tm_lua_state;
	  if (!L) return;

	  tm_event_unref(&wifi_disconnect_event);

	  lua_getglobal(L, "_colony_emit");
	  lua_pushstring(L, "wifi_disconnect_complete");
	  lua_pushnumber(L, 0);

	  tm_checked_call(L, 2);
   }
   </pre>
<li> <a href="https://github.com/tessel/firmware/blob/126ad55e4194b4784ca7c39117774f50bdd9a15d/builtin/wifi-cc3000.js#L108">Listen</a> for the hardware process in JS. 
   
   <pre>
   process.once('wifi_disconnect_complete', function(err, data){
        self.emit('disconnect', err, data);

        callback && callback();
      });
   </pre>
</ol>

For those of you who are curious and want to see the implementation, here's [pull request #40](https://github.com/tessel/firmware/pull/40), which has all the changes in order to get the `wifi-cc3000` library functional.

![](https://31.media.tumblr.com/42502ae1984a3349f78854f0584182e4/tumblr_inline_nad0cguqO61s75tgz.jpg)]]></content:encoded>
    <wp:post_name>94836877892</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/94736742342</link>
    <pubDate>Thu, 14 Aug 2014 13:22:33 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[ble]]></category>
		<category domain="tag" nicename="ble"><![CDATA[ble]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[evan simpson]]></category>
		<category domain="tag" nicename="evan-simpson"><![CDATA[evan simpson]]></category>
		<category domain="tag"><![CDATA[getting started]]></category>
		<category domain="tag" nicename="getting-started"><![CDATA[getting started]]></category>
		<category domain="tag"><![CDATA[tutorial]]></category>
		<category domain="tag" nicename="tutorial"><![CDATA[tutorial]]></category>
		<category domain="tag"><![CDATA[documentation]]></category>
		<category domain="tag" nicename="documentation"><![CDATA[documentation]]></category>
		<category domain="tag"><![CDATA[bluetooth]]></category>
		<category domain="tag" nicename="bluetooth"><![CDATA[bluetooth]]></category>
		<category domain="tag"><![CDATA[Bluetooth 4.0]]></category>
		<category domain="tag" nicename="bluetooth-40"><![CDATA[Bluetooth 4.0]]></category>
		<category domain="tag"><![CDATA[Bluetooth Smart]]></category>
		<category domain="tag" nicename="bluetooth-smart"><![CDATA[Bluetooth Smart]]></category>
		<category domain="tag"><![CDATA[Bluetooth Low Energy]]></category>
		<category domain="tag" nicename="bluetooth-low-energy"><![CDATA[Bluetooth Low Energy]]></category>
		<category domain="tag"><![CDATA[iBeacon]]></category>
		<category domain="tag" nicename="ibeacon"><![CDATA[iBeacon]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/94736742342</guid>
    <!--<wp:post_id>94736742342</wp:post_id>-->
    <wp:post_date>2014-08-14 10:22:33</wp:post_date>
    <wp:post_date_gmt>2014-08-14 17:22:33</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Getting Started with BLE + Tessel</title>
    <description></description>
    <content:encoded><![CDATA[#####8/11/2014– [Evan Simpson](http://blog.technical.io/search/evan+simpson)

*This document will be kept up-to-date on [Github](https://github.com/tessel/docs/blob/master/tutorials/ble-getting-started.md).*

This guide is meant to be suitable for a Bluetooth novice. If you find any part of this guide hard to understand or inaccurate, let us know! We'd love to fix that. We hope that after reading this you'll understand what is and is not possible with BLE, as well as know when to properly refer to a BLE device as an iBeacon.

![](https://s3.amazonaws.com/technicalmachine-assets/product+pics/2014+05+15+production+modules/ble.jpg)

### Introduction
Bluetooth Low Energy (BLE/Bluetooth 4.0/Bluetooth Smart) is the most recent incarnation of Bluetooth technology put out by the Bluetooth SIG (the organization that maintains the specification). It is designed for applications in which transferring small amounts of data at a relatively low speed makes sense, and low power consumption is necessary. It is important to understand that BLE is not at all backwards compatible with older versions of Bluetooth.

#### Comparison to Classic Bluetooth
The list of reasons why Bluetooth Classic (also known as Basic Rate/Enhanced Data Rate - BR/EDR) and BLE are incompatible is extensive, but we'll try to cover some of the more fundamental differences here. This section can help you decide whether BLE is right for the application you might have in mind.

##### Pairing and Bonding
In Bluetooth Classic, before any data can be exchanged a few things need to happen.

First, a master device needs to find a slave device to connect to. If the master has an address for a device, it can attempt to pair directly, without even scanning for devices. Bluetooth Classic devices can be either **discoverable** or **non-discoverable**, but can still be paired with while non-discoverable. So, even if the master did scan for the device and found nothing, there is still a chance the device is in range and not-discoverable, so it might as well try pairing any way. Once the two devices have paired successfully, exchanging pin codes and security keys if necessary, then they are **bonded** and can initiate a **connection**.

Once the devices are bonded, any time they come within range of each other, they will automatically connect, if possible. When the connection has been made, the devices can exchange data wirelessly as needed.

With the introduction of BLE, there are a number of differences to the connection process. First, in order to connect to a BLE device, the target device must be **advertising** that it is connectable. Second, a connection can be made without pairing, with pairing being left as an optional security mode. Finally, a connection does not have to be made in order to get data from a remote device. We'll see how this is possible later on.

##### Data Model
Bluetooth Classic is set up to stream data from one device to another. It can accomodate data rates high enough to support streaming audio. One of the most popular use cases for Bluetooth has historically been serial cable replacement, which is just a two-way communication stream, conveniently made wireless.

BLE, on the other hand, exchanges data through a database located on one of the connected devices. Rather than keep an open stream of data, data is only exchanged when the database is modified, or a connected device requests a value from the database. For this reason, it doesn't really make sense to use BLE in the same way Bluetooth Classic has been used, but there are plenty of new applications involving sensors and other devices exchanging small amounts of data, which BLE was designed for.

##### Dual Mode Devices
There are some devices, such as cell phones and computers, which need to be able to connect to both types of devices. These devices will have Bluetooth hardware that separately supports both versions. This class of devices is referred to as **dual-mode**, contrary to a **single-mode** device, which is only compatible with same-version devices and dual-mode devices.

#### BLE Roles
The BLE specification allows a device to take on various roles that define the specific actions the device may be capable of. There are really two types of roles, with each device in a network fulfilling one of each type of role. The two types are **central** or **peripheral**, and **client** or **server**.

##### Central vs Peripheral
The central and peripheral roles describe the order of command in a BLE network. The role of the central device is similar to that of the master in Bluetooth Classic. The central device is responsible for searching for and establishing a connection with one or more peripheral devices.

The role of the peripheral device is similar to that of the slave in Bluetooth Classic. The peripheral device advertises whether or not it is connectable, as well as any services it might provide. The central can use that data to decide if it should connect to the peripheral or not.

##### Client vs Server
The client and server roles describe the data ownership and transmission relationship in a BLE network. In a typical network, the central device will take on the role of client - requesting and sending data from and to one or more server devices.

Peripheral devices will typically take on the role of server. Servers keep a database of attributes that a connected client can write to, and read or subscribe to changes from.

##### Beacons
A beacon is a specific implementation of a peripheral device that does not act as a server. All of the data a central device needs from a beacon is broadcast through the advertisement, so there is no need to connect to request the data. It is also important not to confuse any generic BLE beacon with iBeacons.

### Generic Attribute Profiles
Generic Attribute Profiles (GATT Profiles) are used to define the hierarchical structure of the database a server uses to store the data it makes available to clients. A profile consists of **services**, each of which may contain multiple **characteristics**. The core specification has a small set of [pre-defined profiles](https://developer.bluetooth.org/gatt/profiles/Pages/ProfilesHome.aspx), however the specification does allow you to create your own.

#### Characteristics
A characteristic represents one data attribute that a client can access. Each characteristic can store only a single value at a time. Each characteristic can have different access permissions such as read, write, and notify.

#### Services
A service is used to group a category of characteristics. All characteristics must belong to a service. Usually when central devices are looking for a device to connect to, they will look to see if they support a particular service, rather than an individual characteristic.

#### UUIDs
Every service and every characteristic must be assigned its own Universally Unique Identifier (UUID). This UUID is how devices will look for and recognize if another device supports a particular attribute. There is a set of reserved 16-bit and 32-bit UUIDs outlined in the core specification that have a predefined or reserved use across both services and characteristics. The list of profiles linked above makes use of this reserved space. If you are looking to create your own profile, the best way to get UUIDs is through the command line tool `uuidgen` if you are on OS X or Linux, or through a simple online service like http://www.uuidgen.com/.

#### Tessel's GATT Profile
Below, we show a portion of the Tessel's GATT profile, which has two unique services. One service is for sharing the BLE module's firmware version, and the other is for sending and receiving data.

The second service has a total of 12 characteristics which can be used generically for sandboxed design and prototyping of your own services.

<pre>
{
  "services" : [
        {
            "uuid" : "08c8c7a06cc511e3981f0800200c9a66"
          , "description" : "Tessel Firmware Information"
          , "characteristics" : [
                {
                  "uuid" : "50888c106cc511e3981f0800200c9a66"
                , "id" : "c_tessel_firmware_version"
                , "description" : "Firmware Version"
                , "value" : "1.0.1"
              }
            ]
        }
      , {
            "uuid" : "d752c5fb13804cd5b0efcac7d72cff20"
          , "id" : "data_transceiver"
          , "description" : "Data Transceiving"
          , "characteristics" : [
              {
                  "uuid" : "883f1e6b76f64da187eb6bdbdb617888"
                , "id" : "c_trans_0"
                , "description" : "Transceiver Value 0"
                , "properties" : ["read", "write", "indicate", "notify"]
                , "length" : "255"
              }
              .
              .
              . // The full service contains 12 generic characteristics
              .
              .
              , {
                  "uuid" : "4a0efa07e1814a7fbd72094df3e97132"
                , "id" : "c_trans_11"
                , "description" : "Transceiver Value 11"
                , "properties" : ["read", "write", "indicate", "notify"]
                , "length" : "255"
                }
            ]
        }
  ]
}
</pre>

You can find a JSON version of the Tessel's entire GATT Profile, including omitted services and characteristics, [in the `ble-ble113a` library](https://github.com/tessel/ble-ble113a/blob/master/lib/profile.json). Please note that this is just a description of the GATT profile, which is actually defined in the firmware of the BLE module. Making changes to the GATT profile on the module requires creating a modified version of the firmware and uploading it to the module. A guide for doing this is coming soon.

### Advertisements
In order to form a connection between two devices, the peripheral device must broadcast an advertisement for the central device to see. An advertisement packet contains the perihperal device's address, as well as a device-configurable section of data that can contain various kinds of data. A scanning central device can also request a **scan response** from a peripheral, which has the same format as an advertisement, but can contain different, additional data. Think of a scan response as a second advertisement that can be sent upon request.

#### Advertising packet data
The type of data an advertisement can contain is strictly defined by the core specification and a full list of available data types can be found [here](https://www.bluetooth.org/en-us/specification/assigned-numbers/generic-access-profile). Fortunately, we have put together an [npm module called `bleadvertise`](https://www.npmjs.org/package/bleadvertise) to help you create and decode advertising data packets in a more semantic manner. Some of the more common data types to put in the advertisement are **Flags** (which is more or less mandatory), **Incomplete List of 128-bit Service UUIDs**, either **Short Local Name** or **Complete Local Name**, as well as **Manufacturer Specific Data** which is used in iBeacons. The maximum length an advertising data packet can be is 32 bytes, so this is an important consideration in designing what kinds of information to put in the advertisement and/or scan response.

#### Finding the right device
When a central device is looking for a specific device or specific type of device, it has a few options in terms of what to look for in an advertisement to determine whether or not to connect. The two most common pieces of advertising data that are examined are the device address, and the complete or incomplete list of supported services. Sometimes the address is not the best way to keep track of a device, because many devices use what is known as a **random address** which will change relatively frequently, and in this case, other information in the advertisement should be used to pick a device.

#### iBeacons
While any peripheral device can be a BLE beacon, and can beacon any data it wants to, there is now a very popular type of beacon specification created by Apple called the iBeacon. iBeacons are meant to be used for location-based applications, where high accuracy is important (i.e. inside a grocery store). The advertisement packet for an iBeacon is relatively simple consisting of a 128-bit location UUID followed by 2-Byte Major region code and 2-Byte Minor region code, marked as **Manufacturer Specific Data**. You can read more about the specification and licensing on [Apple's developer website](https://developer.apple.com/ibeacon/).

#### Advertising Examples

The following example will show you how to set up a Tessel with a custom advertisement.

<pre>
var tessel = require('tessel');
var bleLib = require('ble-ble113a');
var bleadvertise = require('bleadvertise');

var packet = {
  flags: [0x02, 0x04], // Connectable, BLE only
  incompleteUUID128 : ['08c8c7a06cc511e3981f0800200c9a66'], // Tessel Firmware Version Service UUID
  shortName : 'Tessel'
}

var ad = bleadvertise.serialize(packet);

var peripheral = bleLib.use(tessel.port['A'], function(){
  peripheral.setAdvertisingData(ad, function(){
    peripheral.startAdvertising();
    console.log('Now advertising');
  });
});
</pre>

That's it! We'll come back and add more to this later, once we learn about receiving connection events from a central device.

The example for creating an iBeacon is similar, but uses slightly different data.

<pre>
var tessel = require('tessel');
var bleLib = require('ble-ble113a');
var bleadvertise = require('bleadvertise');

var uuid = 'D9B9EC1F392543D080A91E39D4CEA95C'; // Apple's example UUID
var major = '01';
var minor = '10';

var iBeaconData = new Buffer(uuid+major+minor, 'hex'); // Create data Buffer

var packet = {
  flags: [0x04], // BLE only
  mfrData : iBeaconData
}

var ad = bleadvertise.serialize(packet);

var beacon = bleLib.use(tessel.port['A'], function(){
  beacon.setAdvertisingData(ad, function(){
    beacon.startAdvertising();
    console.log('Beaconing');
  });
});
</pre>
Since beacons generally aren't meant to connect to other devices, this is pretty much everything you need to make a beacon. Of course, if you want to beacon something besides a static value, you'll need to make some changes, but that's the gist of it.


### Connecting
Now that we understand how peripherals let central devices know they're available, let's look at how the central finds them and initiates a connection.

#### Scan for Peripherals
The first step in discovering advertising peripherals is with a device scan. In the scanning process, the central will listen for advertisements and report when it finds one. On most platforms, there will be scanning options that let you filter discovered peripherals by the service UUIDs in their advertisements, and also prevent reporting of duplicate devices. Once you have discovered a suitable device to connect to, just send a connect command and you're ready to start exchanging data!

#### Security
With BLE there are two main modes of secure data exchange - encryption and bonding, as well as three different methods for exchanging encryption keys - Just Works, Passkey Entry, and Out of Band.

##### Encryption and Bonding
With BLE, a connection can be encrypted with a short term key through **pairing**, and it can also be encrypted with a long term key through **bonding**. When paired, the encryption will last for the duration of the connection, and will need to be re-encrypted each time the connection is established. Through bonding, the devices will store the encryption keys, such that each time they re-connect, they will attempt to encrypt the connection. The simplest, however insecure, means of encrypting the connection is called **Just Works** and uses an exchanged passkey of 000000, so there is no required input from the user. The more secure options are **Paskey Entry** and **Out of Band**. To use Just Works pairing with a Tessel in the central role, call the `ble.startEncryption()` method after a connection has been made.

##### Passkey Entry
With passkey entry pairing, there is a requirement that one device be capable of displaying a passkey value (6 digits) and the other device be capable of inputting the passkey. When the passkey is displayed, it is up to the user to enter the code on the input device. Once the passkey is confirmed, the connection will be encrypted. There is no requirement that the the central or peripheral take on either display or input roles, just that both are implemented between the two devices. To enable passkey entry on a Tessel central device, call `ble.setMITMProtection(true)` as well as `ble.setIOCapabilities()` to identify the device as a display or input before scanning for devices. After connecting, once again call `ble.startEncryption()` to start the passkey process. In either central or peripheral mode, a Tessel can receive a `'passkeyDisplay'` or `'passkeyRequest'` event, and can input a displayed passkey with the `ble.enterPasskey(000000)` method.

##### Out of Band
Out of Band (OOB) pairing requires the use of another means of communication, besides BLE, to exchange encryption keys. A common example of an OOB exchange would be over NFC. Once the devices have exchanged keys over NFC, the data is relayed to the BLE controller, and the connection can be encrypted using the keys. This method is the most secure option BLE currently offers to prevent MITM attacks. Implementing OOB security on a Tessel is similar to passkey protection, however instead of needing to set the IO capabilities, you need to use `ble.setOOBData(data)`, where `data` is a 16-byte string. If either one of the connecting devices has OOB data set, then the other will need to have the same data set in order for the connection to be encrypted.

#### Connection Examples
First let's see what our code looks like on a Tessel acting as a central device that wants to connect to another Tessel acting as a peripheral. Let's assume that  the peripheral is advertising the same packet from our first advertisement example above.

<pre>
var tessel = require('tessel');
var bleLib = require('ble-ble113a');

var serviceUUID = ['08c8c7a06cc511e3981f0800200c9a66']; // UUID to filter for
var central = bleLib.use(tessel.port['A'], function(){
  central.startScanning(serviceUUID); // Start the scanning process
  central.on('discover', function(peripheral){ // Catch the discover event
    peripheral.connect(); // Connect to this device
  });
  central.on('connect', function(peripheral){ // Catch the connect event
    console.log('Connected to', peripheral.address.toString());
  });
});
</pre>

As you can see we have two events we can listen for that let us know when a new device has been discovered or connected to.The connect event works for both central and peripheral devices, so we can go back to our advertisement example and add a listener for a connect event.

<pre>
var tessel = require('tessel');
var bleLib = require('ble-ble113a');
var bleadvertise = require('bleadvertise');

var packet = {
  flags: [0x02, 0x04], // Connectable, BLE only
  incompleteUUID128 : ['08c8c7a06cc511e3981f0800200c9a66'], // Tessel Firmware Version Service UUID
  shortName : 'Tessel'
}

var ad = bleadvertise.serialize(packet);

var peripheral = bleLib.use(tessel.port['A'], function(){
  peripheral.setAdvertisingData(ad, function(){
    peripheral.startAdvertising();
    console.log('Now advertising');
  });
  peripheral.on('connect', function(connectionId){
    console.log('Connected to central device');
  });
});
</pre>

When the connection is established the central will automatically stop scanning, and the peripheral will stop advertising. Since the central can handle connections with multiple peripherals, you can start scanning again and look for another device, if needed.


### Transferring Data
Once we have established a connection, we can start transferring data back and forth between our devices. This is where the terms client and server become relevant again. For this tutorial let's assume our central will play the role of client, and the peripheral will be the server. With BLE all data is read from and written to the server's GATT database, which is that data store who's structure is defined by the GATT profile, discussed above.

#### Service Discovery
In order for a client to read and write characteristics on a remote server, it first needs to know which services and characteristics are available. To get this information, the client can request the server send over a list of all of its services and characteristics. Part of this service discovery includes a short 1-byte **handle** value for each characteristic. Once the client has the handle, it will use that instead of the 16-byte UUID for each exchange. This handle will be unique on different devices for characteristics with the same UUID, so it is always necessary to do a service discovery in order to get the proper handle, even if you already know the UUID.

#### Updating a local GATT database
Since the GATT database lives on the server, it should always have direct access to the data being exchanged. The way this is handled will vary by platform and device, but most devices that support server mode should have methods for directly updating and reading values in the GATT database.

#### Updating a remote GATT database
Once the client has access to the handle for the characteristic it needs to read or write to, doing so is pretty straightforward. Again, any reasonable platform should expose methods for reading/writing methods through its API. At this point it probably also important to mention that you should make sure the permissions on the characteristic you are trying to access allow your desired operation. On the Tessel, all of the Tessel-specific characteristics can be read, and all of the characteristics in the Transceiver service can be written and subscribed to, as well.

#### Subscribing to changes on a remote GATT database
For some applications, you don't want to periodically check if a remote value has updated, but would rather get a notification when it has, and only then read the value. BLE allows this through two similar mechanisms. A client can set up either **notifications** or **indications** on a particular characteristic, assuming the server permissions allow it. Once a client subscribes to notifications, any time the server makes a change to the subscribed characteristic, it will let the client know, along with a short preview of the data. If the entire piece of data does not fit in the notification, the client can then send a read request for the rest. An indication works the same way, except the client must send a message back to the server, acknowledging that it received the indication.

#### Data Transfer Examples
Let's go ahead and add to our earlier connection example, and make our two devices exchange data. First we'll set up our central as a client by adding a service discovery request, looking for the first transceiver characteristic, and then subscribe to notifications.

<pre>
var tessel = require('tessel');
var bleLib = require('ble-ble113a');

var options = { serviceUUIDs : ['08c8c7a06cc511e3981f0800200c9a66'] }; // UUID to filter for
var characteristicUUID = ['883f1e6b76f64da187eb6bdbdb617888'] // Characteristic we will write to
var central = bleLib.use(tessel.port['A'], function(){
  central.startScanning(options); // Start the scanning process
  central.on('discover', function(peripheral){ // Catch the discover event
    peripheral.connect();
  });
  central.on('connect', function(peripheral){
    console.log('Connected to', peripheral.address.toString());
    peripheral.discoverCharacteristics(characteristicUUID, function(err, characteristic) {
      if (characteristic.length){
        characteristic[0].notify(true);
        characteristic[0].on('notification', function(data){
          console.log('Got notification', data.toString());
        });
      }
    });
  });
});
</pre>

And now we'll update our peripheral example with some corresponing server functionality. We'll need to set it up to listen for when the client subscribes to a characteristic. Once that happens, we can periodically update the value and the client should automatically receive notifications.

<pre>
var tessel = require('tessel');
var bleLib = require('ble-ble113a');
var bleadvertise = require('bleadvertise');

var packet = {
  flags: [0x02, 0x04], // Connectable, BLE only
  incompleteUUID128 : ['08c8c7a06cc511e3981f0800200c9a66'], // Tessel Firmware Version Service UUID
  shortName : 'Tessel'
}

var ad = bleadvertise.serialize(packet);

var peripheral = bleLib.use(tessel.port['B'], function(){
  peripheral.setAdvertisingData(ad, function(){
    peripheral.startAdvertising();
    console.log('Now advertising');
  });
  peripheral.on('connect', function(connectionId){
    console.log('Connected to central device');
  });
  peripheral.on( 'remoteNotification', function(connectionId, index){ // Catch when remote subscribes
    console.log('Notifications started');
    var count = 0;
    setInterval(function(){
      peripheral.writeLocalValue(index, new Buffer( count.toString() )); // Write to [index] transceiver value
      count++;
    }, 2000);
  });
});
</pre>

### Testing and Debugging
When working with BLE you might encounter an issue that you realize you have no way to resolve, especially if you are using a device which you cannot make any changes to. The following are some of the most helpful that we've found in working with Bluetooth.

#### LightBlue
LightBlue is an OS X and iOS application that allows you to see and connect to BLE devices, as well as run a service discovery, and make read/write/notify requests. This is great if you are working with a peripheral device and want to see it from the perspective of a central device.

#### Noble
Noble is a Node library which allows you to access the BLE capabilities of newer Mac Books as well as Linux laptops with the appropriate hardware. Noble allows you to set up your laptop as a central device, and its companion library, Bleno, allows you to set up the computer as a peripheral.

### Links
* [ble-ble113a library on Github](https://github.com/tessel/ble-ble113a)
* [Noble](https://github.com/sandeepmistry/noble)
* [More on GATT Profiles](https://developer.bluetooth.org/TechnologyOverview/Pages/GATT.aspx)
* [Advertisement data types](https://www.bluetooth.org/en-us/specification/assigned-numbers/generic-access-profile)
* [BLE Security](https://developer.bluetooth.org/TechnologyOverview/Pages/LE-Security.aspx)
* [Bluetooth 4.1 Core Specification](https://www.bluetooth.org/en-us/specification/adopted-specifications)

*This document will be kept up-to-date on [Github](https://github.com/tessel/docs/blob/master/tutorials/ble-getting-started.md).*]]></content:encoded>
    <wp:post_name>94736742342</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/94640924127</link>
    <pubDate>Wed, 13 Aug 2014 12:51:43 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[projects]]></category>
		<category domain="tag" nicename="projects"><![CDATA[projects]]></category>
		<category domain="tag"><![CDATA[projects portal]]></category>
		<category domain="tag" nicename="projects-portal"><![CDATA[projects portal]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[instructables]]></category>
		<category domain="tag" nicename="instructables"><![CDATA[instructables]]></category>
		<category domain="tag"><![CDATA[thingiverse]]></category>
		<category domain="tag" nicename="thingiverse"><![CDATA[thingiverse]]></category>
		<category domain="tag"><![CDATA[ready-mades]]></category>
		<category domain="tag" nicename="ready-mades"><![CDATA[ready-mades]]></category>
		<category domain="tag"><![CDATA[modules]]></category>
		<category domain="tag" nicename="modules"><![CDATA[modules]]></category>
		<category domain="tag"><![CDATA[modularity]]></category>
		<category domain="tag" nicename="modularity"><![CDATA[modularity]]></category>
		<category domain="tag"><![CDATA[npm]]></category>
		<category domain="tag" nicename="npm"><![CDATA[npm]]></category>
		<category domain="tag"><![CDATA[open source]]></category>
		<category domain="tag" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="tag"><![CDATA[OSHW]]></category>
		<category domain="tag" nicename="oshw"><![CDATA[OSHW]]></category>
		<category domain="tag"><![CDATA[OSS]]></category>
		<category domain="tag" nicename="oss"><![CDATA[OSS]]></category>
		<category domain="tag"><![CDATA[3D Printing]]></category>
		<category domain="tag" nicename="3d-printing"><![CDATA[3D Printing]]></category>
		<category domain="tag"><![CDATA[3DP]]></category>
		<category domain="tag" nicename="3dp"><![CDATA[3DP]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/94640924127</guid>
    <!--<wp:post_id>94640924127</wp:post_id>-->
    <wp:post_date>2014-08-13 9:51:43</wp:post_date>
    <wp:post_date_gmt>2014-08-13 16:51:43</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Introducing the Tessel Projects Portal</title>
    <description></description>
    <content:encoded><![CDATA[#####8/13/2014– [Kelsey Breseman](//blog.technical.io/search/kelsey+breseman)

We've just released [Tessel’s Projects Portal](//projects.tessel.io), a site for Tessel hackers to show off what they’ve made. It’s designed to be simple: an aggregator requiring little more than a Github link and a picture to show off a project. The simplicity is deceptive, though: there’s something important happening at the intersection of open source software and a physically modular open system.

The interaction for the Tessel projects portal lies somewhere between Instructables and Thingiverse. Since your projects might require some special setup (hardware or software), projects are given space for photos and explanation– like Instructables.

There’s also the capacity for plug-and-play interaction. For example, [clap-on lights](https://projects.tessel.io/projects/tessel-clap-switch) is now a solved problem. Plug the pieces together, push the code, and clap: easy as Ikea. Projects exist fully-formed, and anyone can just download the product, like on Thingiverse.

But what happens when you build something more complex? A Nest-type project for your greenhouse, for example, or a motion-tripped home security camera. It’s not exactly DIY when the interaction is plug-and-play (and clone the code). It’s more like a system of highly configurable modular appliances.

This is, I think, a step closer to the promise of consumer 3D printing. When you think of 3D printers in every home, you think of people downloading products all the time, printing out the objects they need, maybe customized for their particular application.

With current 3DP, you see a lot of excitement, but not a lot of practical purpose in the consumer sphere. It turns out that there aren’t many everyday problems that can be solved with a specifically shaped piece of weak plastic. But what if you could add brains to that piece of plastic? What if right alongside the 3D file was a link to some code and two or three simple parts that you could slot together?

This is the intersection of freely licensed software and open source hardware; this is open source products. You can get a kit, tweak it to your needs, and interact from an interface (online or off) that you control.

What’s more, you can reach in to this product at any level; nothing is proprietary, and there’s no warranty to void. If you’re a software developer, you can fork the way that data is collected, the way it’s presented, the interaction with outside libraries. If you know hardware, you can swap out your own parts in place of our modules and still run the code. This is [open](http://opensource.org/); this is [indie](http://indiewebcamp.com/why); this is just plain cool.

Open source has a lot of existing community and infrastructure, but not yet one with this particular facet of digital and physical modularity. That’s why we made the Projects Portal, hoping to develop it into a testing ground for open projects and products. We seek to empower, and this is a powerful idea.

You can use our Projects Portal to gauge reactions to your projects and products. You can try to determine if an interaction holds value, seeking beta testers from our community of people who already have the parts.

If you want to test out something someone has already made, you can `git clone`, `tessel run`. It’s simple, and you don’t have to reinvent it.

There’s also the whole spectrum between: you can [write a library](http://blog.technical.io/post/94084496782/making-a-tessel-style-library-for-third-party-hardware) for a component, or a node module for an interaction. You can make [a piece of a project](https://projects.tessel.io/projects/motion-activated-camera), a unitary interaction, so people can fork it or require it and build from there.

This is a whole open source ecosystem; it’s time to start building.

*Check out the projects portal at [projects.tessel.io](//projects.tessel.io).*

![](https://31.media.tumblr.com/da683d1f637df0013826cba5847ed2cb/tumblr_inline_na7ix1iJt71s75tgz.png)]]></content:encoded>
    <wp:post_name>94640924127</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/94552503777</link>
    <pubDate>Tue, 12 Aug 2014 14:37:18 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[hiring]]></category>
		<category domain="tag" nicename="hiring"><![CDATA[hiring]]></category>
		<category domain="tag"><![CDATA[new hire]]></category>
		<category domain="tag" nicename="new-hire"><![CDATA[new hire]]></category>
		<category domain="tag"><![CDATA[projects]]></category>
		<category domain="tag" nicename="projects"><![CDATA[projects]]></category>
		<category domain="tag"><![CDATA[portal]]></category>
		<category domain="tag" nicename="portal"><![CDATA[portal]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/94552503777</guid>
    <!--<wp:post_id>94552503777</wp:post_id>-->
    <wp:post_date>2014-08-12 11:37:18</wp:post_date>
    <wp:post_date_gmt>2014-08-12 18:37:18</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessel Projects Page, New Hire, and More</title>
    <description></description>
    <content:encoded><![CDATA[#####8/12/2014– [Updates](http://blog.technical.io/search/update)

###Tessel Projects Portal
We'd like to invite you to try our new (beta) projects portal!
Check it out at [projects.tessel.io](//projects.tessel.io).
Find ideas of what to build next, get example code, show the community what you're capable of building. We’re excited to see the things you’ve made!

![](https://31.media.tumblr.com/c6f33d9deb93b42efb147db881d8d4bf/tumblr_inline_na7idjuzxq1s75tgz.png)

###Updates
In the last month, we..

* Published a bunch of firmware updates, JS/Node compatibility fixes, and wifi improvements (see the [changelogs](http://technical.us7.list-manage.com/track/click?u=f32fc2fe1a1f2c3463a081e4b&id=d90b73b95b&e=15dbbbe950))
* [Exposed Wifi in the JS](http://technical.us7.list-manage.com/track/click?u=f32fc2fe1a1f2c3463a081e4b&id=da00f22398&e=15dbbbe950)
* Wrote the [BLE getting started guide](http://technical.us7.list-manage1.com/track/click?u=f32fc2fe1a1f2c3463a081e4b&id=462ca81600&e=15dbbbe950)
* Successfully ported LuaJIT to ARM Cortex M3 on PC. We still need to get it working on Tessel itself to realize the speed improvements. Look for a timeline soon!
* Beefed up our testing infrastructure so that we can run a suite of tests on every module with every change to the firmware or module drivers
* Sponsored [Nodebots day](http://technical.us7.list-manage2.com/track/click?u=f32fc2fe1a1f2c3463a081e4b&id=f2edcc8ccd&e=15dbbbe950)

We also made progress on:

* Building out the backend infrastructure for remote code deployment. Over the next week, we need to add the firmware-level changes to accept tarballs over Wifi
* Putting together a better internal system of engagement metrics (support, sales, sponsorship, etc.) so we can work with you more effectively
* Rewriting our JS->Lua translator in C so that we can eventually compile on Tessel itself. This will allow the use of functions like eval() and Function()

Company-wise, we made a hire! We’re pleased to announce [Ken Nierenhausen](http://technical.us7.list-manage1.com/track/click?u=f32fc2fe1a1f2c3463a081e4b&id=0c2301cd3b&e=15dbbbe950) is joining our team. One of his focuses will be improving Node compatibility (near and dear to all of our hearts).

The [docs repo](http://technical.us7.list-manage.com/track/click?u=f32fc2fe1a1f2c3463a081e4b&id=6900d38e27&e=15dbbbe950) is continually growing and changing. At the moment, the repo holds more tutorials than we link to on tessel.io/docs, so feel free to poke around. We’ll try to highlight some of these documents in upcoming blog posts.
 
###Research and Development
Expect to see blog posts soon regarding our efforts in R&D. We're currently looking into:

* Potential new modules
* A new version of Tessel
* Tools to help you transition from a prototype to a scalable embedded system
* Expanding the Tessel module ecosystem to other platforms (so far we have the Tessel library working on the Raspberry Pi and Cubieboard: [node module [pre-production]](http://technical.us7.list-manage.com/track/click?u=f32fc2fe1a1f2c3463a081e4b&id=65f943c0a1&e=15dbbbe950))

All of these will take some time to develop, but what we wanted to let you in on what we’re exploring. We'd love to hear from you on the [Forums](http://technical.us7.list-manage.com/track/click?u=f32fc2fe1a1f2c3463a081e4b&id=4085f46a6b&e=15dbbbe950) or via [email](team@technical.io)!

See you on the forums,<br/>
Eric, Jia, Jon, Kelsey, Ken, Kevin, Tim, Evan, Nathan, and Paige]]></content:encoded>
    <wp:post_name>94552503777</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/94443447307</link>
    <pubDate>Mon, 11 Aug 2014 12:24:49 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Ken Nierenhausen]]></category>
		<category domain="tag" nicename="ken-nierenhausen"><![CDATA[Ken Nierenhausen]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[Technical Machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[Technical Machine]]></category>
		<category domain="tag"><![CDATA[ucsd]]></category>
		<category domain="tag" nicename="ucsd"><![CDATA[ucsd]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/94443447307</guid>
    <!--<wp:post_id>94443447307</wp:post_id>-->
    <wp:post_date>2014-08-11 9:24:49</wp:post_date>
    <wp:post_date_gmt>2014-08-11 16:24:49</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>New Hire: Ken Nierenhausen</title>
    <description></description>
    <content:encoded><![CDATA[#####8/11/2014– [Ken Nierenhausen](http://blog.technical.io/search/ken+nierenhausen)

Hey guys!

I’m Ken. I am the first new hire that happens to not have gone to Olin. I come from San Diego, and after receiving my degree in Computer Engineering from UCSD I’m excited to be joining the team.

![](https://31.media.tumblr.com/9f9aa509008d9f8af6d8fa44aa75dd62/tumblr_inline_na5h1sDiRZ1s75tgz.jpg)

During my time in San Diego I focused a lot on lower level software development and design; architecture, networking, things like that. I interned at Pico Digital as well as ViaSat Inc. During my time at UCSD I became interested in the startup world due to local entrepreneurs like Brant Cooper. I decided to give it a try and started working on the early stages of my own startup with a couple buddies of mine. We called ourselves Allnighters and were focused on bringing up to date sales, deals, and discounts directly to your phone based off your location. Although we did have a taste of success thanks to San Diego’s up and coming startup scene, our team fell apart as we did not have the resources or support that we needed to continue. My failures taught me a lot, and I joined an on-campus startup incubator as a student advisor to try and help teams make it further than I did. It was a great experience that instilled in me an entrepreneurial mindset.

Before graduation, seeing that I didn’t have my own startup anymore, I accepted an offer with a big name software company.

After graduation I took a trip to San Francisco to experience where I was going to be working. This is where I managed to get ahold of Jon McKay, an old friend who had started his own company. I was interested in seeing how managing his own startup was going so I went and saw the place. It was fantastic. There was a brilliant team of software and hardware developers and I wanted to be part of it. Jon asked me to interview and after a few discussions, interviews, and a contracted project, I was lucky enough to get onboard with the visionary members of Technical Machine. I said no to the big name software company and made my way to Berkeley.

My main focus here will be on firmware and runtime. My first big project is going to be trying to get Tessel to be as node compatible as possible. In the meantime I’ll be working on improving the performance of Tessel runtime as well as incorporating some new ideas into firmware.

I’m excited to be part of the team and look forward to interacting with all of you. If you want to contact me feel free to email me at [ken@technical.io](mailto:ken@technical.io)

Cheers!]]></content:encoded>
    <wp:post_name>94443447307</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/94173952967</link>
    <pubDate>Fri, 08 Aug 2014 14:04:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[iBeacon]]></category>
		<category domain="tag" nicename="ibeacon"><![CDATA[iBeacon]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[BLE]]></category>
		<category domain="tag" nicename="ble"><![CDATA[BLE]]></category>
		<category domain="tag"><![CDATA[Bluetooth]]></category>
		<category domain="tag" nicename="bluetooth"><![CDATA[Bluetooth]]></category>
		<category domain="tag"><![CDATA[Bluetooth Low Energy]]></category>
		<category domain="tag" nicename="bluetooth-low-energy"><![CDATA[Bluetooth Low Energy]]></category>
		<category domain="tag"><![CDATA[evan simpson]]></category>
		<category domain="tag" nicename="evan-simpson"><![CDATA[evan simpson]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[data]]></category>
		<category domain="tag" nicename="data"><![CDATA[data]]></category>
		<category domain="tag"><![CDATA[IoT]]></category>
		<category domain="tag" nicename="iot"><![CDATA[IoT]]></category>
		<category domain="tag"><![CDATA[Bluetooth Smart]]></category>
		<category domain="tag" nicename="bluetooth-smart"><![CDATA[Bluetooth Smart]]></category>
		<category domain="tag"><![CDATA[Bluetooth 4.0]]></category>
		<category domain="tag" nicename="bluetooth-40"><![CDATA[Bluetooth 4.0]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/94173952967</guid>
    <!--<wp:post_id>94173952967</wp:post_id>-->
    <wp:post_date>2014-08-08 11:04:00</wp:post_date>
    <wp:post_date_gmt>2014-08-08 18:04:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>You Probably Don’t Need an iBeacon</title>
    <description></description>
    <content:encoded><![CDATA[#####8/8/2014– [Evan Simpson](http://blog.technical.io/search/evan+simpson)

### First, a quick background on Bluetooth

You might remember a time when the word Bluetooth was synonymous with hands-free headsets and wireless speakers. These devices gave Bluetooth [a bad reputation](http://www.yelp.com/topic/san-francisco-why-do-all-bluetooth-headsets-suck-i-am-going-back-to-wired) with their poor sound quality, poor battery life, and poor interface for connecting to cell phones and computers. Since then, however, Bluetooth has come a long way, seeing huge improvements in device quality, as well as a much greater level of support in mobile and desktop operating systems.

Back in 2010, the Bluetooth Special Interest Group (SIG) put out the 4.0 specification for Bluetooth. The goal of the new specification was to enable the creation of Bluetooth devices which operate at a low data rate, have low power consumption, and have low manufacturing costs. This was a departure from the existing specification, which had been optimized over the years for always-open, high data-rate streams. This old standard was great for applications like streaming audio, but not for others such as reading data from sensors.

The new specification is designed for devices that only needed to connect occasionally to exchange small pieces of information, and can be put into a low power state in between exchanges. This mode of operation means big power savings for devices, to the extent that some Bluetooth 4.0 devices can be powered by a coin cell battery for months to years at a time, depending on the application. In the past few years, Bluetooth 4.0 has been rebranded as Bluetooth Smart by the SIG, but is now more colloquially known as Bluetooth Low Energy, or BLE.

### Enter Apple

Though the specification came out over 4 years ago now, BLE has only much more recently seen mainstream adoption into connected devices. Arguably, one of the greatest contributors to BLE's popularity has been Apple. By looking at Google search trends, we can see a surge in interest for "Bluetooth 4.0" in October of 2011, right around the time the iPhone 4S was released with support for, you guessed it, Bluetooth 4.0. In being the first big player to support the technology, Apple paved the way for other device manufacturers to support BLE, by giving them a central device to connect to. For comparison, the Android SDK didn't have any support for BLE until late 2013 and will not have complete support for everything BLE can do until the release of Android L, and Windows Phone only began official support for BLE with this year's 8.1 update.

![Google Search trends for “Bluetooth 4.0”](https://31.media.tumblr.com/cab5c6ae4043761d341ea438e4c2820a/tumblr_inline_na03vpOFN61s75tgz.png)

Google Search trends for “Bluetooth 4.0”

More recently though, Apple has released a specification for creating location based services with BLE devices, under the brand iBeacon. iBeacons have become popular enough and we get  enough questions about them that it warrants clarifying what they are, how they work, and how they are different from other BLE devices.

### What is an iBeacon?

Part of the Bluetooth 4.0 specification outlines a format for an "advertising data packet" which is a small amount of data (maximum 32 bytes) that a BLE device can publicly broadcast to any other nearby devices, without needing to connect. The primary use for the advertisement is for a device to advertise the kind of services or data it provides, information on how to connect to it, or the device's name. However, the format specification does allow for some of the data available on the device to be broadcast as well, so other devices don't have to make a connection in order to collect sensor data. When a BLE device is designed to put all of the data other devices might need in the advertisement, it is typically called a “beacon” - all information is out-going.

At their most basic, iBeacons can be seen as a proprietary beacon, where they make use of the specification's allowance for "Manufacturer Specific Data", which can contain any arbitrary data that will fit. Apple defined their own format for a single location code to be contained in this section of an advertisement. Any other nearby BLE device (such as a smart phone) can then pick up the advertisement and parse out the location code. 

iBeacons are deceptively simple to create, because they only require a BLE radio chip (almost __any__ BLE radio chip will do) and don't require any application-specific software to run on the device itself. It is up to the application running on the discovering device to know what to do with the location code pre-programmed on the iBeacon. This means that any device which implements the BLE specification can function as what Apple has trademarked an iBeacon. The actual capabilities of an iBeacon are minimal, with their utility lying in the applications people create around them. 

The unfortunate side effect of the popularity of iBeacons is that they have become synonymous with BLE to many people, in much the same way that Bluetooth used to be synonymous with hands-free headsets. One thing I’ve seen all too often is products like [Tile](http://www.thetileapp.com/) and [Bean](http://punchthrough.com/bean/) being referred to as iBeacons (although the Bean does allow you to set it up as an iBeacon, it isn’t by default).  Not only has this led to a lot of confusion for people trying to get started prototyping with BLE, but it has also resulted in a sort of “bandwagon” effect, where people trying to design systems around iBeacons in order to take advantage of the brand power, but for applications where an iBeacon maybe isn’t appropriate. It means that much of what BLE is capable of is being overlooked, and that’s not to mention other means of wireless communication which might be appropriate in certain applications as well (but we can save that discussion for another time).

So how does Technical Machine’s BLE module fit in with all of this? Our BLE module allows you full control over the advertisement data, making it easy to [set up an iBeacon](https://gist.github.com/EvanSimpson/38f03e0b201ef0115e23), or design a beacon format of your own. If you’re looking into an open alternative location service format without the licensing hurdles Apple has for iBeacons, check out [AltBeacon](http://altbeacon.org/). If you want your device to be more than a beacon, the BLE module gives you access to all of the functionality outlined in the 4.0 specification, so you can interact with any other BLE device.

If you want to learn more about how BLE works, and how to get started making BLE connected devices, check out our [Getting Started Guide](https://github.com/tessel/docs/blob/master/tutorials/ble-getting-started.md).]]></content:encoded>
    <wp:post_name>94173952967</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/94084496782</link>
    <pubDate>Thu, 07 Aug 2014 14:44:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[adafruit]]></category>
		<category domain="tag" nicename="adafruit"><![CDATA[adafruit]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[seeed]]></category>
		<category domain="tag" nicename="seeed"><![CDATA[seeed]]></category>
		<category domain="tag"><![CDATA[pir]]></category>
		<category domain="tag" nicename="pir"><![CDATA[pir]]></category>
		<category domain="tag"><![CDATA[pulse]]></category>
		<category domain="tag" nicename="pulse"><![CDATA[pulse]]></category>
		<category domain="tag"><![CDATA[infrared]]></category>
		<category domain="tag" nicename="infrared"><![CDATA[infrared]]></category>
		<category domain="tag"><![CDATA[diy]]></category>
		<category domain="tag" nicename="diy"><![CDATA[diy]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[wires]]></category>
		<category domain="tag" nicename="wires"><![CDATA[wires]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/94084496782</guid>
    <!--<wp:post_id>94084496782</wp:post_id>-->
    <wp:post_date>2014-08-07 11:44:00</wp:post_date>
    <wp:post_date_gmt>2014-08-07 18:44:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Making a Tessel-style Library for Third-Party Hardware</title>
    <description></description>
    <content:encoded><![CDATA[#####8/7/2014– [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

*Find this document on [Tessel's docs repo](https://github.com/tessel/docs/blob/master/tutorials/make-external-hardware-library.md), where it will be kept up to date.*

There's a lot of existing hardware from Seeed, Adafruit, and elsewhere that can be used with Tessel. Though it's not that difficult to hack together a project based on the hardware API docs, making an npm module for the hardware is a nice way to interface cleanly with the hardware, and reuse a custom API across projects.

I've so far done this with a [PIR motion detector](https://github.com/Frijol/PIR) and a [pulse sensor](https://github.com/Frijol/PulseSensor):

![](https://lh3.googleusercontent.com/-Zcmg7NPefAM/U-LafNQe2lI/AAAAAAAAJno/jlCWeBbDWxU/w882-h496-no/20140801_113753.jpg)

![](https://lh4.googleusercontent.com/-lWNlkrCA8uk/U-KRg6CqiWI/AAAAAAAAJm4/JvdyY_J5V54/w882-h496-no/20140806_133454.jpg)

This tutorial walks you through the process to go from a piece of hardware to a Tessel-style npm module.

For this tutorial, I used a [PIR motion detector from Adafruit](http://www.adafruit.com/products/189) to make [this npm module](https://www.npmjs.org/package/pir).

### Understanding your hardware
Before you start, it would be a good idea to check out Tessel's [hardware docs](tessel.io/docs/hardware) and [hardware api docs](tessel.io/docs/hardwareAPI). These two documents will give you a good idea of Tessel's capabilities and available interfaces.
As a general rule, anything that can be used with an Arduino can also be used with a Tessel. Tessel reads in a maximum of 3.3V, so if your part outputs more than that, don't fry the board!

Tessel can:

* Read and write digital signals (3.3V when high; 0V when low)
* Write PWM signals ("duty cycles")
* Read analog signals
* Communicate over SPI (MISO, MOSI, and SCK)
* Communicate over I2C (SDA and SLC)
* Communicate over UART (TX and RX)
* Provide 5V power* (if Tessel is powered over USB. Please see [Powering Tessel](https://tessel.io/docs/power))
* Provide 3.3V power (a digital pin set to output(1) (high))

For the PIR sensor, I needed one 3.3V digital signal pin and 5V of power. It will typically say what you need on the manufacturer's page, straight out or on a datasheet. Adafruit typically says these things in the [description field](http://www.adafruit.com/products/189#description-anchor) of a product page, as does [Seeed](http://www.seeedstudio.com/depot/PIR-Motion-sensor-module-p-74.html).

### Setting up the repo
Tessel's modules all have the same basic directory. You can see a template for Tessel modules in general on our style guide [here](https://github.com/tessel/style/tree/master/Templates).
You might want to check out the PIR repo set up for development [here](https://github.com/Frijol/PIR/tree/51ce84784f09902868e67f8a6c8e0270c85eb6cb).

Here are notes on some of the key files:

####index.js ([template](https://github.com/tessel/style/blob/master/Templates/index.js))
This file is the driver for the hardware. Here's the basic setup:

* Require util and the event emitter, along with any other dependencies. These let you write event-driven APIs.
* Make a constructor function that instantiates the hardware as an object. Its two arguments are "hardware" and a callback. The function should emit a "ready" event that returns the object when it is ready. For the PIR, it's "ready" as soon as the object is instantiated. For something more complex, e.g. the Ambient module, it's not "ready" until it verifies that it has the correct firmware version.
 * `hardware` specifies where the hardware is connected to Tessel. For modules, it's a port. For external hardware, this will most likely be a port and a pin (e.g. tessel.port['GPIO'].pin['A3']). You should probably also add error handling in case the wrong hardware type is passed in (e.g. just a port when you need a pin) or for specification of the wrong type of pin (you can see which pins are digital, analog and PWM in the examples [here](https://tessel.io/docs/hardwareAPI#pins)). You can check the [PIR code](https://github.com/Frijol/PIR/blob/master/index.js) for examples of this error handling.
 * `callback(err, obj)` should return an error if there are any errors connecting, or if there are no errors, should return the object as its second argument.
* Functions: this is the fun part! What do you want as the API for your hardware? What's useful? What do you want to expose?
For the PIR motion detector, I only have one function, which reads the pin. Most of the useful information is better exposed as events for "movement", "stillness", and "change".
* use function: The standard require for a Tessel module is require('module').use(tessel.port['PORT']). The "use" function takes hardware specification and a callback, and passes them to the object constructor.
* exports: Export the object function and the use function.

####package.json ([template](https://github.com/tessel/style/blob/master/Templates/package.json))
Use `npm init` to generate most of this file.

Other items of note:

* You do not need the `tessel` npm package as a dependency.
* Add a "hardware" section. By default, Tessel pushes the entire directory so that any dependencies are included. With a "hardware" section, you can specify files and folders to ignore when pushing to embedded devices. For our modules, we list "./test" and "./examples".

####examples folder ([template](https://github.com/tessel/style/tree/master/Templates/examples))
You need at least one example. This should show basic functionality of the hardware. [Mine](https://github.com/Frijol/PIR/blob/master/examples/pir.js) waits for a ready event, then logs a message on the emission of "movement" and "stillness" events.
When you require the module, refer to '../' rather than the module name.

####test folder ([template](https://github.com/tessel/style/tree/master/Templates/test))
We use the node module "tinytap" for testing. Every functionality that can be tested without physical interaction should be testable with `tessel run test/*.js`.

####README.md ([template](https://github.com/tessel/style/blob/master/module_RM_template.md))
Your readme is your documentation. For consistency with Tessel modules, check out the template. We use the node module "marktype" to make pretty, linkable API documentation.

### Connecting your hardware to Tessel

Connect your hardware based on the [hardware](https://tessel.io/docs/hardware#pins-and-ports) and [API](https://tessel.io/docs/hardwareAPI#pins) documentation.
Instructions for establishing SPI/UART/I2C are part of the API docs.

At the top of your README, write which pins should be connected to which between the Tessel and the external hardware.
A picture of the setup would also be useful to include in the README.

### Establishing communication

Set up something basic to make sure you can connect to the sensor.
I like to start with example code: require Tessel, read the pin, see what kind of values we get.

If you're working with more complex hardware, you might need to wake up the hardware with a wakeup sequence. This sort of thing will be documented in the part's datasheet.

If there is existing Arduino code for the hardware, this can be a good starting point to poke around and get an understanding of how to interface with the device.

### Writing an API

Once you're able to connect and get some basic functionality out of the device, start writing your API.

Start with the object constructor and the `use` function in your index.js file. Make sure you can require the hardware and have it connect.

Now, draft up your API. How might people want to interface with this piece of hardware? How can you make it intuitive? If you'd like feedback on a proposed API, feel free to post it to [the RFC category of our forums](https://forums.tessel.io/category/rfc).

As a general rule, top priority is intuitive interaction. Second priority is exposing as much as you can.

### Writing tests

Write tests as you go.

* Initializing the object should callback the object, return the object, and emit the object as a ready event.
* Super thorough tests check to make sure errors are emitted when they should be.

### Writing an example

The example named `<hardware>.js` should be a simple "is it working" example.

Feel free to write other examples to show off different uses of the hardware and the API you've built!

### Writing the docs

Please follow the template formatting [here](https://github.com/tessel/style/blob/master/module_RM_template.md) to write your README.

Document every method, event, and property.

Complete documentation is important! If you don't document a method, most people will never realize that method exists.

### Publishing
Publish your module to npm! If you've never done that, [this](https://gist.github.com/coolaj86/1318304) is a good tutorial. Be sure to include 'tessel' in the keywords of your package.json so that people can find it!

Other places you might want to publish as well:

* [This list of tools to use with Tessel](https://github.com/tessel/docs/blob/master/tools.md)
* [Tessel's forums](https://forums.tessel.io/)

*Find this document on [Tessel's docs repo](https://github.com/tessel/docs/blob/master/tutorials/make-external-hardware-library.md), where it will be kept up to date.*]]></content:encoded>
    <wp:post_name>94084496782</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/93535347432</link>
    <pubDate>Fri, 01 Aug 2014 18:35:35 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[tools]]></category>
		<category domain="tag" nicename="tools"><![CDATA[tools]]></category>
		<category domain="tag"><![CDATA[tessel tools]]></category>
		<category domain="tag" nicename="tessel-tools"><![CDATA[tessel tools]]></category>
		<category domain="tag"><![CDATA[tutorial]]></category>
		<category domain="tag" nicename="tutorial"><![CDATA[tutorial]]></category>
		<category domain="tag"><![CDATA[tutorials]]></category>
		<category domain="tag" nicename="tutorials"><![CDATA[tutorials]]></category>
		<category domain="tag"><![CDATA[documentation]]></category>
		<category domain="tag" nicename="documentation"><![CDATA[documentation]]></category>
		<category domain="tag"><![CDATA[docs]]></category>
		<category domain="tag" nicename="docs"><![CDATA[docs]]></category>
		<category domain="tag"><![CDATA[software]]></category>
		<category domain="tag" nicename="software"><![CDATA[software]]></category>
		<category domain="tag"><![CDATA[firmware]]></category>
		<category domain="tag" nicename="firmware"><![CDATA[firmware]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[contribution guide]]></category>
		<category domain="tag" nicename="contribution-guide"><![CDATA[contribution guide]]></category>
		<category domain="tag"><![CDATA[spi]]></category>
		<category domain="tag" nicename="spi"><![CDATA[spi]]></category>
		<category domain="tag"><![CDATA[i2c]]></category>
		<category domain="tag" nicename="i2c"><![CDATA[i2c]]></category>
		<category domain="tag"><![CDATA[uart]]></category>
		<category domain="tag" nicename="uart"><![CDATA[uart]]></category>
		<category domain="tag"><![CDATA[avr]]></category>
		<category domain="tag" nicename="avr"><![CDATA[avr]]></category>
		<category domain="tag"><![CDATA[npm]]></category>
		<category domain="tag" nicename="npm"><![CDATA[npm]]></category>
		<category domain="tag"><![CDATA[node]]></category>
		<category domain="tag" nicename="node"><![CDATA[node]]></category>
		<category domain="tag"><![CDATA[module]]></category>
		<category domain="tag" nicename="module"><![CDATA[module]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/93535347432</guid>
    <!--<wp:post_id>93535347432</wp:post_id>-->
    <wp:post_date>2014-08-01 15:35:35</wp:post_date>
    <wp:post_date_gmt>2014-08-01 22:35:35</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tools for Tessel</title>
    <description></description>
    <content:encoded><![CDATA[#####8/1/2014– [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

Since Tessel has come out, people have been building tools and tutorials to work with the platform. Internally, we've been building tutorials as they become relevant, and externally, community members have published npm libraries either specifically for Tessel or to make Tessel work better with existing hardware and software.

Throughout, I've been quietly collecting these links. However, I realized my list would be much more useful published– so here you go.

I'll be keeping it up to date on Github [here](https://github.com/tessel/docs/blob/master/tools.md). Please PR if there's anything I'm missing!


### Contents

* [Tutorials](#tutorials)
* [Software tools](#software-tools)
* [Hardware libraries](#hardware-libraries)
* [Contributing](#contributing)


### Tutorials

#### Communications

&#x20;<a href="#api-USB-message-passing-https-github-com-tessel-docs-tree-master-tutorials-usb_messages" name="api-USB-message-passing-https-github-com-tessel-docs-tree-master-tutorials-usb_messages">#</a> [USB message passing]( https://github.com/tessel/docs/tree/master/tutorials/usb_messages )  
USB communication between Tessel and Node on your PC.

&#x20;<a href="#api-Getting-started-with-BLE-https-github-com-tessel-docs-blob-master-tutorials-ble-getting-started-md" name="api-Getting-started-with-BLE-https-github-com-tessel-docs-blob-master-tutorials-ble-getting-started-md">#</a> [Getting started with BLE]( https://github.com/tessel/docs/blob/master/tutorials/ble-getting-started.md )  
A guide to Bluetooth Low Energy for beginners, particularly flavored for Tessel.

&#x20;<a href="#api-External-GPIO-Pin-Interrupts-API-https-github-com-tessel-docs-blob-master-tutorials-gpio-interrupts-md" name="api-External-GPIO-Pin-Interrupts-API-https-github-com-tessel-docs-blob-master-tutorials-gpio-interrupts-md">#</a> [External GPIO Pin Interrupts API]( https://github.com/tessel/docs/blob/master/tutorials/gpio-interrupts.md )  
External interrupts are used for getting updated from other sensors or the environment that something has changed. It allows the processesor to work on other tasks until the state of a pin is altered at which point hardware processes take over and handle the interrupt.

&#x20;<a href="#api-SPI-Locks-and-Raw-Transfers-https-github-com-tessel-docs-blob-master-tutorials-raw-spi-md" name="api-SPI-Locks-and-Raw-Transfers-https-github-com-tessel-docs-blob-master-tutorials-raw-spi-md">#</a> [SPI Locks and Raw Transfers]( https://github.com/tessel/docs/blob/master/tutorials/raw-spi.md )  
Tutorial on SPI communication.

#### Firmware

&#x20;<a href="#api-Expose-a-C-function-up-to-JS-userspace-https-github-com-tessel-docs-blob-master-tutorials-c-to-js-md" name="api-Expose-a-C-function-up-to-JS-userspace-https-github-com-tessel-docs-blob-master-tutorials-c-to-js-md">#</a> [Expose a C function up to JS userspace]( https://github.com/tessel/docs/blob/master/tutorials/c-to-js.md )  
This tutorial goes over how to expose a C function to JS where the user can interact with it via any JS function.

&#x20;<a href="#api-Debugging-Tessel-https-github-com-tessel-docs-blob-master-tutorials-debug-using-busblaster-md" name="api-Debugging-Tessel-https-github-com-tessel-docs-blob-master-tutorials-debug-using-busblaster-md">#</a> [Debugging Tessel]( https://github.com/tessel/docs/blob/master/tutorials/debug-using-busblaster.md )  
You can debug Tessel by soldering JTAG headers to the board and using a JTAG debugger. This tutorial asummes you are using a Bus Blaster and an associated JTAG 20 -> 10 pin adapter.


#### Hardware

&#x20;<a href="#api-Powering-Tessel-https-tessel-io-docs-power" name="api-Powering-Tessel-https-tessel-io-docs-power">#</a> [Powering Tessel]( https://tessel.io/docs/power )  
Powering Tessel through an external power source

&#x20;<a href="#api-Adding-a-Wifi-Antenna-https-tessel-io-docs-antenna" name="api-Adding-a-Wifi-Antenna-https-tessel-io-docs-antenna">#</a> [Adding a Wifi Antenna]( https://tessel.io/docs/antenna )  
How to add a Wifi antenna to Tessel to improve Wifi reception

&#x20;<a href="#api-Connecting-Arduino-and-Tessel-https-github-com-tessel-docs-blob-master-tutorials-connect-arduino-tessel-md" name="api-Connecting-Arduino-and-Tessel-https-github-com-tessel-docs-blob-master-tutorials-connect-arduino-tessel-md">#</a> [Connecting Arduino and Tessel]( https://github.com/tessel/docs/blob/master/tutorials/connect-arduino-tessel.md )  
This is a tutorial for how to pass data back and forth between an Arduino and a Tessel.


### Software tools

#### Development tools

&#x20;<a href="#api-tiny-router-https-www-npmjs-org-package-tiny-router" name="api-tiny-router-https-www-npmjs-org-package-tiny-router">#</a> [tiny-router]( https://www.npmjs.org/package/tiny-router )  
A simple routing library targeting embedded system where every byte counts

&#x20;<a href="#api-tesselate-https-www-npmjs-org-package-tesselate" name="api-tesselate-https-www-npmjs-org-package-tesselate">#</a> [tesselate]( https://www.npmjs.org/package/tesselate )  
A dependency injector for tessel modules, abstracting away the need to nest multiple ‘ready’ listeners and callbacks within each other, or use promises or generators (or multiple, internal loaded flags)

&#x20;<a href="#api-avr-isp-https-www-npmjs-org-package-avr-isp" name="api-avr-isp-https-www-npmjs-org-package-avr-isp">#</a> [avr-isp]( https://www.npmjs.org/package/avr-isp )  
Library to allow Tessel to act as an AVR In-System Programmer

&#x20;<a href="#api-grunt-tessel-https-www-npmjs-org-package-grunt-tessel" name="api-grunt-tessel-https-www-npmjs-org-package-grunt-tessel">#</a> [grunt-tessel]( https://www.npmjs.org/package/grunt-tessel )  
Grunt tasks to aid tessel development

&#x20;<a href="#api-mockfs-https-github-com-Olegas-node-mockfs" name="api-mockfs-https-github-com-Olegas-node-mockfs">#</a> [mockfs]( https://github.com/Olegas/node-mockfs )  
Virtual in-memory file system accessible through native FS module

&#x20;<a href="#api-tesselbot-https-www-npmjs-org-package-tesselbot" name="api-tesselbot-https-www-npmjs-org-package-tesselbot">#</a> [tesselbot]( https://www.npmjs.org/package/tesselbot )  
A chainable tessel rebot made for building simple apps easier

#### Multi-language support
&#x20;<a href="#api-lua-tessel-https-www-npmjs-org-package-lua-tessel" name="api-lua-tessel-https-www-npmjs-org-package-lua-tessel">#</a> [lua-tessel]( https://www.npmjs.org/package/lua-tessel )  
A CLI that enables the scripting of a Tessel device in Lua

&#x20;<a href="#api-Rust-on-Tessel-https-github-com-kevinmehall-rust-tessel" name="api-Rust-on-Tessel-https-github-com-kevinmehall-rust-tessel">#</a> [Rust on Tessel]( https://github.com/kevinmehall/rust-tessel )  
Examples of the Rust language running on Tessel

#### Libraries

&#x20;<a href="#api-cylon-tessel-https-www-npmjs-org-package-cylon-tessel" name="api-cylon-tessel-https-www-npmjs-org-package-cylon-tessel">#</a> [cylon-tessel]( https://www.npmjs.org/package/cylon-tessel )  
Cylon.js is a JavaScript framework for robotics and physical computing using Node.js

&#x20;<a href="#api-Plotly-example-https-gist-github-com-alexander-daniel-856ccc58c4cda1707ab2" name="api-Plotly-example-https-gist-github-com-alexander-daniel-856ccc58c4cda1707ab2">#</a> [Plotly example]( https://gist.github.com/alexander-daniel/856ccc58c4cda1707ab2 )  
Tessel + Plotly streaming example

&#x20;<a href="#api-m2x-tessel-https-www-npmjs-org-package-m2x-tessel" name="api-m2x-tessel-https-www-npmjs-org-package-m2x-tessel">#</a> [m2x-tessel]( https://www.npmjs.org/package/m2x-tessel )  
AT&T M2X API client for node.js based Tessel


### Hardware libraries

Beyond the [modules](tessel.io/modules), libraries and examples for connecting with Tessel.

&#x20;<a href="#api-pir-https-www-npmjs-org-package-pir" name="api-pir-https-www-npmjs-org-package-pir">#</a> [pir]( https://www.npmjs.org/package/pir )  
Node library for a PIR motion detector

&#x20;<a href="#api-tessel-ht16k33-https-www-npmjs-org-package-tessel-ht16k33" name="api-tessel-ht16k33-https-www-npmjs-org-package-tessel-ht16k33">#</a> [tessel-ht16k33]( https://www.npmjs.org/package/tessel-ht16k33 )  
Use the Adafruit HT16K33 LED Backpack with your Tessel

&#x20;<a href="#api-tessel-button-https-www-npmjs-org-package-tessel-button" name="api-tessel-button-https-www-npmjs-org-package-tessel-button">#</a> [tessel-button]( https://www.npmjs.org/package/tessel-button )  
API to provide more feedback / options to the single tessel 'config' button

&#x20;<a href="#api-neopixels-https-www-npmjs-org-package-neopixels" name="api-neopixels-https-www-npmjs-org-package-neopixels">#</a> [neopixels]( https://www.npmjs.org/package/neopixels )  
Library to run a strand of neopixels from Tessel

&#x20;<a href="#api-ir-codes-https-www-npmjs-org-package-ir-codes" name="api-ir-codes-https-www-npmjs-org-package-ir-codes">#</a> [ir-codes]( https://www.npmjs.org/package/ir-codes )  
Generates signal buffers for different infrared device manufacturers


### Contributing

&#x20;<a href="#api-Technical-Machine-contribution-guide-https-github-com-tessel-contribution-guide" name="api-Technical-Machine-contribution-guide-https-github-com-tessel-contribution-guide">#</a> [Technical Machine contribution guide]( https://github.com/tessel/contribution-guide )  
A thorough explanation of how the Tessel software architecture works as a whole, descriptions of the individual pieces, and the processes for contributing code

&#x20;<a href="#api-Technical-Machine-style-guide-https-github-com-tessel-style" name="api-Technical-Machine-style-guide-https-github-com-tessel-style">#</a> [Technical Machine style guide]( https://github.com/tessel/style )  
Defines style for Technical Machine code, docs, and directories, particularly Tessel modules

&#x20;<a href="#api-RFC-category-on-the-Tessel-forums-https-forums-tessel-io-category-rfc" name="api-RFC-category-on-the-Tessel-forums-https-forums-tessel-io-category-rfc">#</a> [RFC category on the Tessel forums]( https://forums.tessel.io/category/rfc )  
Technical Machine & community members request comments on APIs and projects

_This document will be kept up to date [here](https://github.com/tessel/docs/blob/master/tools.md)_]]></content:encoded>
    <wp:post_name>93535347432</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/93254241807</link>
    <pubDate>Tue, 29 Jul 2014 19:38:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kevin mehall]]></category>
		<category domain="tag" nicename="kevin-mehall"><![CDATA[kevin mehall]]></category>
		<category domain="tag"><![CDATA[docs]]></category>
		<category domain="tag" nicename="docs"><![CDATA[docs]]></category>
		<category domain="tag"><![CDATA[USB]]></category>
		<category domain="tag" nicename="usb"><![CDATA[USB]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[Technical Machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[Technical Machine]]></category>
		<category domain="tag"><![CDATA[Node]]></category>
		<category domain="tag" nicename="node"><![CDATA[Node]]></category>
		<category domain="tag"><![CDATA[Examples]]></category>
		<category domain="tag" nicename="examples"><![CDATA[Examples]]></category>
		<category domain="tag"><![CDATA[code]]></category>
		<category domain="tag" nicename="code"><![CDATA[code]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/93254241807</guid>
    <!--<wp:post_id>93254241807</wp:post_id>-->
    <wp:post_date>2014-07-29 16:38:00</wp:post_date>
    <wp:post_date_gmt>2014-07-29 23:38:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>USB communication between Tessel and Node on your PC</title>
    <description></description>
    <content:encoded><![CDATA[#####7/29/2014– [Kevin Mehall](http://blog.technical.io/search/kevin+mehall)

_This post is an introduction to using USB to communicate between Tessel and Node. Find updates and more examples [here](https://github.com/tessel/docs/tree/master/tutorials/usb_messages)._

In addition to loading code, you can also use the USB connection to Tessel to pass data between your Tessel and Node.js on your PC. Combine your Tessel's easy access to hardware and your computer's processing power to do things neither device can do alone.

Messages are JavaScript objects. It uses [structured clone](https://github.com/tcr/structured-clone), which beyond JSON, supports cyclic structures and  `Buffer`, `RegExp`, and `Date` objects.

We've built an example for you to expand on:

<pre>
git clone https://github.com/tessel/docs.git
cd docs/tutorial/usb_messages
npm install
</pre>

The directory structure looks like:

<pre>
./
  /host.js         -- script that runs on the computer
  /package.json
  /node_modules    -- npm modules for the computer
    /tessel        -- the Tessel host-side USB module
  /device          -- this entire directory will be deployed to Tessel
    /package.json
    /node_modules  -- all the libs that run ON Tessel go here (camera, ambient, IR, etc.)
    /device.js     -- the main script that runs on Tessel
                   -- other JS files for Tessel go here
</pre>

Both Tessel and Node run JS, but you don't want all your host-side code on the Tessel. The host and device each have their own `node_modules` for npm packages. Only `devices/` is sent to the Tessel, because it has its own `package.json`.

The `tessel` command line tool functionality is also exposed as a library.
`host.js`   uses that library to take the place of `tessel run`, and not only
deploys your code to the Tessel, but also communicates with it.

The Tessel code, `device/index.js`, simply demonstrates sending and receiving messages.

To try this example, run `node host.js`. It sends the device-side code on the Tessel as it starts.

---

Here's the code that runs on the PC: `host.js`

<pre>
// When we `require('tessel')` here, this is the library out of `node_modules`
// for USB communication. It's not the same as the `tessel` module built into
// the Tessel firmware that code on the Tessel uses for hardware access --
// that's only available to JS that executes on the Tessel itself.
var tessel = require('tessel');

var script =  require.resolve('./device/index.js');

var opts = {
  // Stop existing script, if any
  stop: true,
  // Serial number (`undefined` picks the first one)
  serial: process.env.TESSEL_SERIAL,
};

var args = [];
 
// `tessel.findTessel` finds a Tessel attached to this computer and connects.
tessel.findTessel(opts, function(err, device) {
    if (err) throw err;

    // Once we've found a Tessel, we tell it to run our script. This works just
    // like `tessel run` and bundles the `device/` directory. It bundles only
    // `device/` and not the host code because `device/` has its own
    // `package.json`.
    device.run(script, args, {}, function () {
          // Connect the stdout and stderr of the process running on Tessel to
          // the console, so that our `console.log` messages show.
          device.stdout.resume();
          device.stdout.pipe(process.stdout);
          device.stderr.resume();
          device.stderr.pipe(process.stderr);
 
          var count = 0;

          // `device.send(msg)` sends an object to Tessel. It supports JSON
          // compatible objects as messages, with the addition that `Buffer`s,
          // `Date`s and cyclic data structures are also handled properly.
          setInterval(function(){
            device.send({count:count++, data: {obj: 'demo'}})
          }, 4000);

          // `device.on('message', function (msg) { ... })` receives an event
          // when an object is received from Tessel.
          device.on('message', function (m) {
            console.log('[PC] Message from Tessel:', m);
          });
 
          // Exit cleanly on Ctrl+C.
          process.on('SIGINT', function() {
            // Try to stop the process on the Tessel
            device.stop();

            setTimeout(function () {
              // But if that fails, just exit
              logs.info('Script aborted');
              process.exit(131);
            }, 200);
          });
 
          // When the script on Tessel exits, shut down
          // USB communications and exit
          device.once('script-stop', function (code) {
            device.close(function () {
              process.exit(code);
            });
          });
    });
});
</pre>

---

The code that runs on Tessel is very simple: `device/index.js`

<pre>
// The `tessel` module built-in to the Tessel firmware for access to hardware
var tessel = require('tessel');

//When a message is received from the computer, this event triggers.
process.on('message', function(msg) {
  console.log("[Tessel] Message from PC:", msg);
});

var counter = 0;

// Every 5 seconds...
setInterval(function() {
  // Send a message to the computer
  process.send({count: counter++});
}, 5000);

// Keep the event loop alive 
process.ref();
</pre>

When a message is received from the computer, the `process.on('message', function(msg) {` event triggers.
  
To send a message to the computer, call `process.send(msg)`

---

Code examples in this document are placed in the [public domain](http://creativecommons.org/publicdomain/zero/1.0/).

See the code on Github [here](https://github.com/tessel/docs/tree/master/tutorials/usb_messages).]]></content:encoded>
    <wp:post_name>93254241807</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/92169944287</link>
    <pubDate>Fri, 18 Jul 2014 15:53:18 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[jon mckay]]></category>
		<category domain="tag" nicename="jon-mckay"><![CDATA[jon mckay]]></category>
		<category domain="tag"><![CDATA[eran hammer]]></category>
		<category domain="tag" nicename="eran-hammer"><![CDATA[eran hammer]]></category>
		<category domain="tag"><![CDATA[fireworks]]></category>
		<category domain="tag" nicename="fireworks"><![CDATA[fireworks]]></category>
		<category domain="tag"><![CDATA[neopixels]]></category>
		<category domain="tag" nicename="neopixels"><![CDATA[neopixels]]></category>
		<category domain="tag"><![CDATA[LED]]></category>
		<category domain="tag" nicename="led"><![CDATA[LED]]></category>
		<category domain="tag"><![CDATA[custom firmware]]></category>
		<category domain="tag" nicename="custom-firmware"><![CDATA[custom firmware]]></category>
		<category domain="tag"><![CDATA[LED strip]]></category>
		<category domain="tag" nicename="led-strip"><![CDATA[LED strip]]></category>
		<category domain="tag"><![CDATA[LED fireworks]]></category>
		<category domain="tag" nicename="led-fireworks"><![CDATA[LED fireworks]]></category>
		<category domain="tag"><![CDATA[NodeConf]]></category>
		<category domain="tag" nicename="nodeconf"><![CDATA[NodeConf]]></category>
		<category domain="tag"><![CDATA[npm]]></category>
		<category domain="tag" nicename="npm"><![CDATA[npm]]></category>
		<category domain="tag"><![CDATA[node]]></category>
		<category domain="tag" nicename="node"><![CDATA[node]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/92169944287</guid>
    <!--<wp:post_id>92169944287</wp:post_id>-->
    <wp:post_date>2014-07-18 12:53:18</wp:post_date>
    <wp:post_date_gmt>2014-07-18 19:53:18</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Digital Fireworks with Tessel</title>
    <description></description>
    <content:encoded><![CDATA[#####7/18/2014– [Jon McKay](http://blog.technical.io/search/jon+mckay)

![](https://31.media.tumblr.com/1f8c3550ef27db5a0ac3e8bdaf2797dc/tumblr_inline_n8x8qoT5881s75tgz.jpg)

#####Image source: [Matthew Bergman](https://www.flickr.com/photos/matthewbergman/14557932226/in/set-72157645452192986)

### Background Context

Several months ago, Eran Hammer messaged me about helping him with a project he was working on for NodeConf. My only experience with Eran Hammer up to that point was watching his over-the-top presentation at Realtime Conf. I’ve since forgotten a majority of the presentation, but I do distinctly remember a dime bag containing blue rock candy, dozens of remotely controlled mortar and pestles, and several hundred pounds of dirt and edible plants in a warehouse. In short, it was weird and intriguing and made me feel vaguely like I had abused moderately-strong hallucinogens. 

Naturally, I was excited about helping with the next project, especially since I could develop it on Tessel.

Eran was set on creating an LED fireworks display to be “set off” on July 4th. The idea was scaled down from an overhead, 15 foot wide, 10 foot long LED grid (estimated cost of $75000) to “simply” 1260 Neopixel LEDs laid out in the shape of an exploding firework. 

You can see a [video of an early test](https://www.youtube.com/watch?v=lleXaJKp82M) or the [actual display here](https://www.youtube.com/watch?v=J7SliDMbdxg).

Now that we’ve finished, you can actually build a similar system yourself by installing the [fireworks Node module](https://www.npmjs.org/package/fireworks) for your computer and the [neopixels Node module](https://www.npmjs.org/package/neopixels) for Tessel.

### Technical Setup

Eran was in charge of writing the JavaScript library to generate firework animations, and my task was to actually route those animations through Tessel and into one giant strip of Neopixels. 

Neopixel is Adafruit’s brand for addressable LED strips using a specific chip called the WS2812. They are extremely popular due to their simple programming interface and mesmerizing light displays.

The difficult part of using Neopixels is that they are very timing constrained (so much so, in fact, that parts of the library for Arduino are [written in Assembly](https://github.com/adafruit/Adafruit_NeoPixel/blob/master/Adafruit_NeoPixel.cpp#L161-L242) to ensure a fast enough data throughput. Heavy timing-dependence doesn’t bode well for a JavaScript application, so I knew this project was going to be a bit of a challenge.

We decided that most of the actually timing-based “pin-wiggling” would have to be done in the firmware layer (written in C) and we would use Tessel’s JavaScript layer to simply pass the fireworks animation from the USB hub to the firmware. 

In all, Eran’s laptop ran a Node server responsible for initiating the Tessel script and generating animations, sending those animation as a binary packet to Tessel, and Tessel was responsible for routing the buffer to the Neopixel driver. 

Each RGB LED receives 3 bytes of data (one byte for each color) and then uses a shift register to pop those bytes off before sending the rest of the animation buffer on to the next pixel. Each transmitted bit is essentially a [PWM](http://en.wikipedia.org/wiki/Pulse-width_modulation) signal with a period of 1.25 microseconds. A “0” is represented by a duty cycle of 32% and a “1” is represented by a duty cycle 85% (with a ~10% error margin). At the end of an animation, the signal should be held low for at least 50 microseconds.


#####Source: Adafruit

Eran and I were initially worried that we wouldn’t be able to get a good frame rate with a single strand of 1260 pixels. A reasonable frame rate for animations is 30 frames per second. To determine the expected frame rate with Neopixels, we’d need to do a little math:

1260 pixels * (24 bits/pixel * 1.25 microseconds/bit) + 50 microseconds = 22100 microseconds, or  .0221 seconds per animation frame. In theory, that’s about 47 frames per second, but real life is always a bit slower and we weren’t sure by exactly how much. 

### Implementation

Fortunately, our LPC1830 microcontroller features a State Configurable Timer (SCT) which provides programmers with an extremely flexible interface for pin manipulation. Essentially, it allows you to define different timing states associated with different pin inputs and outputs. 

In the case of a single strand of neopixels, I could have used 4 different states. A simplified example of how it could work would be:

- A timer for the entire period. This timer sets the output pin high at the beginning of a bit transmission which makes the PWM active.

- A timer for the “0” duty cycle completion (at 32% as mentioned above). When this event fires, it will actually check the value of the current bit being transferred. If it’s a 0, then there is no conflict and the pin state will be pulled low. If it’s a 1, there is a conflict, and the pin will not be changed.

- A timer for the “1” pwm completion (at 85%) will pull the pin low regardless of the value of the bit being transmitted. This is because it’s a 0, it was already pulled low and doesn’t matter, and if it’s a 1, it needs to be pulled down immediately.

- A timer that only fires at the end of at the end of a 8 bits. This timer will call an interrupt routine to set up the next byte to be transferred. 

But in reality, I couldn’t set up the next byte after the previous one finished, because that would cause a delay between when the previous byte was sent out and the amount of time it would take to process the logic of setting up the next one. That delay in the signal would totally ruin the animation being sent to Neopixels and the colors would be all wrong (in the best case).  

In fact, what I needed was a double buffer. A double buffer would allow me to set up the next byte while the current byte is being transmitted. I implemented that functionality by adding another SCT state. I set the state of a GPIO pin either high or low depending on which buffer the SCT should be using to generate a signal, and set the next byte in the other in interrupt routines after the previous byte was sent.

### Further Work

I ended up finishing the single strand implementation in a few hours, but wanted to take the system to the extreme. Tessel has three PWM pins connected to its GPIO port, and I wanted to enable all three of them to output animation data in parallel, effectively tripling the possible frame rate.

One frustrating weekend, I attempted to add a four more events for the two other pins (each requires two events for the double buffer). Unfortunately, there just wasn’t enough time in the interrupt routine to service three different buffers at a time. 

1.25us/(1/180Mhz) = 225 clock cycles to update three buffers

I found that I could update two pwm channels fairly well, but three channels took too long to update. I think my implementation could have been cleaner if I didn’t use so many structs within structs (thanks OOP).

I ran out of time before I could try implementing the more complicated, but ever so elegant and efficient: [DMA transfer](http://en.wikipedia.org/wiki/Direct_memory_access). DMA effectively allows for the movement of data over physical pipes without requiring any overhead from the processor. You just tell the microcontroller the destination and source of data transfer and it all happens automagically. I wish DMA was taught in more undergraduate computer architecture classes; it’s a really cool technology.

Using DMA would allow us to use all three PWM channels without the overhead of the interrupt routine that takes all too long to update the next byte because the hardware would handle it automatically. 

If you’re interested in [contributing](https://github.com/tessel/neopixels), this would be a super fun way to get started! As someone still getting familiar with writing firmware myself, I learned a ton about how timing, double buffers, DMA, and PWM work on a much deeper level and was able to visually see my achievement with an [awesome light show](http://vimeo.com/99994021).






]]></content:encoded>
    <wp:post_name>92169944287</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/92057739927</link>
    <pubDate>Thu, 17 Jul 2014 12:24:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[unrob]]></category>
		<category domain="tag" nicename="unrob"><![CDATA[unrob]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[project]]></category>
		<category domain="tag" nicename="project"><![CDATA[project]]></category>
		<category domain="tag"><![CDATA[projects]]></category>
		<category domain="tag" nicename="projects"><![CDATA[projects]]></category>
		<category domain="tag"><![CDATA[elevator]]></category>
		<category domain="tag" nicename="elevator"><![CDATA[elevator]]></category>
		<category domain="tag"><![CDATA[node]]></category>
		<category domain="tag" nicename="node"><![CDATA[node]]></category>
		<category domain="tag"><![CDATA[johnny-five]]></category>
		<category domain="tag" nicename="johnny-five"><![CDATA[johnny-five]]></category>
		<category domain="tag"><![CDATA[electronics]]></category>
		<category domain="tag" nicename="electronics"><![CDATA[electronics]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[interview]]></category>
		<category domain="tag" nicename="interview"><![CDATA[interview]]></category>
		<category domain="tag"><![CDATA[user]]></category>
		<category domain="tag" nicename="user"><![CDATA[user]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/92057739927</guid>
    <!--<wp:post_id>92057739927</wp:post_id>-->
    <wp:post_date>2014-07-17 9:24:00</wp:post_date>
    <wp:post_date_gmt>2014-07-17 16:24:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>An Interview with unRob: First Tessel Projects</title>
    <description></description>
    <content:encoded><![CDATA[#####7/17/2014– [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

[unRob](https://forums.tessel.io/users/unrob), or Roberto Hidalgo, accepted my Skype call from his home/office/headquarters in Mexico. He leaned back on his office chair, put on his round glasses, and lit a cigarette. He was full of words, ideas, and inspirations – turning the camera so I could see electrical diagrams he’d convinced a friend to draw for him on the whiteboard wall, or pulling out a simple case he’d put together for a Tessel project. A couple of times, he called offscreen in Spanish to his business partner/friend/roommate for clarifications on an English phrase or a little fact.

I asked Roberto for an interview because he has impressed all of us at Technical Machine with the many simple but brilliant projects he’s already built with a Tessel and limited electrical expertise. If you haven’t seen his projects, you should check out his [YouTube channel](https://www.youtube.com/channel/UCz8xPYOdy_PwNaHal9pLoqg).


**Kelsey:** What’s your background in engineering?

**Rob:** My father was an electrical engineer. The first node of internet in Mexico, he plugged it in. So I grew up with that kind of stuff when I was really young. And I liked computers.

I got into a program on genomics, but I didn’t go, so I decided to do graphic design. But then I didn’t like school, so I dropped out, and here I am.

**Kelsey:** I saw that you have a cool domain name as the Surrealist Party– what is it that you do?

**Rob:** We do software. We’ve done all kinds of stuff. We have clients that are newspaper organizations and shit and we do their frontend and their backend. For web we do Node and Ruby. Most of our backend is MongoDB and stuff like that.

It’s just my partner and me, just the two of us. We’ve been doing this for four years.

The only time we used hardware, we developed a little box that you connect HDMI, you push a button, and it automatically transmits to the internet as live video streaming. That was pretty much the only experience I’ve had in hardware so far.

**Kelsey:** How did you make that?

**Rob:** It was just, like, we used an Arduino, and it had a couple of functions. One was to start up the system, because we had an embedded computer, and then we had to control the flow– to transmit, and to get feedback to the operator about the transmission quality and stuff like that.

We ended up doing most of that as a Node.JS server, with johnny-five, and then just communicating through the Arduino.

It was fucking complicated. You have to do stuff in C, and then the drivers don’t work. I actually contributed a couple of patches to the serial node thing to make it work.

Researching that project is how I came to know about Tessel, actually. I thought, it would be easier if I could just skip C and all of the layers behind it. So here we are.

**Kelsey:** Did you have something in mind to make when you ordered a Tessel?

**Rob:** Yeah. The first thing I made was– here’s the thing. The elevator in my building goes straight to my house. The keys for this fucking elevator are like eighty bucks. So I thought, maybe I could hack a wireless telephone at the base to make the elevator go. This is me not knowing shit about electronics.

So I just opened the elevator up, and I thought it could work. I could trigger a USB to serial port thing, I could trigger the locate button, then have the handset send the signal to the elevator button and call the elevator up.

The problem with this is that I can’t let my landlord see this. If he comes one day and there’s just wires coming out of the elevator button...

I thought it would be great if I could skip the base, skip the radio protocol, and just use WiFi. So I started researching that.

I wanted an embedded computer that could run a web server and talk through Wifi, and be able to be powered by a small battery. Tessel was just the perfect fit.

**Kelsey:** So this elevator– it doesn’t go to anyone else’s apartments?

**Rob:** It can, if you short the right pins, I can get the elevator to go to my neighbors’ houses. But we usually just call it for ourselves.

We developed a telephone to IP, so I made a node module that handles calls. The lady that helps us clean the place, she doesn’t have a smartphone, and we don’t give her keys because they’re so expensive. That was one of the use cases. She just calls this number, lets it ring a couple of times, and then the elevator comes.

I use it sometimes when I’m drunk and I can’t find the keys.

It’s a lot of fun.

The day I got it, my partner was in Brazil for the World Cup. I had a ridiculous amount of work that I needed to do, but I just said fuck it, Tessel is here, and spent six straight hours doing research trying to fix the elevator button I’d burned out, and then I made the Tessel call the elevator.

In that six hours, I was really excited, that’s when I posted the video [Ed. note: [this video](https://www.youtube.com/watch?v=T4Q0tdFq0FQ)].

If I knew shit about electronics, I could probably do it in half an hour. Six hours is okay. It was like 5am on a Friday night.

**Kelsey:** So what else are you planning to make?

**Rob:** A friend of mine, an electrical engineer, has been teaching me to do bridges. What I’m trying to do now is build a theremin. I did something kind of like that with graphite [Ed. note: [this](https://www.youtube.com/watch?v=t3S5YHxVU_4)].

My roommate, my partner, he’s very annoyed with me for making these noises.

I actually want to embed a Tessel into a guitar pedal. My guitar broke three weeks ago. I was very sad. So I bought another guitar, an electro-acoustic. I thought maybe I could do a pedal with it, and modify the effects through Tessel and through my phone.

It’s easier to just push a button with your phone than to lean down and mess with knobs.

That’s what I want to do with the Tessel for now.

There’s lots of stuff I’ve been thinking about doing, but I want to know more about how the actual components work.

I’ve enlisted most of my friends to have an electronics playdate. They’re coming in a couple of weeks to teach me stuff. Maybe something good will come out of it.

**Kelsey:** It’s cool that you’re poking into the electrical side of things.

**Rob:** Since I was little I always took stuff apart. One time I took apart the washing machine, because I wanted to know how it worked. I got electrocuted, and after that time I was scared about electricity and stuff.

It’s very frustrating. That’s the thing I like about knowing what the software thing does. If you use C and you have to take into account all the memory manipulations, and weird loops, and re-use somebody else’s code, then it’s scary and it’s frustrating, and you don’t do it.

With an entry-level language such as JavaScript, it’s easy. You can screw up, and probably you will burn the thing out. But it’s not very expensive, and with all of the revisions you guys did to the power, probably it won’t.

That’s something interesting.

It makes hardware accessible for people like me who are stupid about electrical stuff.

I know my way around software, and I know how to make things talk to each other, but the actual physical part of it is mind-boggling for me.

The thing that I enjoyed the most was Wifi, built in. It’s ridiculous: the expense of an Arduino, plus a Wifi shield, you have to know stuff. My Wifi network is secure enough for this kind of purpose.

If I used straight radio, anyone within a 300 meter radius could open my elevator. This thing, they just need to know my Wifi network, and my password, and how to talk to it. It’s much more useful in certain cases.

For prototyping, this is the best thing I’ve ever encountered.

My electrical engineer friends, they tell me, I could do that probably in a couple of months. I tell them, yeah, you could do that in a couple of months, with a team of probably fifty people. You could do that for a much bigger expense than– what’s a Tessel? Ninety-nine dollars?

If you don’t want to spend a lot of time thinking about the implementation, but just hacking the idea, this is a great tool.

You guys made a really great thing. It has made me– you have no idea– very happy.

The satisfaction of doing software, and having things move from one side of the screen to the other is immense, for people who like those kinds of things to happen, like myself. But when you translate that to the physical world, it’s just like, you revert back to when you’re six years old and you figure out that you can plug a light bulb straight into the socket, and it will work, and it will do stuff.

Probably it will contribute to changing the culture: we’re not just programming for programming’s sake, but we’re creating stuff, making, building stuff, that’s something interesting. And it’s a lot of fun.

![](https://31.media.tumblr.com/9030746ea9942039928d82684a09ec01/tumblr_inline_n8v6v1xax41s75tgz.png)]]></content:encoded>
    <wp:post_name>92057739927</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/91390692862</link>
    <pubDate>Thu, 10 Jul 2014 17:59:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[forums]]></category>
		<category domain="tag" nicename="forums"><![CDATA[forums]]></category>
		<category domain="tag"><![CDATA[projects]]></category>
		<category domain="tag" nicename="projects"><![CDATA[projects]]></category>
		<category domain="tag"><![CDATA[portal]]></category>
		<category domain="tag" nicename="portal"><![CDATA[portal]]></category>
		<category domain="tag"><![CDATA[tools]]></category>
		<category domain="tag" nicename="tools"><![CDATA[tools]]></category>
		<category domain="tag"><![CDATA[toolchain]]></category>
		<category domain="tag" nicename="toolchain"><![CDATA[toolchain]]></category>
		<category domain="tag"><![CDATA[contribution guide]]></category>
		<category domain="tag" nicename="contribution-guide"><![CDATA[contribution guide]]></category>
		<category domain="tag"><![CDATA[contributors]]></category>
		<category domain="tag" nicename="contributors"><![CDATA[contributors]]></category>
		<category domain="tag"><![CDATA[lua]]></category>
		<category domain="tag" nicename="lua"><![CDATA[lua]]></category>
		<category domain="tag"><![CDATA[open source]]></category>
		<category domain="tag" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[microcontroller]]></category>
		<category domain="tag" nicename="microcontroller"><![CDATA[microcontroller]]></category>
		<category domain="tag"><![CDATA[DIY]]></category>
		<category domain="tag" nicename="diy"><![CDATA[DIY]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/91390692862</guid>
    <!--<wp:post_id>91390692862</wp:post_id>-->
    <wp:post_date>2014-07-10 14:59:00</wp:post_date>
    <wp:post_date_gmt>2014-07-10 21:59:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessel is in your hands.</title>
    <description></description>
    <content:encoded><![CDATA[#####7/10/2014– [Updates](http://blog.technical.io/search/update)

It’s been about a month since we started shipping, and things have been overwhelming. Let me try to catch you up:

###Contributing
We have a [contribution guide](https://github.com/tessel/contribution-guide)! We’re still working on filling it out, but please PR/add GH issues for anything you want to see there.

Here are a few tools we’ve seen so far:

* [lua-tessel](https://github.com/paulcuth/lua-tessel) for programming Tessel in Lua by Paul Cuthbertson
* [tessel-caas](https://github.com/alanshaw/tessel-caas) is a Tessel Camera as a Service by Alan Shaw
* [grunt-tessel](https://www.npmjs.org/package/grunt-tessel) for automating tests and deployment on Tessel by Nick Heiner
* [tessel-led](https://www.npmjs.org/package/tessel-led) and [tessel-button](https://www.npmjs.org/package/tessel-button) to make intuitive interfaces on Tessel by Nathan White

Hopefully the contribution guide makes this sort of project easier– and if you’re looking for a way to help out, we’ve started a task list in the contribution guide repo.

###Projects
We’re also starting to see some cool projects. Probably the showiest is Eran Hammer’s [LED fireworks display](https://www.youtube.com/watch?v=CuhC6AKxxHk) from Nodeconf, Rob Hidalgo is definitely the most prolific– see his [YouTube channel](https://www.youtube.com/channel/UCz8xPYOdy_PwNaHal9pLoqg)– and the youngest person’s project we’ve seen so far is a [temperature gauge](https://www.youtube.com/watch?v=Hyngvdm8KR8&feature=youtu.be&ac) by Dunmail Hodkinson’s daughter. We’ve also started collecting more on our [company Pinterest](http://www.pinterest.com/technicalhumans/tessel-projects/).

![](https://31.media.tumblr.com/0a531e3da932aad50936a62285b6fbd5/tumblr_inline_n8inmyGJNP1s75tgz.png)

In order to properly showcase your projects, we’re working on a projects portal. It’s tailored to helping people share what they’ve made on Tessel in a replicable way– link to GitHub code, pictures and videos, text for instructions, metadata re modules, etc. Expect to see it live in the next week or two– and in the meantime, please take pictures of what you make!

###Orders and Support
All of the pre-orders have been shipped, and we’re continuously sending out new orders.
We’re working on improving the fulfillment process; it’s been shaky, and we apologize sincerely. Kelsey is in the process of writing a blog post about that process and our plans for better support.

That said, it’s possible we’ve missed a few support requests while figuring out our system. If you have been waiting on a response from us for more than a day, please email again to support@technical.io and we’ll make sure to get back to you right away.

Meanwhile, we’ve seen really wonderful engagement on the [forums](http://forums.tessel.io/). Thanks for surfacing issues, fixing each other’s problems, and bringing up your ideas. Keep it up!

###Blog
Meanwhile, we’ve written a bit to the blog, mostly introducing our three summer interns (Paige, Evan, and Nathan):

* [Hardware is *Different*](http://blog.technical.io/post/87905095507/hardware-is-different) by Eric
* [JS on MCUs – Only Getting Better from Here](http://blog.technical.io/post/87994947332/js-on-mcus-only-getting-better-from-here) by Jon
* [Intern Introduction: Paige](http://blog.technical.io/post/88595720252/intern-introduction-paige) by Paige
* [Humans as Input and Output](http://blog.technical.io/post/88625500162/humans-as-input-and-output-kelseys-talk-at) (talk video) by Kelsey
* [New Intern #2 – Introducing Evan](http://blog.technical.io/post/90377406802/new-intern-2-introducing-evan) by Evan
* [Tessel Run Internship](http://blog.technical.io/post/91172083397/tessel-run-internship) by Nathan

All right, other than bug fixes, Nodeconf, and tracking parcels, that about sums up what we’ve been working on! Look forward to some cool R&D soon.

All the best,
Kelsey, Jon, Kevin, Paige, Eric, Nathan, Jia, Tim, and Evan]]></content:encoded>
    <wp:post_name>91390692862</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/91172083397</link>
    <pubDate>Tue, 08 Jul 2014 14:59:09 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[nathan lintz]]></category>
		<category domain="tag" nicename="nathan-lintz"><![CDATA[nathan lintz]]></category>
		<category domain="tag"><![CDATA[technical intern]]></category>
		<category domain="tag" nicename="technical-intern"><![CDATA[technical intern]]></category>
		<category domain="tag"><![CDATA[summer 2014]]></category>
		<category domain="tag" nicename="summer-2014"><![CDATA[summer 2014]]></category>
		<category domain="tag"><![CDATA[user interface]]></category>
		<category domain="tag" nicename="user-interface"><![CDATA[user interface]]></category>
		<category domain="tag"><![CDATA[user interaction]]></category>
		<category domain="tag" nicename="user-interaction"><![CDATA[user interaction]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/91172083397</guid>
    <!--<wp:post_id>91172083397</wp:post_id>-->
    <wp:post_date>2014-07-08 11:59:09</wp:post_date>
    <wp:post_date_gmt>2014-07-08 18:59:09</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessel Run Internship</title>
    <description></description>
    <content:encoded><![CDATA[#####7/8/2014 - [Nathan Lintz](http://blog.technical.io/search/nathan+lintz)

Hi TM Blog Readers,

I’m Nathan Lintz - aspiring DJ, JavaScript ninja, and Technical Machine intern. In my spare time I like to create playlists on Spotify and read [Pitchfork](http://pitchfork.com/) to stay up to date on whatever music craze is sweeping the indie charts. 

![Coffee Time](https://31.media.tumblr.com/68f6833c040894f6c88e5fe85aab7008/tumblr_inline_n8epqq1LEx1s75tgz.png)

For the past two summers, I worked as a front end web engineer at Intuit, where I developed a passion for making beautiful user interfaces. As a UI designer, I was frustrated by the limited interaction possibilities afforded by software platforms. What draws me to hardware is the ability to create new user interactions that are impossible on purely software platforms.

With software alone, we are limited to a small set of gestures such as swipe, hover, and pinch. I am interested in leveraging the hardware capabilities of the Tessel to build new forms of user interaction which were previously impossible on a software platform. For example, using the climate module, a program can detect changes in the user’s environment. A clever interface might use this data to blend the UI with the user’s surroundings. An application could use hot colors if it detects the user is outdoors on a sunny day or it might use cool colors if the user is indoors.

Since starting my internship, I’ve been working on some side projects which connect real world devices to software applications. Last week, I wrote an app which sent accelerometer data from the Tessel to my laptop’s mouse using a custom Objective C library that I wrote. I plan to abstract this Objective C library into a framework for controlling any Mac functionality from any Tessel module. 

In the coming weeks, I want to build even more devices that can communicate directly with my Mac’s hardware. Some ideas I have are controlling Spotify via text messages or adjusting my screen’s brightness based on the ambient light in the room. If you’re interested in helping me out with these projects, send me a message [nathan@technical.io](mailto:nathan@technical.io) and I’ll send you the library. You can also follow me on Github ([nlintz](github.com/nlintz/)) to see my up and coming Tessel creations.]]></content:encoded>
    <wp:post_name>91172083397</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/90377406802</link>
    <pubDate>Mon, 30 Jun 2014 15:23:47 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[intern]]></category>
		<category domain="tag" nicename="intern"><![CDATA[intern]]></category>
		<category domain="tag"><![CDATA[disney]]></category>
		<category domain="tag" nicename="disney"><![CDATA[disney]]></category>
		<category domain="tag"><![CDATA[ble]]></category>
		<category domain="tag" nicename="ble"><![CDATA[ble]]></category>
		<category domain="tag"><![CDATA[rfid]]></category>
		<category domain="tag" nicename="rfid"><![CDATA[rfid]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[evan simpson]]></category>
		<category domain="tag" nicename="evan-simpson"><![CDATA[evan simpson]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[olin]]></category>
		<category domain="tag" nicename="olin"><![CDATA[olin]]></category>
		<category domain="tag"><![CDATA[student]]></category>
		<category domain="tag" nicename="student"><![CDATA[student]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/90377406802</guid>
    <!--<wp:post_id>90377406802</wp:post_id>-->
    <wp:post_date>2014-06-30 12:23:47</wp:post_date>
    <wp:post_date_gmt>2014-06-30 19:23:47</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>New Intern #2 - Introducing Evan</title>
    <description></description>
    <content:encoded><![CDATA[####6/30/2014 - [Evan Simpson](http://blog.technical.io/search/evan+simpson)

 Last month I left my internship at the world's largest single-site employer with over 70,000 employees to come join Technical Machine's team of 6. Well, maybe that's a little bit misleading. You see they weren't employees, they were cast members, and they all referred to a single mouse as their boss.

Hey there, I'm Evan, one of the three new interns at Technical Machine, and if you haven't figured it out yet, I left my job at Walt Disney World in Florida to be here. I made the switch for the same reason many other people choose smaller companies - to have a larger impact. After just a few short weeks here I can say without a doubt that I've already accomplished more at Technical Machine than at any other company I've worked for. Not only have I been responsible for making improvements to firmware and modules like BLE and RFID, but I’ve also had the opportunity to share what I’ve learned on our forums, and help community members resolve some of the issues they’ve run in to.

![Me standing in a parking lot](https://31.media.tumblr.com/da479ecc6dc6f910acbb38d29515f675/tumblr_inline_n7zxokmkGl1s75tgz.jpg)

My biggest goal for the summer is to help make the Tessel and its modules as easy to use as possible. I'll be spending plenty of time improving the BLE library and contributing to full node compatibility in our runtime. Having a predominantly software background means I still have a lot to learn about hardware, but the team has been very supportive and has helped me learn a lot already.

That's enough about work - let's hear some more about me. I move around the country quite often, so I typically spend my weekends exploring whatever new area I'm living in. Bonus points for me whenever I stumble across that restaurant that doesn't look like anything special but actually has the most amazing food. You know the one - the one only the locals know about. Aside from restaurants, I also enjoy checking out museums and finding a nice trail for running or hiking. When I'm not working full time, I'm actually still a student at Olin College of Engineering, working towards a degree with the words "Engineering" and "Computer" somewhere in the name. I've still got one year left come September, and the closer it gets the more excited I am to graduate.

Watch for more posts from me in the future, probably about BLE, and feel free to reach out anytime on Twitter [@evanmsimpson](https://twitter.com/evanmsimpson), [our forums](https://forums.tessel.io), or email at evan at technical.io. I'm really excited to be working at Technical Machine where I can surround myself with knowledgeable people, and hopefully learn a lot this summer.

-Evan]]></content:encoded>
    <wp:post_name>90377406802</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/88625500162</link>
    <pubDate>Thu, 12 Jun 2014 21:49:24 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[video]]></category>
		<category domain="category" nicename="video"><![CDATA[video]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[ubiquitous computing]]></category>
		<category domain="tag" nicename="ubiquitous-computing"><![CDATA[ubiquitous computing]]></category>
		<category domain="tag"><![CDATA[sensors]]></category>
		<category domain="tag" nicename="sensors"><![CDATA[sensors]]></category>
		<category domain="tag"><![CDATA[oreilly]]></category>
		<category domain="tag" nicename="oreilly"><![CDATA[oreilly]]></category>
		<category domain="tag"><![CDATA[solidcon]]></category>
		<category domain="tag" nicename="solidcon"><![CDATA[solidcon]]></category>
		<category domain="tag"><![CDATA[o'reilly]]></category>
		<category domain="tag" nicename="oreilly"><![CDATA[o'reilly]]></category>
		<category domain="tag"><![CDATA[neurosky]]></category>
		<category domain="tag" nicename="neurosky"><![CDATA[neurosky]]></category>
		<category domain="tag"><![CDATA[myo]]></category>
		<category domain="tag" nicename="myo"><![CDATA[myo]]></category>
		<category domain="tag"><![CDATA[emotiv]]></category>
		<category domain="tag" nicename="emotiv"><![CDATA[emotiv]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[hue lights]]></category>
		<category domain="tag" nicename="hue-lights"><![CDATA[hue lights]]></category>
		<category domain="tag"><![CDATA[EMG]]></category>
		<category domain="tag" nicename="emg"><![CDATA[EMG]]></category>
		<category domain="tag"><![CDATA[embedded devices]]></category>
		<category domain="tag" nicename="embedded-devices"><![CDATA[embedded devices]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/88625500162</guid>
    <!--<wp:post_id>88625500162</wp:post_id>-->
    <wp:post_date>2014-06-12 18:49:24</wp:post_date>
    <wp:post_date_gmt>2014-06-13 01:49:24</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title></title>
    <description></description>
    <content:encoded><![CDATA[
              <iframe width="400" height="225"  id="youtube_iframe" src="https://www.youtube.com/embed/LdATa51ejgM?feature=oembed&amp;enablejsapi=1&amp;origin=http://safe.txmblr.com&amp;wmode=opaque" frameborder="0" allowfullscreen></iframe>              Humans as Input and Output: Kelsey's talk at O'Reilly SOLID      ]]></content:encoded>
    <wp:post_name>88625500162</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/88595720252</link>
    <pubDate>Thu, 12 Jun 2014 15:43:41 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[paige cote]]></category>
		<category domain="tag" nicename="paige-cote"><![CDATA[paige cote]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[intern]]></category>
		<category domain="tag" nicename="intern"><![CDATA[intern]]></category>
		<category domain="tag"><![CDATA[intern program]]></category>
		<category domain="tag" nicename="intern-program"><![CDATA[intern program]]></category>
		<category domain="tag"><![CDATA[hiring]]></category>
		<category domain="tag" nicename="hiring"><![CDATA[hiring]]></category>
		<category domain="tag"><![CDATA[olin]]></category>
		<category domain="tag" nicename="olin"><![CDATA[olin]]></category>
		<category domain="tag"><![CDATA[student]]></category>
		<category domain="tag" nicename="student"><![CDATA[student]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/88595720252</guid>
    <!--<wp:post_id>88595720252</wp:post_id>-->
    <wp:post_date>2014-06-12 12:43:41</wp:post_date>
    <wp:post_date_gmt>2014-06-12 19:43:41</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Intern Introduction: Paige</title>
    <description></description>
    <content:encoded><![CDATA[#####6/12/2014– [Paige Cote](http://blog.technical.io/search/paige+cote)

Hi there! 

I’m Paige, and I hail from the great northern land of Maine. I’m currently working towards a degree in Electrical and Computer engineering at Olin College, with a bunch of bio-engineering classes thrown in for a good measure. 

In my free time, I do engineering education research at Olin, read cookbooks, and go to an excessive number of concerts (three, including a music festival, in the last week and a half!)

![](https://31.media.tumblr.com/2e5f5c7450c4027418c644caa89d7d8a/tumblr_inline_n70ylqkQ9P1s75tgz.jpg)

I decided to join Technical Machine because I really wanted the experience of working for an early stage startup where I could have significant impact on the product. So far, following my inclination to work for a start-up has been an extremely positive decision; it would be an understatement to say that I’m never bored. 

This summer, I get to code quite a bit, but I am not exclusively focused on coding. As the summer goes on, I hope to use my newfound Tessel skills to make the experience of using Tessel even better for our users. This means I am doing everything from finding bugs in the codebase to helping define the style guide for all the documentation that an open source project requires. Plus, I get to come up with all sorts of awesome projects for  the Tessel, and then get paid to make and document them. Pretty cool, right? 

My work this summer is guided by the goal of understanding all the ways Tessel can fit into and improve the the world of connected devices. I’m having a blast so far, and I can’t wait to see where my experimenting takes me.

Expect updates on my projects and what else I’ve been up to in the near future! Until then, you can always say hello on twitter [@paigereads](https://twitter.com/paigereads), or by email at paige at technical.io.

Paige]]></content:encoded>
    <wp:post_name>88595720252</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/87994947332</link>
    <pubDate>Fri, 06 Jun 2014 12:13:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[jon mckay]]></category>
		<category domain="tag" nicename="jon-mckay"><![CDATA[jon mckay]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[shipping]]></category>
		<category domain="tag" nicename="shipping"><![CDATA[shipping]]></category>
		<category domain="tag"><![CDATA[milestone]]></category>
		<category domain="tag" nicename="milestone"><![CDATA[milestone]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[javascript on hardware]]></category>
		<category domain="tag" nicename="javascript-on-hardware"><![CDATA[javascript on hardware]]></category>
		<category domain="tag"><![CDATA[node]]></category>
		<category domain="tag" nicename="node"><![CDATA[node]]></category>
		<category domain="tag"><![CDATA[node.js]]></category>
		<category domain="tag" nicename="nodejs"><![CDATA[node.js]]></category>
		<category domain="tag"><![CDATA[compatibility]]></category>
		<category domain="tag" nicename="compatibility"><![CDATA[compatibility]]></category>
		<category domain="tag"><![CDATA[speed]]></category>
		<category domain="tag" nicename="speed"><![CDATA[speed]]></category>
		<category domain="tag"><![CDATA[microcontroller]]></category>
		<category domain="tag" nicename="microcontroller"><![CDATA[microcontroller]]></category>
		<category domain="tag"><![CDATA[javascript on microcontrollers]]></category>
		<category domain="tag" nicename="javascript-on-microcontrollers"><![CDATA[javascript on microcontrollers]]></category>
		<category domain="tag"><![CDATA[wifi]]></category>
		<category domain="tag" nicename="wifi"><![CDATA[wifi]]></category>
		<category domain="tag"><![CDATA[wireless code]]></category>
		<category domain="tag" nicename="wireless-code"><![CDATA[wireless code]]></category>
		<category domain="tag"><![CDATA[open source]]></category>
		<category domain="tag" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="tag"><![CDATA[open company]]></category>
		<category domain="tag" nicename="open-company"><![CDATA[open company]]></category>
		<category domain="tag"><![CDATA[internet]]></category>
		<category domain="tag" nicename="internet"><![CDATA[internet]]></category>
		<category domain="tag"><![CDATA[iot]]></category>
		<category domain="tag" nicename="iot"><![CDATA[iot]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/87994947332</guid>
    <!--<wp:post_id>87994947332</wp:post_id>-->
    <wp:post_date>2014-06-06 9:13:00</wp:post_date>
    <wp:post_date_gmt>2014-06-06 16:13:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>JS on MCUs – Only Getting Better From Here</title>
    <description></description>
    <content:encoded><![CDATA[#####6/6/2014– [Jon McKay](http://blog.technical.io/search/jon+mckay)

As the [boxes start rolling out of our fulfillment house](https://twitter.com/technicalhumans/status/474220371361542144), the “pre-order” button switches to a “[buy now](http://tessel.io)” button, and I shave [my “no-shave shiptember” “beard”](https://twitter.com/technicalhumans/status/473863166674616320), it’s slowly dawning on me what an accomplishment our team has made.

We’re certainly not done polishing, but I’m enormously impressed that the our team of six (plus 3 new interns!) was able to combine the useful qualities of a microcontroller, the internet, JavaScript, and Node.js onto a single device -each of which has already made a significant impact on the direction of technology. 

![](https://31.media.tumblr.com/bcd37d6b87b07a39fdfca4a680bf17d1/tumblr_inline_n6q76dLSy51s75tgz.jpg)

We owe a **huge** portion of our progress to the entire open source sphere, both hardware and software. We were fortunate enough to use code and hardware designs from the folks at Adafruit, Joyent, and the creators of hundreds of discrete NPM repos. So, thank you and feel free to make use of or contribute to our [recently open-sourced code](http://github.com/tessel).

The release of Tessel is only the start. We have a roadmap of features and improvements that we plan to release over the coming weeks when we’re not busy fixing bugs:

**WiFi Reliability & Wireless Code Pushing**: At release, Tessel can be programmed over USB. In the next few weeks, we hope to introduce wireless code pushing so that users can push code to Tessel over the internet.  We have already built out the backend server and security infrastructure; we just need to improve the reliability of our WiFi connections and finish writing the client code that runs on Tessel.

**Execution Speed**: As you might expect, running an interpreted language on a microcontroller is pretty slow compared to a compiled language. The good news is that Tessel’s runtime is just about as slow and bulky as it ever will be. Programming microcontrollers with JavaScript is only going to get faster, lighter, and more reliable. We’ve got some tricks up our sleeves, primarily switching to a LuaJIT architecture, to drastically improve the speed of execution. It’s one of our top priorities as we prove out the viability of higher level languages on microcontrollers.

**Node Compatibility**: The most common and applicable Node libraries will all be available on Tessel (Streams, HTTP, EventEmitter, etc.). However, some less applicable libraries are not yet available. We will add support for vm, child_process, readline, repl, tty, debugger, and zlib over time after shipping. We don’t plan to support the cluster (you’ve only one core) and domains library. You can follow our progress on our [compatibility page](https://tessel.io/docs/compatibility#node) and if you’re interested in helping out develop our open source software, shoot us an email (team@technical.io). We’d love the help. 

As a young company that has yet to hit it’s first birthday, feedback from the community is the most important factor in the direction of our company. If you see something you like, something you want changed, or something you want removed, please, please, please get in touch. We’re available on our [Forums](forums.tessel.io), [Twitter](twitter.com/technicalhumans), [Email](sendto://team@technical.io), or in person:

1101 Cowper St<br/>
Berkeley, CA 94702<br/>
United States of America

–Jon]]></content:encoded>
    <wp:post_name>87994947332</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/87905095507</link>
    <pubDate>Thu, 05 Jun 2014 12:57:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[eric kolker]]></category>
		<category domain="tag" nicename="eric-kolker"><![CDATA[eric kolker]]></category>
		<category domain="tag"><![CDATA[electrical engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[electrical engineering]]></category>
		<category domain="tag"><![CDATA[hardware is hard]]></category>
		<category domain="tag" nicename="hardware-is-hard"><![CDATA[hardware is hard]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[software]]></category>
		<category domain="tag" nicename="software"><![CDATA[software]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[expectations]]></category>
		<category domain="tag" nicename="expectations"><![CDATA[expectations]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/87905095507</guid>
    <!--<wp:post_id>87905095507</wp:post_id>-->
    <wp:post_date>2014-06-05 9:57:00</wp:post_date>
    <wp:post_date_gmt>2014-06-05 16:57:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Hardware is *different*</title>
    <description></description>
    <content:encoded><![CDATA[#####6/5/2014– [Eric Kolker](http://blog.technical.io/search/eric+kolker)

You hear the phrase “hardware is hard” a lot these days, usually when someone is new to hardware, and often in the context of what it takes to build it. Without forcing words into peoples’ mouths, the speaker is generally trying to convey the sense that building hardware feels more difficult than building other things because there’s so much to keep track of and think about.

As someone who designs hardware but is joining the world of software, I have some problems with this shorthand dismissal and what it implies. I’m also making a conscious point of saying this just as the first Tessels are hitting your mailboxes and as some of you are getting your first taste of hardware.

### “Hardware is hard”

No, it isn’t. Really. If anything, software is just incredibly easy. However, because many people who started off in software are now interested in hardware (hopefully you!), it behooves us all to try to understand what they’ve gotten themselves into and how it’s different from what they’re used to.

Allow me to back up, explain, and then offer some advice before we all leap headfirst into the world of hardware.

### Context

![Where I come from, this is what robots look like](http://www.bostondynamics.com/img/LS3-BostonDynamics_1.jpg)

My background is in electrical engineering. In previous lives, I built and programmed robots small and large – everything from LEGO MindStorms to [Boston Dynamics' LS3](https://www.youtube.com/watch?v=R7ezXBEBE6U), which, at the time, was arguably the most advanced quadruped robot in the world. I've designed large portions of a small satellite, an ultra-high bandwidth, medical-grade wireless data link for CT scanners, and my own integrated circuit. I'm used to, and indeed completely comfortable with, creating entire systems which work correctly the first time, due in large part to [careful architecting, simulation](http://en.wikipedia.org/wiki/SPICE), and a firm grasp of innards of every would-be black box and pitfall in the system. I’m accustomed to spending enough time planning that the implementation goes off largely without a hitch, which is typically the expectation for electrical engineers.

All that goes to say that hardware engineers **must** be considerably more careful about the work they do than web developers because the costs of a second chance are so much higher. Case in point: I have **never** met an EE who would even entertain the notion of ["FISI"](http://www.startupvitamins.com/products/startup-poster-fuck-it-ship-it) because doing so is unforgivably irresponsible and expensive on so many levels.

Don’t get me wrong, there are certainly programmers who are more risk-averse than I and whose systems cannot afford to fail. My point is just that many web developers have luxuries which allow them to be a little more cavalier than hardware engineers can typically afford to be. In the end, these luxuries allow for the buildup of bad habits for dealing with hardware.

### What’s actually different?

Hardware and software happen at different speeds and require different skill sets. In a nutshell, hardware requires more caution, attention to detail, patience, and knowledge of a broader range of topics than software because most of the time, the building blocks are, admittedly, harder to assemble. The black boxes in hardware are less ideal than those you encounter in software because they exist physically in the real world (as opposed to merely as instances of ideas), and are therefore more sensitive to their neighbors. 

![Unless you’re talking abot inside an IC, 10 picofarads is a miniscule amount of capacitance](http://www.sigcon.com/images/straight/plansifig1.gif)

A few choice examples come to mind:

* Things cost more money and time. [Supply chains](http://en.wikipedia.org/wiki/Supply_chain), fabrication time, shipping, and calibration all have very different definitions and consequences for hardware. [Missteps as a result of any of these](http://www.washingtonpost.com/business/economy/toyota-reaches-12-billion-settlement-to-end-criminal-probe/2014/03/19/5738a3c4-af69-11e3-9627-c65021d6d572_story.html) can destroy companies alltogether.
* More fundamentally and ironically, because computers start off as electrical systems, each of their operations happen on electrical timescales (the timescales of chemical reactions and light), while electrical systems begin their lives as mechanical systems, which necessarily move much more slowly. 
* In hardware, debugging is not as easy as `console.log`. Instead, it often requires [additional equipment that can cost thousands of dollars](http://www.tek.com/oscilloscope#all) and takes time to set up, adjust, and calibrate. Fractions of a millimeter and millionths of a second matter, often tremendously; sometimes electrical systems are so sensitive that [measuring the system will change the way that it behaves](http://circuitslab.case.edu/manuals/Probe_Fundamentals-_Tektronix.pdf).
* On top of all that, a thorough grasp of the system’s physics is often tremendously important, if not essential, to understanding its subtleties (read: pitfalls, failure modes, etc.). This may sound weird, but the simple fact that modern computers are treated as discrete and digital devices with well-defined interfaces is simultaneously one of their most valuable traits and largest liabilities. Because software typically assumes that we can draw hard lines that place things firmly in one of two states, we rarely account for the fact that physical systems are actually analog and asynchronous. These assumptions are therefore implicitly built upon approximations rather than absolutes. ...And without getting too meta, the crux of the issue is that problems typically arise due to the approximations we make at the [intersections between digital and analog](http://en.wikipedia.org/wiki/Eye_diagram).

[![Eye diagrams are neat, but if you need to capture one it’s already too late...](http://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Multipath_system_eye_diagram.svg/512px-Multipath_system_eye_diagram.svg.png)](http://en.wikipedia.org/wiki/Eye_diagram)

### So what?

We've done our best with Tessel to make sure that you don’t need to do or worry too much about any of the really nasty hardware bits, but [you'll still need to come the last 10%](https://www.youtube.com/watch?v=DSpJQlBJCzA). Understand that the consequences are more real than they are with software if you don't read the documentation and/or do something careless with the product.

Think about what you want to build, understand your system’s requirements, and set specifications that are both physically possible and sensible. Do research into what goes into anything you build, and ask lots of questions on the [forums](http://forums.tessel.io/). I promise we’ll do our best to answer them.

Last but not least, come to terms with the cost of developing embedded systems in JS: performance. Fundamentally, you’re working with an interpreted language (JS) that has been [transpiled](http://en.wikipedia.org/wiki/Source-to-source_compiler) to another (Lua), which is being interpreted by something other than V8, which is running on a 180 MHz processor. Tessel is certainly no iPhone, but we’re confident that it’s more powerful and more versatile than similar products which run JS because it’s node-compatible and doesn’t need a lifeline to the PC. You’ll be fine so long as you don’t try to stream video, run intensive algorithms, load 14 different node modules, or demand that your loops run at 100Hz.

### Call to action

...So what I ask of you is actually pretty simple. Appreciate that Tessel has been about a year in the making and that in order to use it properly you may need to [learn a little bit about what goes on under the hood](http://en.wikipedia.org/wiki/The_Art_of_Electronics). Together we can make hardware prototyping easier, but doing so will require that we do more than [admire electrical systems when they walk by](http://explosm.net/comics/3557/) (guilty parties typically include “LED all the things!” and “OMG quadcopters!”). Read our [documentation](tessel.io/docs) *before* you run into trouble, then look up anything that continues to misbehave.

Once your projects take you to the edge of what our modules can do, I hope you'll take the plunge and try your hand at building hardware, and in doing so start to see why the people on my side of the table have the habits we do.

Most importantly, I hope you learn a lot and have a lot of fun, so get out there and start building!

Thanks!<br/>
~e]]></content:encoded>
    <wp:post_name>87905095507</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/87771468737</link>
    <pubDate>Wed, 04 Jun 2014 01:32:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[shipped]]></category>
		<category domain="tag" nicename="shipped"><![CDATA[shipped]]></category>
		<category domain="tag"><![CDATA[shipping]]></category>
		<category domain="tag" nicename="shipping"><![CDATA[shipping]]></category>
		<category domain="tag"><![CDATA[crowdfunding]]></category>
		<category domain="tag" nicename="crowdfunding"><![CDATA[crowdfunding]]></category>
		<category domain="tag"><![CDATA[pre-orders]]></category>
		<category domain="tag" nicename="pre-orders"><![CDATA[pre-orders]]></category>
		<category domain="tag"><![CDATA[celebration]]></category>
		<category domain="tag" nicename="celebration"><![CDATA[celebration]]></category>
		<category domain="tag"><![CDATA[fulfillment]]></category>
		<category domain="tag" nicename="fulfillment"><![CDATA[fulfillment]]></category>
		<category domain="tag"><![CDATA[interns]]></category>
		<category domain="tag" nicename="interns"><![CDATA[interns]]></category>
		<category domain="tag"><![CDATA[happy]]></category>
		<category domain="tag" nicename="happy"><![CDATA[happy]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/87771468737</guid>
    <!--<wp:post_id>87771468737</wp:post_id>-->
    <wp:post_date>2014-06-03 22:32:00</wp:post_date>
    <wp:post_date_gmt>2014-06-04 05:32:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessel Shipped! And Other News</title>
    <description></description>
    <content:encoded><![CDATA[#####6/3/2014— [Updates](http://blog.technical.io/search/update)

###Tessel has shipped!

![](https://31.media.tumblr.com/c8b8d173c5284ad0f7abd77cb8032ffe/tumblr_inline_n6mh0fT8Sj1s75tgz.png)

Our friends at Rush Order (our fulfillment house) just sent me pictures of the first boxes going out to customers:

![](https://31.media.tumblr.com/b9716fc23ac2d295bb475c06268741b6/tumblr_inline_n6mgywNibY1s75tgz.jpg)

There are a lot of packages to send, but our fulfillment house estimates that all pre-orders will be shipped by June 14th.

We are shipping continuously from now on, so you will be able to order online and have your new order shipped right away.

###What else is going on?
You should see some updates to our website in the next several days as we improve our installation, tutorials, and documentation. Keep an eye out!

We have interns! Expect to see blog posts and projects soon from Paige, Evan, and Nathan, who have joined us as engineering interns this summer.

In addition to continued improvements on Tessel's firmware and software (expect a blog post soon with more details on R&D), we're working on a site specifically designed for people to share their Tessel projects. Please take pictures and videos of what you make– and while you're waiting for our projects site to come alive, feel free to share your ideas and your projects on our [forums](forums.tessel.io). We're eagerly anticipating the first projects from our community, and what you make and share with us will guide where Technical Machine goes next.

###Keep in touch!
You may already follow us on [Twitter](https://twitter.com/technicalhumans), but we also have company [Instagram](http://instagram.com/technicalhumans) and [Vine](https://vine.co/u/1024106771322687488) accounts, which we usually don’t cross-post onto other platforms. Get the inside scoop, from my camera phone to yours. (We also have [Pinterest](http://www.pinterest.com/technicalhumans/), [Facebook](https://www.facebook.com/technicallyamachine), and [Google +](https://plus.google.com/u/1/b/103029349995646385959/103029349995646385959/posts), if you’re into that.)


Still cranking on Tessel,<br/>
Kelsey, Jon, Jia, Tim, Kevin, Eric, Paige, Evan, and Natty]]></content:encoded>
    <wp:post_name>87771468737</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/86411344397</link>
    <pubDate>Wed, 21 May 2014 11:32:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[solidcon]]></category>
		<category domain="tag" nicename="solidcon"><![CDATA[solidcon]]></category>
		<category domain="tag"><![CDATA[internet of things]]></category>
		<category domain="tag" nicename="internet-of-things"><![CDATA[internet of things]]></category>
		<category domain="tag"><![CDATA[iot]]></category>
		<category domain="tag" nicename="iot"><![CDATA[iot]]></category>
		<category domain="tag"><![CDATA[zuora]]></category>
		<category domain="tag" nicename="zuora"><![CDATA[zuora]]></category>
		<category domain="tag"><![CDATA[connected devices]]></category>
		<category domain="tag" nicename="connected-devices"><![CDATA[connected devices]]></category>
		<category domain="tag"><![CDATA[ubiquitous computing]]></category>
		<category domain="tag" nicename="ubiquitous-computing"><![CDATA[ubiquitous computing]]></category>
		<category domain="tag"><![CDATA[mark weiser]]></category>
		<category domain="tag" nicename="mark-weiser"><![CDATA[mark weiser]]></category>
		<category domain="tag"><![CDATA[design]]></category>
		<category domain="tag" nicename="design"><![CDATA[design]]></category>
		<category domain="tag"><![CDATA[interaction]]></category>
		<category domain="tag" nicename="interaction"><![CDATA[interaction]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/86411344397</guid>
    <!--<wp:post_id>86411344397</wp:post_id>-->
    <wp:post_date>2014-05-21 8:32:00</wp:post_date>
    <wp:post_date_gmt>2014-05-21 15:32:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Designing for Humans</title>
    <description></description>
    <content:encoded><![CDATA[#####5/21/2014– [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

Travis Huch from Zuora sent me a few questions leading up to my talk at SolidCon, [Beyond the Screen: Humans as Input-Output Devices](http://solidcon.com/solid2014/public/schedule/detail/33422). Zuora published snippets of my responses alongside those of some thought leaders in the Internet of Things space.

I encourage you to read their piece here: [Internet of Things: The Big Picture](http://blog.zuora.com/zblog/2014/05/new-applications-of-the-internet-of-things-and-humans-you-will-have-to-see-to-believe.html)

Below are my full responses to their questions.

How have connected devices already evolved beyond mere devices to completely interactive tools feeding and responding to human inputs and outputs? Specifically how do currently available devices already improve and enhance our lives providing more freedom, comfort, improving safety and health, etc? 

A completely interactive tool, one that seamlessly incorporates humans as a piece of the system, is a tool that people don’t even think about. That’s the end goal: Ubiquitous Computing as Mark Weiser imagined it. Every object is an embedded device, and as the user, you don’t even notice the calm flow of optimization.

The Nest thermostat is a good example of this sort of calm technology. The device sits on your wall, and you don’t spend much time interacting with it after the initial setup. It learns your habits: when you’re home, when you’re not, what temperatures you want your house to be at various points in the day. So you, as the user, don’t think about it. You just live in a world that’s better attuned to you.

There aren’t a lot of devices yet that interact seamlessly with humans in this way– as a society, we’re just beginning to explore ubiquity in computing. Smartphones and wearable devices are reaching in that direction, but I think within five years, we’ll find most of these interfaces fairly clunky.

What groundbreaking human applications of these technologies are still on the horizon? What are some ways these can be used to make our environment more interactive, and responsive?

I think that one of the most interesting things we’ll see in the near future is the creation of non-screen interfaces. Interacting with technology, we rely almost solely on screens and buttons. But in the physical world, we use so many other interfaces.

Although it might be a while before consumer tech does much with the olfactory or gustatory sensations, audio and haptic device outputs are already interesting and fairly accessible. [Lechal](http://www.gizmag.com/lechal-haptic-feedback-navigation-shoes/30939/) embodies a simple haptics concept: shoes which vibrate left or right navigational directions as you approach a turn. And though audio has also been used for a long time, innovations such as [audio spotlighting](http://www.holosonics.com/) open up possibilities for personal/non-disruptive audio without the need to put a plastic device (headphones) on your head.

Those are all inputs into humans, but there’s a lot of fascinating work going on to receive outputs from humans. The consumer-oriented [Myo](https://www.thalmic.com/en/myo/) armband uses myoelectrics– the electrical signals from human muscle impulses– to read gestures. Or you could spin your own myoelectric device with [this](http://www.advancertechnologies.com/p/muscle-sensor-v3.html) much cheaper muscle sensor. Similarly, you can buy an [Emotiv](http://emotiv.com/) headset to read your brainwaves, or you could [DIY](http://www.instructables.com/id/DIY-EEG-and-ECG-Circuit/) it. The implications there are amazing: you can wire up your own body as an electrical input into any electrical system– like a computer, or a robot, or whatever else you might build. You can control physical and digital things just by thinking really hard or by twitching your fingers.

Current electrodes with long wire leads are a bit impractical for everyday wear, but research labs are working on that in a field called epidermal electronics. This field puts electronics right on people’s skin, for example in the form of a [temporary tattoo](http://rogers.matse.illinois.edu/files/2011/eesscience.pdf) or more like a [band-aid](http://www.sciencemag.org/content/344/6179/70.short). A circuit adhered to your skin could monitor and wirelessly transmit your heartbeat, temperature, motion, location, or any of various other sensor data, 24/7, while keeping a low profile on your body. [Graphene](https://gigaom.com/2013/07/15/what-is-graphene-heres-what-you-need-to-know-about-a-material-that-could-be-the-next-silicon/) is another move in that direction.

![](https://31.media.tumblr.com/36a3cffddf8f7ac7b6ac8aa20ee85be8/tumblr_inline_n5xkn6quzH1s75tgz.jpg)

#####[Epidermal electronics photo from ucsd.edu](http://coleman.ucsd.edu/blog/2011/08/11/epidermal-electronics-science-publication/)

Meanwhile, systems in the consumer space explore accepting input from humans without requiring physical attachment. The simple motion detectors on lights, on automatic faucets, on self-flushing toilets are good examples of simple and intuitive interfaces. These accept natural human motions to perform previously manual tasks. More complex interactions move up to gestural control, such as on the [Leap](http://leapmotion.com/) or [Kinect](http://www.xbox.com/en-US/kinect) controllers, or even facial emotion recognition with [Emotient](http://www.emotient.com/).

On the whole, I think (hope) we’re about to get a lot better at interfacing machines with people outside of computer screens.

--

Kelsey Breseman]]></content:encoded>
    <wp:post_name>86411344397</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/85831895787</link>
    <pubDate>Thu, 15 May 2014 13:29:12 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[manufacturing]]></category>
		<category domain="tag" nicename="manufacturing"><![CDATA[manufacturing]]></category>
		<category domain="tag"><![CDATA[progress]]></category>
		<category domain="tag" nicename="progress"><![CDATA[progress]]></category>
		<category domain="tag"><![CDATA[modules]]></category>
		<category domain="tag" nicename="modules"><![CDATA[modules]]></category>
		<category domain="tag"><![CDATA[open source]]></category>
		<category domain="tag" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="tag"><![CDATA[module drivers]]></category>
		<category domain="tag" nicename="module-drivers"><![CDATA[module drivers]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/85831895787</guid>
    <!--<wp:post_id>85831895787</wp:post_id>-->
    <wp:post_date>2014-05-15 10:29:12</wp:post_date>
    <wp:post_date_gmt>2014-05-15 17:29:12</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Update: Modules are in, Tessels starting to come off the line</title>
    <description></description>
    <content:encoded><![CDATA[#####5/15/2014— [Updates](http://blog.technical.io/search/update)

###Manufacturing update:
We have [all of our modules back from manufacturing](http://instagram.com/p/n_N7Edpmbi/) as of yesterday.

![](https://31.media.tumblr.com/80a96a7e2cefecbef8d126811c3ff472/tumblr_inline_n5mln2ct6A1s75tgz.png)

The last Tessels are going through assembly [as of this morning](https://twitter.com/WAssembly/status/466924354610401280/photo/1), so  they're moving full-force into the process of programming and testing. The testing process actually uses a Tessel and a Raspberry Pi to program the new Tessel boards and live stream their test results to an internal webapp that Jia wrote. You can read more about it on [her blog post](http://blog.technical.io/post/85632183767/testing-tessel-with-testalator).

When they’re done, they go in a bag with some stickers and a cable. This is [the first one off the line](https://twitter.com/technicalhumans/status/465874802772025344):

![](https://31.media.tumblr.com/f969b4b18f02983b1e77bbe11d3b08a5/tumblr_inline_n5j40tVVgC1s75tgz.jpg)

Our manufacturers made a really cool video of the whole process, which you can see [here](http://blog.technical.io/post/85735580172/this-is-how-a-tessel-is-made-video-courtesy-of).

###Software update:
We’re cleaning everything up to get ready for release! We’ve open sourced the module drivers for [Accelerometer](https://github.com/tessel/accel-mma84), [Ambient](https://github.com/tessel/ambient-attx4), [GPS](https://github.com/tessel/gps-a2235h), [Relay](https://github.com/tessel/relay-mono), and [Servo](https://github.com/tessel/servo-pca9685). Enjoy, and pull requests welcome!

###Moving:
While all of this was going on, we also moved to California! Feel free to visit at our new address: 1101 Cowper Street in Berkeley CA. [Jon blogged about it](http://blog.technical.io/post/85222059052/hidden-costs-of-office-space).

Until next time,<br/>
Kelsey, Jon, Eric, Tim, Kevin, and Jia]]></content:encoded>
    <wp:post_name>85831895787</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/85735580172</link>
    <pubDate>Wed, 14 May 2014 13:38:52 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[video]]></category>
		<category domain="category" nicename="video"><![CDATA[video]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[manufacturing]]></category>
		<category domain="tag" nicename="manufacturing"><![CDATA[manufacturing]]></category>
		<category domain="tag"><![CDATA[worthington assembly]]></category>
		<category domain="tag" nicename="worthington-assembly"><![CDATA[worthington assembly]]></category>
		<category domain="tag"><![CDATA[pick and place]]></category>
		<category domain="tag" nicename="pick-and-place"><![CDATA[pick and place]]></category>
		<category domain="tag"><![CDATA[packaging]]></category>
		<category domain="tag" nicename="packaging"><![CDATA[packaging]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/85735580172</guid>
    <!--<wp:post_id>85735580172</wp:post_id>-->
    <wp:post_date>2014-05-14 10:38:52</wp:post_date>
    <wp:post_date_gmt>2014-05-14 17:38:52</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title></title>
    <description></description>
    <content:encoded><![CDATA[
              <iframe width="400" height="225"  id="youtube_iframe" src="https://www.youtube.com/embed/KiD3BK56GrI?feature=oembed&amp;enablejsapi=1&amp;origin=http://safe.txmblr.com&amp;wmode=opaque" frameborder="0" allowfullscreen></iframe>              This is how a Tessel is made.
Video courtesy of Worthington Assembly, Inc.      ]]></content:encoded>
    <wp:post_name>85735580172</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/85632183767</link>
    <pubDate>Tue, 13 May 2014 12:17:15 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[jia huang]]></category>
		<category domain="tag" nicename="jia-huang"><![CDATA[jia huang]]></category>
		<category domain="tag"><![CDATA[testing]]></category>
		<category domain="tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[testalator]]></category>
		<category domain="tag" nicename="testalator"><![CDATA[testalator]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[manufacturing]]></category>
		<category domain="tag" nicename="manufacturing"><![CDATA[manufacturing]]></category>
		<category domain="tag"><![CDATA[qa]]></category>
		<category domain="tag" nicename="qa"><![CDATA[qa]]></category>
		<category domain="tag"><![CDATA[quality control]]></category>
		<category domain="tag" nicename="quality-control"><![CDATA[quality control]]></category>
		<category domain="tag"><![CDATA[firmware]]></category>
		<category domain="tag" nicename="firmware"><![CDATA[firmware]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/85632183767</guid>
    <!--<wp:post_id>85632183767</wp:post_id>-->
    <wp:post_date>2014-05-13 9:17:15</wp:post_date>
    <wp:post_date_gmt>2014-05-13 16:17:15</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Testing Tessel with Testalator</title>
    <description></description>
    <content:encoded><![CDATA[#####5/13/2014— [Jia Huang](http://blog.technical.io/search/jia+huang)

![](https://31.media.tumblr.com/b336f530e9a4248de6d39af692e39c3e/tumblr_inline_n5haovyLNM1s75tgz.png)

We recently started a production run of 2.5k Tessels. When we put something in production, it's not just a matter of telling our manufacturer to start placing components on boards. We also have to make sure that every Tessel we produce is programmed and tested, and that’s where Testalator comes in.

###Testalator
Testalator is Tessel’s programming and test rig. It programs Tessel up with all its firmware and then makes sure the Tessel can operate to spec.

The physical Testalator is made up of a few key parts:

* A mechanical jig that holds the Tessel in place
* A second Tessel that checks that all the pins on the Tessel being tested works.
* A Raspberry Pi that hooks up to the jig, programs and checks Tessel, and then streams those logs online. 

### The jig
This is the physical setup required to connect all the pins of Tessel for testing. It involves around 60 [pogo pins](http://en.wikipedia.org/wiki/Pogo_pin), 22 standoffs, and 2 cut pieces of acrylic that hold the Tessel in place. There’s also a few indicator LEDs showing the progression of the test.

![](https://31.media.tumblr.com/7fc4aea10571c4bb61ad8da014066754/tumblr_inline_n5hapr2UzG1s75tgz.png)

“Wow Jia, you should try Mechanical Engineering”, said no one. The clear flanges that held the Tessel in place were too loose at first so Eric “fixed” it with some hot glue.

### The Pi
A Raspberry Pi operates the entire test. The jig connects to the Pi’s GPIO and USB ports. Testing & programming involves going through the following stages:

* One Time Program (OTP) the board. This sets up the version of the board, and makes it boot from internal flash by default. We also stick on our custom bootloader so we can update the firmware later.
* Put Tessel’s firmware on the board
* Upload some JS to do a pin test
* Upload some JS code while switching power sources
* Connect to wifi and do a ping test

There are some more checks in between each stage, but this covers most of the functionality of the board.  

### Tessel tests Tessel
One core part of Testalator is the pin test. The pin test is the test that checks to make sure that all the pins on the module headers (GPIO/SPI/I2C/ADC/etc) can operate as intended.

We use a Tessel to do the pin test on Tessel. The Tessel tester is hooked up on the bottom of the jig using vertical headers:

![](https://31.media.tumblr.com/504028c12f180b6cee0407a4cd23b314/tumblr_inline_n5haqsR0eB1s75tgz.png)

The Pi uploads some JS code to the Tessel being tested which starts up the pin test. After that, the two Tessels communicate for which test is commencing and what the expected output should be.

###Streaming test logs

Testalator also streams all the test logs online as it operates.

![](https://31.media.tumblr.com/cb8bdee9ef11d0a8f4d4f0a95482d759/tumblr_inline_n5har3xOvq1s75tgz.png)

![](https://31.media.tumblr.com/c75c8536e3a43d68f672df00f2dccbe8/tumblr_inline_n5hard2HYE1s75tgz.png)

Since manufacturing is still done in Massachusetts and we’re across the country in Berkeley right now, these logs give us an easy way to see which tests have passed or failed, and which bench did the testing. We’ve found this pretty helpful in debugging any consistent failures during manufacturing. Using this, I can see which failure modes are happening often, ssh into the Pi, and fix the test remotely.

The Testalators have programmed and tested about 100 boards so far, so there’s still quite a few more to go.

Here's to hoping everything goes according to plan.

Jia]]></content:encoded>
    <wp:post_name>85632183767</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/85222059052</link>
    <pubDate>Fri, 09 May 2014 11:15:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[jon mckay]]></category>
		<category domain="tag" nicename="jon-mckay"><![CDATA[jon mckay]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[office]]></category>
		<category domain="tag" nicename="office"><![CDATA[office]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
		<category domain="tag"><![CDATA[budgeting]]></category>
		<category domain="tag" nicename="budgeting"><![CDATA[budgeting]]></category>
		<category domain="tag"><![CDATA[startup advice]]></category>
		<category domain="tag" nicename="startup-advice"><![CDATA[startup advice]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/85222059052</guid>
    <!--<wp:post_id>85222059052</wp:post_id>-->
    <wp:post_date>2014-05-09 8:15:00</wp:post_date>
    <wp:post_date_gmt>2014-05-09 15:15:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Hidden Costs of Office Space</title>
    <description></description>
    <content:encoded><![CDATA[#####5/9/2014— [Jon McKay](http://blog.technical.io/search/jon+mckay)

In the past year, Technical Machine has worked out of an incubator, college dorm rooms, various apartment buildings, and a co-working space. But we’ve always wanted an office to be able to hack on projects with other people and to generally be our loud, boisterous selves without upsetting others. We started looking for a space in March, and now we’re finally moved into a beautiful workspace in Berkeley!

![](https://31.media.tumblr.com/bde274f94edf4a6ffe0a2b74c0bde056/tumblr_inline_n5a5tkfZAf1s75tgz.jpg)

As with most tasks involved with starting a company, I had no experience finding and leasing an office. As someone who hasn’t lived in the same place for more than a few months since 2009, the process of securing a multi-year lease was pretty abstract. In my mind, the only operating figure was rent but I was wrong.  Some of the logistics will be familiar for anyone who has rented housing before, but others are unique to offices.

Below is a list of costs associated with leasing an office that may not be apparent if you’re in shoes similar to mine:

* **Rent:** I thought this would be a simple term in the lease but it turns out to be way more complicated. Obviously, rent will vary from location to location; property in Berkeley is about $1.50 per sq. foot, whereas SF proper is about $4 per sq. foot. You will probably be required to pay several months of rent up front. You might have more negotiating power if you can pay more upfront than the landlords originally ask for. Here are some other good questions to consider:
  * How many years will you be leasing at this price, and do you have the option to stay longer?
  * If you are staying longer, is the price for the extension pre-negotiated or will you figure it out in the future? 
  * What’s the fee for paying rent late? 
  * Can you rent your space out to other people? For example, if you wanted to let a smaller companies rent extra square footage.  
* **Security Deposit:** There will be a security deposit to make sure you don’t destroy the building. Ours was $10k for the 2800 sq. feet workspace.
* **Insurance:** Most leases will require you to get several types of insurance before you can step foot on the premises. Your insurance costs will vary by the insurance coverage and size of your company. As a benchmark, our insurance for six people will cost about $1500 a year. If an incident occurs, you will have to pay a deductible – ours is $500. I recommend asking around for an insurance broker to save you from having to talk to insurance companies directly. They charge anywhere from 15 - 25% of the annual cost. The common types of insurance are:
  * General Liability (if a non-employee gets injured on the premises, someone drives their car into a wall, etc.)
  * Property (cover the items inside the property such as computers, furniture)
  * Business Interruption (if something outside your control prevents you from doing business and you lose sales)
  * Worker’s Compensation insurance (an employee gets injured on the job).  
* **Utilities:** Gas, electric, and water! Don’t forget to set it up before you get there. As with personal housing, you may be splitting your utilities with other tenants of the property, or you’ll have to set it up yourself. I don’t have a good estimate of how much utilities will cost per month yet but I expect it to be several hundred dollars.
* **Internet/Phone:** You may not need phone service, but you’ll need internet. Check with the landlord to see what service is already available at the building. You can get a cheaper installation cost with a service that’s already routed to the building. This will cost you $100-$200 per month depending on the speed of internet. I recommend buying your own cable modem and router.
* **Furniture:** As we found out the hard way (literally), you’ll need things to sit on besides the floor if you want your employees to be happy and healthy. We went to IKEA, bought about $4k worth of shelves, desks, chairs, and conference tables. The real kicker here will be the time spent putting it all together. We opted to use TaskRabbit to hire to guys to come put it together for us. Instead of paying IKEA $3k to install it, we paid for 15 man hours with only $300. Don’t try to do it all yourself!
* **Miscellaneous:** You never really notice all those little items you depend on every day until you try to work in an empty office. I’m talking about tape, scissors, kitchen towels, printers, drills, vacuums, soap, and TP. This is where you could really break the bank. I’d estimate that we’ve spent about $2k on these types of items so far.
* **Time:** The biggest cost here is time. Negotiating lease agreements back and forth, opening up Amazon shipments, online shopping, putting checks in the mail. It takes hours out of your day and pulls your attention away from the product. You really need to outsource as much as you can. Use insurance brokers, real estate brokers, TaskRabbit, Amazon Prime. If you have the money, it’s totally worth it.

If we include all those factors, (non-recurring costs spread out over the remainder of the lease), the actual cost per month is about 20% higher than just rent alone. Be sure to account for that in your planning.

Now that we’re starting to get acclimated to the new office, I love it and think that the whole process was totally worth it. I can’t wait to get some picnic tables in here, start hosting events and meet the community. If you’re in the bay area starting next month, keep your eye out for meetups! Or just drop on by:

Technical Machine<br/>
1101 Cowper St.<br/>
Berkeley, CA 94702

–Jon]]></content:encoded>
    <wp:post_name>85222059052</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/84532742222</link>
    <pubDate>Fri, 02 May 2014 13:19:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[manufacturing]]></category>
		<category domain="tag" nicename="manufacturing"><![CDATA[manufacturing]]></category>
		<category domain="tag"><![CDATA[fulfillment]]></category>
		<category domain="tag" nicename="fulfillment"><![CDATA[fulfillment]]></category>
		<category domain="tag"><![CDATA[PCBs]]></category>
		<category domain="tag" nicename="pcbs"><![CDATA[PCBs]]></category>
		<category domain="tag"><![CDATA[assembly]]></category>
		<category domain="tag" nicename="assembly"><![CDATA[assembly]]></category>
		<category domain="tag"><![CDATA[timeline]]></category>
		<category domain="tag" nicename="timeline"><![CDATA[timeline]]></category>
		<category domain="tag"><![CDATA[firmware]]></category>
		<category domain="tag" nicename="firmware"><![CDATA[firmware]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[documentation]]></category>
		<category domain="tag" nicename="documentation"><![CDATA[documentation]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/84532742222</guid>
    <!--<wp:post_id>84532742222</wp:post_id>-->
    <wp:post_date>2014-05-02 10:19:00</wp:post_date>
    <wp:post_date_gmt>2014-05-02 17:19:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessel Update 20: Manufacturing</title>
    <description></description>
    <content:encoded><![CDATA[#####5/2/2014— [Updates](http://blog.technical.io/search/update)

###Current Status
2500 Tessel PCBs have been manufactured, and have just arrived at Worthington Assembly in western Massachusetts:

![](https://31.media.tumblr.com/ecfc8c55661d6b71288a1a4111062668/tumblr_inline_n4yipva6n01s75tgz.jpg)

Worthington will assemble the boards, using pick-and-place machines to surface-mount solder the thousands of circuit components onto the PCBs, load our firmware code, and run the shiny new Tessels through a suite of tests.

When they’re satisfied, they package them up in antistatic bags for us and send them to Gilroy, California for fulfillment by Rush Order.

Rush Order is already receiving modules that have completed manufacturing . When they have received all of the modules and the Tessels, they will begin packing and sending individual orders.

###What we're working on

Meanwhile, we’re making sure all of the software is ready: making last-minute improvements to Tessel’s firmware, adding polish to the module code, writing lots of documentation.

We opened up our first pass at [Tessel’s API documentation](https://github.com/tessel/docs) last week, and updated our [hardware documentation](https://github.com/technicalmachine/tessel-design-docs) as well.

Expect to see more of our code open-sourced soon!

All the best,<br/>
Kelsey, Jia, Tim, Eric, Kevin, and Jon]]></content:encoded>
    <wp:post_name>84532742222</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/83625102398</link>
    <pubDate>Wed, 23 Apr 2014 11:49:49 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tim ryan]]></category>
		<category domain="tag" nicename="tim-ryan"><![CDATA[tim ryan]]></category>
		<category domain="tag"><![CDATA[wifi]]></category>
		<category domain="tag" nicename="wifi"><![CDATA[wifi]]></category>
		<category domain="tag"><![CDATA[cc3000]]></category>
		<category domain="tag" nicename="cc3000"><![CDATA[cc3000]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[reverse engineering]]></category>
		<category domain="tag" nicename="reverse-engineering"><![CDATA[reverse engineering]]></category>
		<category domain="tag"><![CDATA[open source]]></category>
		<category domain="tag" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[logic]]></category>
		<category domain="tag" nicename="logic"><![CDATA[logic]]></category>
		<category domain="tag"><![CDATA[saleae logic]]></category>
		<category domain="tag" nicename="saleae-logic"><![CDATA[saleae logic]]></category>
		<category domain="tag"><![CDATA[saleae]]></category>
		<category domain="tag" nicename="saleae"><![CDATA[saleae]]></category>
		<category domain="tag"><![CDATA[SPI]]></category>
		<category domain="tag" nicename="spi"><![CDATA[SPI]]></category>
		<category domain="tag"><![CDATA[tcp]]></category>
		<category domain="tag" nicename="tcp"><![CDATA[tcp]]></category>
		<category domain="tag"><![CDATA[ip]]></category>
		<category domain="tag" nicename="ip"><![CDATA[ip]]></category>
		<category domain="tag"><![CDATA[sigrok]]></category>
		<category domain="tag" nicename="sigrok"><![CDATA[sigrok]]></category>
		<category domain="tag"><![CDATA[debugging]]></category>
		<category domain="tag" nicename="debugging"><![CDATA[debugging]]></category>
		<category domain="tag"><![CDATA[high level]]></category>
		<category domain="tag" nicename="high-level"><![CDATA[high level]]></category>
		<category domain="tag"><![CDATA[automated debugging]]></category>
		<category domain="tag" nicename="automated-debugging"><![CDATA[automated debugging]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/83625102398</guid>
    <!--<wp:post_id>83625102398</wp:post_id>-->
    <wp:post_date>2014-04-23 8:49:49</wp:post_date>
    <wp:post_date_gmt>2014-04-23 15:49:49</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>High-Level Automated Hardware Debugging</title>
    <description></description>
    <content:encoded><![CDATA[#####4/23/2014— [Tim Ryan](http://blog.technical.io/search/tim+ryan)

The CC3000 is the on-board component that enables the Tessel to connect to WiFi. This $12 chip communicates over SPI, has a built-in TCP/IP stack, and comes with a host library that enables using it indistinguishably with the BSD sockets API. 

For example: Tessel, while not running Linux, can easily drop in a library like c-ares (used to look up the IP address correlated with a domain name) because we're using the same API used to make TCP/UDP queries on the desktop.

A chip this capable is naturally complicated, and so is Tessel's firmware. Debugging can occasionally be much more difficult than throwing open a GDB console and stepping through code. Is the state of the CC3000 chip known by the code? Was an incorrect command sent most recently, or a thousand commands ago? Is this TCP command originating through the JavaScript VM or directly from third-party code?

Instead of debugging all of these subsystems simultaneously, it's more straightforward to just analyze a) what commands the Tessel sends and b) what commands the CC3000 sends back. Using these exposed pins on the Tessel board and a logic analyzer, we can record the SPI communication emitted by any Tessel code and dissect exactly what went on.

<img src="https://camo.githubusercontent.com/f42336d1fba34346eaecf3da461d8dffe11e528b/687474703a2f2f696d6775722e636f6d2f4b69677379356a2e706e67" height="300">

<b>Tessel exposes breakout SPI pins for the CC3000.</b>

We have several of the [Saleae Logic](https://www.saleae.com/) line of logic analyzers around our office. The Logic and its larger brother the Logic 16 can record high-speed signals, for example the 4MHz SPI communication to the CC3000, as well as I2C, UART, or USB signals, then display them in a zoomable graph.

<img src="http://imgur.com/D6qOaft.png" height="300">

<b>The startup SPI sequence of the CC3000.</b>

The interface for the Logic analyzer is nice for being able to visualize erroneous communications, but we aren't much closer to understanding what is happening on the signal level. In particular:

1. The Logic analyzer has helpful visual tools to see what bytes are actually being *sent* over the protocol, but not what groups of bytes mean.
1. We have to specify an upper bound for the number of samples we want to take, rather than continuously logging.
1. The options to export data have to be configured each time.
1. We can't use the command line.

Luckily, the open source world of reverse engineering is alive and well!

**Sigrok**

Sigrok is an open-source library with a collection of drivers for various open-source projects. In our case, Sigrok supports a family of logic analyzers using the FX2 chip, including the Logic 8. Using `brew install sigrok` or any version 0.4.0 or newer from your repository, we can communicate with our analyzer directly from the command line.

```sh
sigrok-cli \
  --driver fx2lafw \
  --continuous \
  --config samplerate=8M \
  --output-format vcd \
  --output-file /tmp/sigrok.vcd \
  --probes 0=cs,1=miso,2=irq,3=mosi,4=sck,5=sw_en
```

We're using the `fx2` driver, with a sample rate of 8MHz (twice the speed our CC3000 runs at), outputting in [vcd](http://en.wikipedia.org/wiki/Value_change_dump) format to /tmp/sigrok.vcd, with probes 0-5 (named according to how they are named in the first diagram).   

The command will begin logging data from the Logic analyzer in perpetuity using the `--continuous` option, as long as the USB drivers can keep up*.

Now that we're logging to `/tmp/sigrok.vcd`, we can throw together a few Node modules to utilize it:

- **tail-stream** creates a stream of a file that is actively being written, outputting more data whenever the file size grows.
- **vcd** parses a textual value-change dump file, turning it into a series of "sample" events.
- **cc3000-log** is our own script for interpreting the signals of the CC3000, interpreting them as SPI and generating a human-readable list of communication:

<img src="http://imgur.com/JLc7JFS.png" height="300">

<b>The interpreted output of the CC3000 communication. Support for interpreting the payload bytes on the right is partially implemented.</b>

Instead of adding extensive debug facilities to many locations in our code (slowing it down and impacting the operation of the CPU), we can now be a silent observer: tapping the communication of the Tessel and the CC3000 and viewing *in real-time* how the IC is being controlled. This technique doesn't just apply to the CC3000, but for any module or IC that the Tessel communicates with!

**TLDR:** Sigrok is an open source library for communicating with commercial logic analyzers. Using it, you can make powerful, customized tools to debug ICs and signals from your command line, a welcome addition to automated testing.

We highly recommend and use the [Saleae Logic](http://saleae.com/). But if you're looking for something much cheaper (in price and quality) or throwaway devices to augment automated hardware testing, there are a variety of [clones](http://sigrok.org/wiki/Fx2lafw) from foreign markets also.

---
<small>* 8Mhz samples are a lot; originally I was trying to set `--output-format` as `binary` or `hex`, which would inevitably cause the device to stop responding. It wasn't bounded by my USB driver, it was bounded by the I/O speed of piping that many bytes to a file! The VCD format only outputs when values have changed, creating a drastically smaller log. In the future, we would bind directly to libsigrok for even faster throughput, but first hack first.</small>]]></content:encoded>
    <wp:post_name>83625102398</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/83414887955</link>
    <pubDate>Mon, 21 Apr 2014 10:59:56 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[manufacturing]]></category>
		<category domain="tag" nicename="manufacturing"><![CDATA[manufacturing]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[pcbs]]></category>
		<category domain="tag" nicename="pcbs"><![CDATA[pcbs]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/83414887955</guid>
    <!--<wp:post_id>83414887955</wp:post_id>-->
    <wp:post_date>2014-04-21 7:59:56</wp:post_date>
    <wp:post_date_gmt>2014-04-21 14:59:56</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessels are in production!</title>
    <description></description>
    <content:encoded><![CDATA[#####4/21/2014— [Updates](http://blog.technical.io/search/update)

Tessel PCBs are in manufacturing as of about two weeks ago.

Meanwhile, our modules have been coming in:

![](https://31.media.tumblr.com/6c18a076efa6a43d3ac3ed2ba18c609d/tumblr_inline_n4ck74Vxps1s75tgz.png)

That’s about 1700 modules in bags on our desk, and [more are rolling in all the time](https://www.facebook.com/media/set/?set=a.567390716708685.1073741835.290355304412229&type=1).

On the software side, we’ve begun continuous integration for all Desktop tools on Windows, Linux, and OS X, thanks to Travis CI and Appveyor. We’re also running continuous integration for our firmware builds on ARM. Look for details in an upcoming blog post.

Additional improvements:

* We’ve completed major firmware infrastructure improvements & bug fixes
* Eric updated [hardware design documentation](https://github.com/technicalmachine/tessel-design-docs)
* Jon has the camera module taking pictures:

![](https://31.media.tumblr.com/2947a80c6fbd6eed67a6a9410cb887d4/tumblr_inline_n4cka97P011s75tgz.jpg)
	
And here’s what we’re working on:

* Building out community site
* Improving Wireless communications
* Finishing module drivers
* Improving power consumption and event loop
* Moving to our new office in Berkeley, CA!]]></content:encoded>
    <wp:post_name>83414887955</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/82688165034</link>
    <pubDate>Mon, 14 Apr 2014 10:03:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[organization]]></category>
		<category domain="tag" nicename="organization"><![CDATA[organization]]></category>
		<category domain="tag"><![CDATA[project management]]></category>
		<category domain="tag" nicename="project-management"><![CDATA[project management]]></category>
		<category domain="tag"><![CDATA[pm]]></category>
		<category domain="tag" nicename="pm"><![CDATA[pm]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[asana]]></category>
		<category domain="tag" nicename="asana"><![CDATA[asana]]></category>
		<category domain="tag"><![CDATA[post-it]]></category>
		<category domain="tag" nicename="post-it"><![CDATA[post-it]]></category>
		<category domain="tag"><![CDATA[tasks]]></category>
		<category domain="tag" nicename="tasks"><![CDATA[tasks]]></category>
		<category domain="tag"><![CDATA[task management]]></category>
		<category domain="tag" nicename="task-management"><![CDATA[task management]]></category>
		<category domain="tag"><![CDATA[company culture]]></category>
		<category domain="tag" nicename="company-culture"><![CDATA[company culture]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/82688165034</guid>
    <!--<wp:post_id>82688165034</wp:post_id>-->
    <wp:post_date>2014-04-14 7:03:00</wp:post_date>
    <wp:post_date_gmt>2014-04-14 14:03:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>How to Get Stuff Done</title>
    <description></description>
    <content:encoded><![CDATA[#####4/15/2014— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

As a company with six people and a lot of work to do, it’s a challenge to keep track of tasks and priorities. Six people is just big enough that you might not know what everyone is doing, and small enough that there are always more immediately important tasks to do than people to do them.

We’ve tried a few different ways to make sure things get done efficiently, and usually end up using some combination of all of these:

###Post-it graphs
Post-its are visual and moveable. If you put them on a nearby wall, you’ll notice them. They’re some of our best productivity tools.

Jon came up with a really good graph:

![](https://31.media.tumblr.com/3393e43c5ffabd8ba15d4d9807668f79/tumblr_inline_n3h8nuxJkP1s75tgz.png)

Every yellow post-it represents a task to be done before we ship. The X-axis goes from low to high priority, and the Y-axis is completeness. A fully complete task can be moved to the top. The pink marks on some tasks are ripped pink Post-it denoting that the task is blocked until another task is completed.

This is much better than a binary list, because there are a number of almost-but-not-quite finished tasks, and so it more accurately represents the state of the project, and we move our tasks up the wall at the end of the day. Additionally, since they’re ordered by priority, it’s really easy to look at the wall and figure out what you should be working on. Ideally, your graph is y=x at any given time as you try to push up the lower right quadrant.

The blue and purple post-its are larger-scale categories of tasks, also ordered by priority.

We also tried post-its for public shaming:

![](https://31.media.tumblr.com/2ae2f5b4d9d5d95ae9a315854f3fb8ef/tumblr_inline_n3h8ohwy2O1s75tgz.png)

The blog is important for [all manner of reasons](http://blog.technical.io/post/73415641960/meta-post-the-blog), but we still regularly neglect to write. We’ve tried various tricks (setting exact due dates, me personally reminding each person, etc.). This one is simple: everyone’s name is on a Post-it. The masking tape divides people who owe a blog post from people who have written recently. The objective is to get across to the safe side of the line.

We took this one down for fear of the tape bonding to the wall paint, but it’s intact in principle.

###Meetings
Bread o’clock is around 4pm, when we’re all kind of hungry. We stand up, look at and adjust the post-it wall, and informally discuss what we’re working on. This facilitates a “let me help you with your problem” exchange between team members so tasks get accomplished with a minimum of frustration.

Wednesday is “food day”: the company buys lunch and we talk about the bigger picture (where the company is going) and things that just take a while to talk about. This makes sure we continue to think about where we’re going as a company, and not just the day-to-day.

We eat lunch together anyway, but on Wednesdays we intentionally talk about work.

###Idonethis/Igonnadothis
At the beginning of each day, in our company chat (Zulip), we each write what we’re planning to work on. At the end, we write what we’ve accomplished. This way we know what everyone is working on, and have a record of our own progress.

###Asana
For the zillions of little tasks we need to complete, we use [Asana](http://asana.com/). It lets you organize things into projects as a team, assign tasks to team members, and give due dates. Handy features include recurring tasks (I have one that reminds me to do accounting once a month) and emails/push notifications reminding you that your tasks are overdue.

The difficulty is, it’s a task in itself to keep Asana tasks up to date, and if you forget to check Asana or filter out the emails, it quickly piles up into a mess of outdated assignments.

We use Asana on-again, off-again. Mostly, I use it as my personal to-do list for company tasks.

###Calendars
It helps to have a deadline for any given task, and calendars are great visual tools to remind yourself exactly how long you have left.

We’ve found a giant calendar to be very helpful with long-term team milestones. Particularly last summer, when the founding team was still deciding whether they would continue when fall semester started back up, there were exact dates we needed to hit corresponding to board revisions– and if we didn’t hit them, the product wouldn’t launch.

This motivated us into more than a couple of all-nighters, because you can’t argue with a calendar.


All right, time to check the wall and see what’s next.

Kelsey<br/>
[@selkeymoonbeam](https://twitter.com/selkeymoonbeam)]]></content:encoded>
    <wp:post_name>82688165034</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/82193726811</link>
    <pubDate>Wed, 09 Apr 2014 10:18:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[jia huang]]></category>
		<category domain="tag" nicename="jia-huang"><![CDATA[jia huang]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[revisions]]></category>
		<category domain="tag" nicename="revisions"><![CDATA[revisions]]></category>
		<category domain="tag"><![CDATA[iterative design]]></category>
		<category domain="tag" nicename="iterative-design"><![CDATA[iterative design]]></category>
		<category domain="tag"><![CDATA[electrical engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[electrical engineering]]></category>
		<category domain="tag"><![CDATA[technology]]></category>
		<category domain="tag" nicename="technology"><![CDATA[technology]]></category>
		<category domain="tag"><![CDATA[pcb]]></category>
		<category domain="tag" nicename="pcb"><![CDATA[pcb]]></category>
		<category domain="tag"><![CDATA[pcbs]]></category>
		<category domain="tag" nicename="pcbs"><![CDATA[pcbs]]></category>
		<category domain="tag"><![CDATA[history]]></category>
		<category domain="tag" nicename="history"><![CDATA[history]]></category>
		<category domain="tag"><![CDATA[company culture]]></category>
		<category domain="tag" nicename="company-culture"><![CDATA[company culture]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/82193726811</guid>
    <!--<wp:post_id>82193726811</wp:post_id>-->
    <wp:post_date>2014-04-09 7:18:00</wp:post_date>
    <wp:post_date_gmt>2014-04-09 14:18:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessel Progression</title>
    <description></description>
    <content:encoded><![CDATA[#####4/9/2014— [Jia Huang](http://blog.technical.io/search/jia+huang)

About 2 days ago we put Tessel in production. We just got back the time estimates from our manufacturer– it’ll take about 1.5 months for production to finish, and if we’re lucky, 2 months till ship.

One year ago Jon, Tim, and I set out to build what would become Tessel. Now that we’ve put Tessel in production (for real this time), I think it’s a good time to go through all the different revisions we made along the way.

###Version 1, April 2013

![](https://31.media.tumblr.com/2781c0124a1692df55857496769062ae/tumblr_inline_n3qdow0SLG1s75tgz.png)

Jon mainly designed this board for a class on electronics prototyping. I believe it was supposed to stream music. The main MCU was a Freescale chip and there’s a breakout for Arduino shields. There’s a population option for a second chip (probably as a programmer of some sort). The Wifi chip is already present.

Jon pretended that the LEDs could blink.

###Version 2, May 2013

![](https://31.media.tumblr.com/b44508a8b1aeb838922a9f9bd5e446af/tumblr_inline_n3qdq2VnfB1s75tgz.png)

I started working on the PCB and electrical design at this point. The board is completely redesigned with the chips we are still using (although in different footprints). For this revision we were just trying to get the main LPC chip working on our own PCB. I messed up on the JTAG breakout that’s used for programming though, so I ended up having to splice on some wires in order to get the right pin connections.

We got the LEDs actually blinking.

###Version 3, June 2013

![](https://31.media.tumblr.com/b9a939567b318684290dadef454b7b6a/tumblr_inline_n3qdrnh0kt1s75tgz.png)

This is basically the same as the previous version except we fixed all the previous mistakes. All the main components are populated at this point though I think we still had some problems with WiFi.

It was taking me about a day to assemble one of these things even with a stencil. Jon and I would sit side by side and make two of them, of which one would actually work. I think we only ever had two or three of these things working.

We were able to run “javascript” on this… to blink some lights.

Around this time I started getting really scared that WiFi would never work so I made all these WiFi breakouts. They look pretty similar but I was playing around with trace spacing and top and bottom copper.

![](https://31.media.tumblr.com/7942b3e6dd231e50ae9d9e14b8a13297/tumblr_inline_n3qdss5o7i1s75tgz.png) ![](https://31.media.tumblr.com/c56758b38f6a527ad7c224c46063ad2e/tumblr_inline_n3qdtkiGLY1s75tgz.png) ![](https://31.media.tumblr.com/d01539965f43f8be83f902ea91b0fe14/tumblr_inline_n3qdv1nCos1s75tgz.png)

###Version 4, July 2013

![](https://31.media.tumblr.com/df032ffb163392759f1ceb7468109d5c/tumblr_inline_n3qdvwpdAC1s75tgz.png)

We had Eric contracting for us at this point so I got lucky and didn’t have to lay out PCBs anymore. Obviously Eric is way better at it than me because this revision had us going from chips with visible pins (and solderable by hand) to Ball Grid Arrays. Worthington Assembly helped us make this batch.

You can see the beginnings of our 10-pin header modules start to form along with the final formfactor.

Wifi actually worked at this point. We could probably run the current Tessel firmware on these boards if we really wanted to.

###Version 5, August 2013

![](https://31.media.tumblr.com/806c0b49b30780c1fb5aef4bc479faa4/tumblr_inline_n3qdx1tFMQ1s75tgz.png)

Eric got fancy and rotated the chip which gave us room to add the GPIO bank at the back. We lost some room for the mounting holes though and ended up only having 2 in the middle. There’s also a WiFi debug port so we could debug that easier.

We had some USB issues with this revision, but were able to run it fully. This is the model shown in our crowdfunding videos.

###Version 6, October 2013

![](https://31.media.tumblr.com/4caa88f303bb27984720411973769da3/tumblr_inline_n3qdy78dmn1s75tgz.png)

We added some additional power regulation features on this board so that it could be powered externally. There’s also a breakout for the WiFi antenna so that a bigger external antenna can be attached if the chip antenna does not provide a good signal.

The boot selector pins (pins that determine if Tessel boots from USB or from internal Flash) are exposed so that we could revert bad firmware versions easily.

We still ran into USB issues with this version though, so we had to do another prototyping round.

###Version 7, November 2013

![](https://31.media.tumblr.com/459763ab3dd4d0dfcb801c3f8aae1af8/tumblr_inline_n3qdyzzP5i1s75tgz.png)

We finally fixed the USB issue with this revision. We thought this was the version we were going to use for production, until we hit that [reset issue](http://blog.technical.io/post/76228806867/potential-hardware-delay-software-making-progress). 

We ended up ordering a bunch of PCBs for this revision and then scrapping them when we decided to push back production.

###Version 8, March 2014

![](https://31.media.tumblr.com/2c1d5e1a8f889f77f188e136703b8d78/tumblr_inline_n3qdzrpmjV1s75tgz.png)

In order to fix the reset issue we added a chip that holds our MCU in reset until after our external Flash boots up. Since we had to do this revision anyway, we thought that we might as well add on another feature (bad idea). The extra feature involved changing around the power circuitry (all the chips on the bottom left) so that Tessel can be powered off of more than 5.5V externally.

We also removed the external boot selection pins because they were on our high speed RAM lines and messing with them would sometimes crash Tessel or prevent it from booting correctly. In its place we wrote a custom bootloader to recover from bad firmware.

We ended up having problems with the power chip though, so we did another revision to fix it...

###Version 9, April 2014

![](https://31.media.tumblr.com/d66c76f55719d89792818275b8148b41/tumblr_inline_n3qe0rr4Wa1s75tgz.png)

Here we’re approaching maximum utilization of all available space. The power circuitry (bottom left) gets even more crowded.

This is the version we actually put into production about 2 days ago. 

Originally Tim, Jon, and I thought that we would have this thing completed in 3 months over the summer, so we tripled the time (like everyone said we should) and gave ourselves an additional 6 months for the crowdfunding campaign to ship. 

Well, it turns out it was harder than we thought, so now 3 months after that deadline we’re *almost* there. We’re still patching up our firmware and related tools, along with trying to provide everyone with a superb [first run experience](http://blog.technical.io/post/82008011204/tessels-first-run).

[Jia](http://twitter.com/jia)]]></content:encoded>
    <wp:post_name>82193726811</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/82008011204</link>
    <pubDate>Mon, 07 Apr 2014 14:04:17 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[first run]]></category>
		<category domain="tag" nicename="first-run"><![CDATA[first run]]></category>
		<category domain="tag"><![CDATA[first run experience]]></category>
		<category domain="tag" nicename="first-run-experience"><![CDATA[first run experience]]></category>
		<category domain="tag"><![CDATA[installation]]></category>
		<category domain="tag" nicename="installation"><![CDATA[installation]]></category>
		<category domain="tag"><![CDATA[fre]]></category>
		<category domain="tag" nicename="fre"><![CDATA[fre]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[frontend]]></category>
		<category domain="tag" nicename="frontend"><![CDATA[frontend]]></category>
		<category domain="tag"><![CDATA[design]]></category>
		<category domain="tag" nicename="design"><![CDATA[design]]></category>
		<category domain="tag"><![CDATA[user testing]]></category>
		<category domain="tag" nicename="user-testing"><![CDATA[user testing]]></category>
		<category domain="tag"><![CDATA[user oriented collaborative design]]></category>
		<category domain="tag" nicename="user-oriented-collaborative-design"><![CDATA[user oriented collaborative design]]></category>
		<category domain="tag"><![CDATA[design reviews]]></category>
		<category domain="tag" nicename="design-reviews"><![CDATA[design reviews]]></category>
		<category domain="tag"><![CDATA[design review]]></category>
		<category domain="tag" nicename="design-review"><![CDATA[design review]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/82008011204</guid>
    <!--<wp:post_id>82008011204</wp:post_id>-->
    <wp:post_date>2014-04-07 11:04:17</wp:post_date>
    <wp:post_date_gmt>2014-04-07 18:04:17</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Tessel's First Run</title>
    <description></description>
    <content:encoded><![CDATA[#####4/7/2014— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

I’ve been on-and-off designing the first run experience for Tessel since January, and wanted to share a bit of the process and thinking behind our first run/installation sequence.

One of the major selling points of Tessel is its ease of use: the code should be intuitive to a web developer. Adding physical modules should be just like adding code modules. You should be able to get from idea to simple prototype very quickly, and without any frustration related to using our tools.

Therefore, in making the first run experience for Tessel, I want to show you how quickly you can make your code interact with physical hardware. I set a goal of two minutes maximum from unboxing to working code.

I started [here](http://blog.technical.io/post/72100061554/designing-the-first-run-experience), thinking about all of the different backgrounds of our users and how we might serve each individually. There were two main components of this:

1. Different modules for different people: everybody gets a different set of modules. I didn’t want to waste people’s time with modules they didn’t have, but wanted to make sure everyone got the instructions they needed.
1. Different skill levels: most of our users are experienced web programmers. However, we do have a few who have never used the command line or even written a line of code. I wanted to make sure that our first run didn’t alienate anyone, even absolute beginners (this is something I’m still trying to resolve– suggestions welcome).

This led me to make a first page with a lot of options:

![](https://31.media.tumblr.com/8d1de7b37318cd66f87c9ede2dbfd163/tumblr_inline_n3h7r7gBa31s75tgz.png)

<b>Original Page 1</b>

You could select any grouping of modules, and then click on one of the two big buttons. The “I’ve never programmed” option took you through a command line tutorial before proceeding on the main path of installation > tutorials > projects (filtered to show only projects involving your modules).

On the page teaching use of each module, I only showed the modules the user had selected. You could switch between relevant tutorials by clicking on the icons shown at the top:

![](https://31.media.tumblr.com/bac2639628f1b9e5e66bdb05b8805b60/tumblr_inline_n3h7rzhFXq1s75tgz.png)

<b>Original modules tutorial page</b>

On the face of it, this was a nice “choose your own adventure” tutorial: you get just the information relevant to you by telling the tutorial your unique situation. But when I showed it to users (one advantage of a coworking space is how often people who have no idea what you’re working on wander by), they were paralyzed by choice.

As I now recall, I hated “Choose Your Own Adventure” books as a kid. I always wanted to know what would happen if I made a different choice, and there were just too many choices to follow every forking plot line. Simultaneously, I felt boxed in by the choices I was allowed to make: I didn’t want to select from the multiple choice menu, I wanted to make my own creative decisions.

Something similar was happening here: people had to make choices right away, with no information.  Not only was module selection unclear, but they worried that if they skipped the beginner button, they’d be in over their heads and might not be able to turn back.

So my next design made the choice a bit easier. The module icons were made more obvious with an increase in size, and I shrunk the text on the beginner button, adding explanatory text below on mouseover:

![](https://31.media.tumblr.com/6830923813ccf1390b3bd2e08ca56892/tumblr_inline_n3h7sw9m1B1s75tgz.png)

<b>Clip from Rev. 2 of the first page</b>

I implemented similar slight design changes throughout the first run experience in response to user feedback– and these changes did improve successive users’ flow through the process. However, there’s only so far you can go with a basically flawed design, and I realized that I’d become stuck in my original design paradigm. So I asked the team for a design review with a focus on improving the overall flow– somewhat inspired by [this blog post](http://blog.42floors.com/thirty-percent-feedback/).

Design reviews are great. I highly recommend going back and forth between talking to users and getting feedback from your team, because they provide different kinds of feedback. Users can show you that they have a specific problem or reaction. Teammates in a design review are more likely to assess your bigger picture design.

My team had some really good feedback as a group, and by the end of twenty minutes, I had some solid design paradigms and ideas for implementation, which have driven my next round of edits.

Here’s the current flow (still in development, so anything could change):

![](https://31.media.tumblr.com/5f59aa20fd23075619a87316a959f7d3/tumblr_inline_n3h7v7k5nt1s75tgz.png)

<b>First page: install. <i>(No, you can’t install tessel from npm yet. Soon.)</i></b>

![](https://31.media.tumblr.com/d60c5166d7384a2c1013c722bf6e1154/tumblr_inline_n32fk22Ij61s75tgz.png)

<b>First code: blink some lights.</b>


![](https://31.media.tumblr.com/af61555b690abce695a1451027317a3b/tumblr_inline_n32fkr55NR1s75tgz.png)

<b>Modules page: an expandable list of each module, also navigable by the sidebar menu, which expands on this page to show each module.</b>


![](https://31.media.tumblr.com/97204748d5a2463e334b9a4210cfc28d/tumblr_inline_n32fl0EhHg1s75tgz.png)

<b>Modules page with the accelerometer tutorial expanded</b>

...and more to follow! I’m still messing with the tweet-from-a-Tessel tutorial and the page of projects at the end.

###Suggestions welcome!
Is there anything you’d particularly like to see? Any particularly good first run experiences I should use as examples? Let me know.

Kelsey Breseman<br/>
[kelsey@technical.io](mailto:kelsey@technical.io)]]></content:encoded>
    <wp:post_name>82008011204</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/81681294634</link>
    <pubDate>Fri, 04 Apr 2014 10:43:32 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[eric kolker]]></category>
		<category domain="tag" nicename="eric-kolker"><![CDATA[eric kolker]]></category>
		<category domain="tag"><![CDATA[stress]]></category>
		<category domain="tag" nicename="stress"><![CDATA[stress]]></category>
		<category domain="tag"><![CDATA[testing]]></category>
		<category domain="tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="tag"><![CDATA[stress testing]]></category>
		<category domain="tag" nicename="stress-testing"><![CDATA[stress testing]]></category>
		<category domain="tag"><![CDATA[power]]></category>
		<category domain="tag" nicename="power"><![CDATA[power]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[tessel 4]]></category>
		<category domain="tag" nicename="tessel-4"><![CDATA[tessel 4]]></category>
		<category domain="tag"><![CDATA[test]]></category>
		<category domain="tag" nicename="test"><![CDATA[test]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/81681294634</guid>
    <!--<wp:post_id>81681294634</wp:post_id>-->
    <wp:post_date>2014-04-04 7:43:32</wp:post_date>
    <wp:post_date_gmt>2014-04-04 14:43:32</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Stress Testing 04</title>
    <description></description>
    <content:encoded><![CDATA[#####4/4/2014— [Eric Kolker](http://blog.technical.io/search/eric+kolker)

Hey Tessellators, Eric here.

The pressure to ship is enormous. Every day that we take to verify or double check something related to the hardware means another day that you have to wait for your Tessels.

![](https://31.media.tumblr.com/1dc5326391f29132a1974c3e4725d736/tumblr_inline_n3h381cqzS1s75tgz.png)

On the last version, the power plant wasn’t perfect.

#### Bye, bye black boxes

In my [post last month](http://blog.technical.io/post/78863227277/the-first-day-with-tm-00-03), version three introduced a new voltage regulator and related support circuitry, including a new power multiplexer IC. When we fired up the boards, it became clear very quickly that the specific power mux part was, quite literally, throwing an error and shutting down during certain normal-operation conditions.

At the time of my last post, we knew of another part in the same family that would theoretically allow us to sidestep the issue. Mr. Murphy and his law had other plans, however, so we did what we always do: overnighted parts for a new design, stripped down the latest board, and patched in the new design. Here’s what the patched-in version looks like (disconnected from the Tessel):

![](https://31.media.tumblr.com/22d6f5ef13a01a561ab6c81508c6a5b7/tumblr_inline_n3h39e7tZZ1s75tgz.png)

The new design is as simple as possible and to eliminates the more specialized [ICs](http://en.wikipedia.org/wiki/Integrated_circuit) I had been using before. I wanted to know exactly what was inside of the chips I was using, not rely on someone else’s fancy (and unpredictable) design. The result has a larger solution size (EE jargon for “it takes up more space on the board”), but is much more transparent. Fortunately, it also works like a charm. Our power input stage now looks like this:

![](https://31.media.tumblr.com/300c04cc44d1b6aa09f25d2797232c99/tumblr_inline_n3h3aankmq1s75tgz.png)

#### Stress tests

Just as software must pass its unit tests, hardware has its own suite of tests that need to be run to make sure it’s ready for prime time. These include a traditional [burn-in](http://en.wikipedia.org/wiki/Burn-in), as well as lots of different scenarios related to how the device is powered.

Part of the initial power plant redesign gave Tessel the ability to run off of more than just USB power, giving you the freedom to use virtually any battery under the sun to power your Tessellations. However, [with great power comes great responsibility](http://en.wikipedia.org/wiki/Uncle_Ben), so I knew I had to be sure that, no matter what you do to Tessel, it won’t give up on you. This means that I spent all of Thursday abusing the input power path. It’s been terrifying but, honestly, a lot of fun. Here’s where we are right now:

*  Tessel can be powered off up to 15 V on the VIN pins by the USB port (~3.4 V is probably the lowest you’d want to go)
*  It can also withstand power being applied backwards to the same VIN pins and live to ```tessel push myCode.js``` another day
*  Tessel switches automatically between USB and external power (depending on what’s available and with a preference for USB) without rebooting or halting code in any way.
*  The voltage in to the DCDC converter tracks the input voltage beautifully (read: within ~0.3 V and better with for higher input voltages). This voltage is broken out at the GPIO bank, but should not be used as a source of significant current.
*  If you accidentally short the pins which provide power to the DCDC converter (the voltage regulator that takes in up to 15 V and gives us 3.3 V out), Tessel does not care, and will turn on again once the short is removed.

As an aside, even though that’s a pretty good list, I’m going to ask that you please read the docs if you plan to power Tessel through the VIN pins, never power Tessel through the GPIO bank, and try to avoid shorting anything. At the end of the day, I can do my best to protect the Tessel from abuse, but there are a lot more of you than there are of us.

#### Running the tests

Testing hardware is, frankly, a lot more exciting than testing software. With software, the worst that’s likely to happen is a BSOD or a string of error messages, after which you track down bugs and try again as quickly as a minute later. With hardware, there’s a very real chance that something burns, melts, catches fire, or generally releases its [magic smoke](http://en.wikipedia.org/wiki/Magic_smoke).

Sometimes, the testing is deliberately destructive. This poor -03 was my guinea pig for many of the power plant hacks. 

![](https://31.media.tumblr.com/b1ddc589fa8b8851e1c05e5af09a3e79/tumblr_inline_n3h3bazXxb1s75tgz.png)

Other times, the goal is to test things over and over again, like the self-input-switching Tessel [Jon rigged up](http://blog.technical.io/post/81609160856/final-hardware-testing). Sometimes, though, repetition and boundary-pushing are combined, like in [this video](http://blog.technical.io/post/81681035313/4-4-2014-eric-kolker-stress-testing-the), where I repeatedly short out Tessel’s input power and the board keeps chugging along.

#### What this means for you, patient reader

Pending any fires at TMHQ (Greentown Labs), Jia is in the process of talking to our manufacturers about making 2500 of these boards (pre-sales are a little below 1500 right now, but we wouldn’t want to run out a month or two after launching, would we?). [As we said in a recent post](http://blog.technical.io/post/80703444683/update-shipping-schedule) and backer email, we’d have about a month between signing off on the run and the first batch of boards hitting our desks.

![](https://31.media.tumblr.com/c15688b3d765de63ba2b290fccb7580a/tumblr_inline_n3h3cjLmva1s75tgz.png)

At this point, we’re ready if you are.

~e<br/>
[e@technical.io](mailto:e@technical.io)]]></content:encoded>
    <wp:post_name>81681294634</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/81681035313</link>
    <pubDate>Fri, 04 Apr 2014 10:39:24 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[video]]></category>
		<category domain="category" nicename="video"><![CDATA[video]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[eric kolker]]></category>
		<category domain="tag" nicename="eric-kolker"><![CDATA[eric kolker]]></category>
		<category domain="tag"><![CDATA[testing]]></category>
		<category domain="tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="tag"><![CDATA[voltage]]></category>
		<category domain="tag" nicename="voltage"><![CDATA[voltage]]></category>
		<category domain="tag"><![CDATA[power]]></category>
		<category domain="tag" nicename="power"><![CDATA[power]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[electrical engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[electrical engineering]]></category>
		<category domain="tag"><![CDATA[test]]></category>
		<category domain="tag" nicename="test"><![CDATA[test]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/81681035313</guid>
    <!--<wp:post_id>81681035313</wp:post_id>-->
    <wp:post_date>2014-04-04 7:39:24</wp:post_date>
    <wp:post_date_gmt>2014-04-04 14:39:24</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>#####4/4/2014— [Eric Kolker](http://blog.technical.io/search/eric+kolker)</title>
    <description></description>
    <content:encoded><![CDATA[
              
<video  id='embed-5770f81dc89c5913365355' class='crt-video crt-skin-default' width='400' height='225' poster='http://media.tumblr.com/tumblr_n3h2mhX92l1sf07vg_frame1.jpg' preload='none' data-crt-video data-crt-options='{"autoheight":null,"duration":47,"hdUrl":false,"filmstrip":{"url":"http:\/\/25.media.tumblr.com\/previews\/tumblr_n3h2mhX92l1sf07vg_filmstrip.jpg","width":"200","height":"112"}}' >
    <source src="http://tesselproject.tumblr.com/video_file/81681035313/tumblr_n3h2mhX92l1sf07vg" type="video/mp4">
</video>
              
Stress testing the TM-00-04 hardware by shorting the input power to ground...repeatedly.

Notice how the bootup light show happens each time the short is removed and how Tessel runs blinky from flash at the end of the clip. Also note that the fuse cuts current draw within a second to < 200 mA.

The tools, left to right:

*  The power supply, which is set to 15 V and/or a maximum of ~3 A. When the Tessel is not being shorted, it draws about 70 mA, but during the beginning of a short condition this number spikes very high before the fuse kicks in.
*  An oscilloscope, which lets us see what the electronics are up to. The red line is the input voltage (5 V/div resolution) and the yellow line the 3.3 V rail (1 V/div). The timescale is 50 us/div.
*  My [multimeter](http://blog.technical.io/post/67667723038/inside-erics-toolbox-an-electrical-engineering-kit), which I used to measure the resistance of the fuse post-short.      ]]></content:encoded>
    <wp:post_name>81681035313</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/81609160856</link>
    <pubDate>Thu, 03 Apr 2014 15:52:48 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Update]]></category>
		<category domain="tag" nicename="update"><![CDATA[Update]]></category>
		<category domain="tag"><![CDATA[Jon McKay]]></category>
		<category domain="tag" nicename="jon-mckay"><![CDATA[Jon McKay]]></category>
		<category domain="tag"><![CDATA[Electrical Engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[Electrical Engineering]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[Technical Machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[Technical Machine]]></category>
		<category domain="tag"><![CDATA[Revision]]></category>
		<category domain="tag" nicename="revision"><![CDATA[Revision]]></category>
		<category domain="tag"><![CDATA[Hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[Hardware]]></category>
		<category domain="tag"><![CDATA[Testing]]></category>
		<category domain="tag" nicename="testing"><![CDATA[Testing]]></category>
		<category domain="tag"><![CDATA[Test]]></category>
		<category domain="tag" nicename="test"><![CDATA[Test]]></category>
		<category domain="tag"><![CDATA[Power]]></category>
		<category domain="tag" nicename="power"><![CDATA[Power]]></category>
		<category domain="tag"><![CDATA[USB]]></category>
		<category domain="tag" nicename="usb"><![CDATA[USB]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/81609160856</guid>
    <!--<wp:post_id>81609160856</wp:post_id>-->
    <wp:post_date>2014-04-03 12:52:48</wp:post_date>
    <wp:post_date_gmt>2014-04-03 19:52:48</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Final Hardware Testing</title>
    <description></description>
    <content:encoded><![CDATA[#####4/3/2014— [Jon McKay](http://blog.technical.io/search/jon+mckay)

Tessel version nine arrived at our office yesterday. It came in yesterday straight out of Worthington Assembly’s ovens.

Each new hardware revision means a whole slew of tests to make sure we fixed any known problems and haven’t created any new ones.

![](https://31.media.tumblr.com/93ace1d1f7aab426196639b6f673a969/tumblr_inline_n3h0dkzI4d1s75tgz.jpg)

Eric is testing out how robust the board is after merciless shortings on both USB input and external power lines. He had designed new power circuitry to try and prevent the board from being fried in the event of a short and preliminary results are looking promising.

I have a test rig to put our power switching circuitry through the hoops. Tessel can be powered off of USB or external power (up to 15V). We want users to be able to program Tessel over USB, then detatch out the USB cable and have their program continue running off of external power (if it’s connected) without a hiccup. 

![](https://31.media.tumblr.com/684146039a358e14bfeef18ab6d6f98f/tumblr_inline_n3h0f4Tqxl1s75tgz.jpg)

_Yes, the header on the old relay modules were assembled backwards and yes we are embarrassed. This relay module is plugged in upside down, and if you do that with the production models they won’t work._

My test rig (above) has both USB and an external LiPo battery connected to Tessel at the same time. The USB power is intercepted by a debugging circuit board (below) that allows us to splice off USB power into a relay connected to Tessel.

![](https://31.media.tumblr.com/6ea0e98c629bb282bb6bb6ff74bc500e/tumblr_inline_n3h0fdQ3Dz1s75tgz.jpg)

That allows Tessel to tell the relay to either connect the USB circuit or disconnect it. That is, Tessel is testing its own power regulation circuitry by switching its input power between USB and the LiPo. If the switch fails, Tessel will stop blinking lights because the program is stored in RAM and will be erased on power failure. Tessel testing itself is a beautiful thing.

It both terrifies me and excites me that this revision of the board seems to be working to spec (knock on wood). If all goes well, we can be set to start up production early next week.

–[Jon McKay](https://twitter.com/jonmckay)]]></content:encoded>
    <wp:post_name>81609160856</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/80703444683</link>
    <pubDate>Tue, 25 Mar 2014 16:14:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[manufacturing]]></category>
		<category domain="tag" nicename="manufacturing"><![CDATA[manufacturing]]></category>
		<category domain="tag"><![CDATA[electrical engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[electrical engineering]]></category>
		<category domain="tag"><![CDATA[reset]]></category>
		<category domain="tag" nicename="reset"><![CDATA[reset]]></category>
		<category domain="tag"><![CDATA[power]]></category>
		<category domain="tag" nicename="power"><![CDATA[power]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/80703444683</guid>
    <!--<wp:post_id>80703444683</wp:post_id>-->
    <wp:post_date>2014-03-25 13:14:00</wp:post_date>
    <wp:post_date_gmt>2014-03-25 20:14:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Update: Shipping Schedule</title>
    <description></description>
    <content:encoded><![CDATA[#####3/25/2014— [Updates](http://blog.technical.io/search/update)

###Where we’re at on the reset issue:

We got the pre-production boards back and have confirmed that the reset issue is fixed. But one of the parts used in the updated power plant did not perform to spec when placed on the Tessel (off-board tests worked fine, even when wired directly into the Tessel). The issue is only apparent when Tessel is powered over external power (not USB), but we don’t feel comfortable shipping something that is not working perfectly.

We did another redesign of the power plant to fix the issue, and have sent out Tessel to the manufacturers for another test batch.

###What this means for scheduling:

* <b>Test batch:</b> We’ve pushed out a new design to fix the power plant. We expect to get it back in about <b>1 to 1.5 weeks</b>.
* <b>Manufacturing:</b> Once we’ve determined that the new design works, we tell our manufacturers to go ahead. They start making them and then send us the batch in about <b>a month</b>.
* <b>Fulfillment:</b> We send everything over to our [fulfillment house](http://blog.technical.io/post/70520262063/how-to-ship-product), and they start packing up and sending off orders <b>right away</b>.
* <b>Shipping:</b> Our fulfillment house will send you tracking numbers when they put your package in the mail. After that, domestic orders (USA) should receive Tessels in <b>2-7 business days</b>; international orders should arrive within <b>2-3 weeks</b>.

Then you’ll have your Tessel!

We’re working on making an excellent installation/first run experience, and we are currently setting up a forum, in addition to improving and finalizing firmware.

###Other news:
We’ve added a link to the top of the [status page](https://tessel.io/status) that will take you to the latest updates-related post on our blog, so you can check there to make sure your information is current.

Back to work!<br/>
Kelsey, Jia, Jon, Eric, Kevin, and Tim

![](https://31.media.tumblr.com/fee8a2a0f2d8986ccfb8680414341307/tumblr_inline_n30dvjW6wG1s75tgz.png)]]></content:encoded>
    <wp:post_name>80703444683</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/80694491677</link>
    <pubDate>Tue, 25 Mar 2014 14:28:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[photo]]></category>
		<category domain="category" nicename="photo"><![CDATA[photo]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[jia huang]]></category>
		<category domain="tag" nicename="jia-huang"><![CDATA[jia huang]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[manufacturing]]></category>
		<category domain="tag" nicename="manufacturing"><![CDATA[manufacturing]]></category>
		<category domain="tag"><![CDATA[presentation]]></category>
		<category domain="tag" nicename="presentation"><![CDATA[presentation]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/80694491677</guid>
    <!--<wp:post_id>80694491677</wp:post_id>-->
    <wp:post_date>2014-03-25 11:28:00</wp:post_date>
    <wp:post_date_gmt>2014-03-25 18:28:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title></title>
    <description></description>
    <content:encoded><![CDATA[<div class="figure"><figure>
  <img src="http://65.media.tumblr.com/6984015c2d8b44ce2757cdce9fff1af7/tumblr_n308nizz2V1sf07vgo1_1280.png" alt="">
</figure></div>

    **Technical Machine's Hardware Playbook**: Technical Machine's approach to manufacturing<br/>
Jia's presentation at [Hardwired NYC](http://hardwirednyc.com/)

Slides: [http://www.slideshare.net/TechnicalMachine/hardware-playbook](http://www.slideshare.net/TechnicalMachine/hardware-playbook)<br/>
Presentation video: [https://www.youtube.com/watch?v=0ZArxLefleg](https://www.youtube.com/watch?v=0ZArxLefleg)]]></content:encoded>
    <wp:post_name>80694491677</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/79903139501</link>
    <pubDate>Mon, 17 Mar 2014 17:29:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[photo]]></category>
		<category domain="category" nicename="photo"><![CDATA[photo]]></category>
		<category domain="tag"><![CDATA[fluentconf]]></category>
		<category domain="tag" nicename="fluentconf"><![CDATA[fluentconf]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[embedded devices]]></category>
		<category domain="tag" nicename="embedded-devices"><![CDATA[embedded devices]]></category>
		<category domain="tag"><![CDATA[tim ryan]]></category>
		<category domain="tag" nicename="tim-ryan"><![CDATA[tim ryan]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[presentation]]></category>
		<category domain="tag" nicename="presentation"><![CDATA[presentation]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/79903139501</guid>
    <!--<wp:post_id>79903139501</wp:post_id>-->
    <wp:post_date>2014-03-17 14:29:00</wp:post_date>
    <wp:post_date_gmt>2014-03-17 21:29:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title></title>
    <description></description>
    <content:encoded><![CDATA[<div class="figure"><figure>
  <img src="http://67.media.tumblr.com/65e870e18006e7d677a589bb4fb23728/tumblr_n2lnpdvuE31sf07vgo1_1280.jpg" alt="">
</figure></div>

    Embedded JavaScript: the skills you have in 2014 will be all you need to make physical devices.

Tim's talk from FluentConf.

Slides at [http://www.slideshare.net/TechnicalMachine/fluent-20-min-32416115](http://www.slideshare.net/TechnicalMachine/fluent-20-min-32416115)]]></content:encoded>
    <wp:post_name>79903139501</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/79168037163</link>
    <pubDate>Mon, 10 Mar 2014 11:19:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[jon mckay]]></category>
		<category domain="tag" nicename="jon-mckay"><![CDATA[jon mckay]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[ble]]></category>
		<category domain="tag" nicename="ble"><![CDATA[ble]]></category>
		<category domain="tag"><![CDATA[bluetooth]]></category>
		<category domain="tag" nicename="bluetooth"><![CDATA[bluetooth]]></category>
		<category domain="tag"><![CDATA[bluegiga]]></category>
		<category domain="tag" nicename="bluegiga"><![CDATA[bluegiga]]></category>
		<category domain="tag"><![CDATA[ble113]]></category>
		<category domain="tag" nicename="ble113"><![CDATA[ble113]]></category>
		<category domain="tag"><![CDATA[uart]]></category>
		<category domain="tag" nicename="uart"><![CDATA[uart]]></category>
		<category domain="tag"><![CDATA[i2c]]></category>
		<category domain="tag" nicename="i2c"><![CDATA[i2c]]></category>
		<category domain="tag"><![CDATA[mooshimeter]]></category>
		<category domain="tag" nicename="mooshimeter"><![CDATA[mooshimeter]]></category>
		<category domain="tag"><![CDATA[mooshim engineering]]></category>
		<category domain="tag" nicename="mooshim-engineering"><![CDATA[mooshim engineering]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/79168037163</guid>
    <!--<wp:post_id>79168037163</wp:post_id>-->
    <wp:post_date>2014-03-10 8:19:00</wp:post_date>
    <wp:post_date_gmt>2014-03-10 15:19:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>BLE Module &amp; Mooshimeter</title>
    <description></description>
    <content:encoded><![CDATA[#####3/10/2014— [Jon McKay](http://blog.technical.io/search/jon+mckay)

For the past few weeks, I’ve been head-down in technical development on our Bluetooth Low Energy module driver. We’re using the BlueGiga BLE113 chip for our bluetooth communication and it receives commands over the UART bus from Tessel.

###The Status of Bluetooth Hardware

Our Bluetooth Module has undergone a several revisions since our first attempt: 

![](https://31.media.tumblr.com/9d1a6ed71236a03ef07c9bc06a6e4988/tumblr_inline_n287i3IKHY1s75tgz.jpg)

You’ll notice that there are several through-holes on the bottom of the final revision.

![](https://31.media.tumblr.com/f3ff49c35da44f360492ba8e0d33502f/tumblr_inline_n28758PCNY1s75tgz.jpg)

As in many of our modules, we wanted to expose some extra functionality for more hardware-savvy users without getting in the way of folks who don’t need it. We’ve exposed an I2C port, two GPIOs, and an ADC on the module itself. The GPIOs are important for making the module use less power (discussed below).

We made a difficult decision regarding the assignment of the third GPIO pin on the module port. We were running into an issue where if the reset button on the Tessel was pressed while the BLE module was plugged in, it would pull the UART transmit line low, causing the BLE113 UART parser to freeze when it parsed what it perceived as an invalid array of zeros.

 It wouldn’t unfreeze until the module was physically reset. After contacting BlueGiga support (who are exceptionally responsive, by the way), we came to the conclusion that the problem wouldn’t be solved until BlueGiga’s software engineer got around to fixing it. 

Making the success of your hardware dependent on the schedule of another company’s engineer is rarely a good idea. We had little choice but to assign the third GPIO pin directly to the BLE113 reset line so that we could automatically reset the module in software between code deployments. The downside is that third GPIO was originally assigned to the wake-pin, which allowed the module to go to sleep and save energy when the Tessel wasn’t communicating with it.

In order to preserve that functionality, we exposed the wake-pin on the bank of extra through holes so that those who need to make BLE as lower power as possible can still access that functionality. 

###Testing with Mooshimeter

Our good friends over at [Mooshim Engineering](http://moosh.im/) were kind enough to lend us an early version of their new Mooshimeter, a bluetooth-enabled multimeter. It was a perfect chance to test out our bluetooth module and its driver. Integrating with the Mooshimeter was incredibly easy. After connecting to the device, I simply had to tell it to turn on its analog-to-digital converter and I could start receiving asynchronous notifications with voltage values. Check out the JavaScript code below to start printing out voltage values in the terminal ([gist](https://gist.github.com/johnnyman727/9466655)):

    var tessel = require('tessel');
    var blePort = tessel.port('a');
    var bleDriver = require('../');

    bluetooth = bleDriver.use(blePort, function(err) {
      if (err) {
        return console.log("Failed to connect");
      }
      else {
        // Connect to moosh
        connectToMoosh(function(moosh) {
          // Tell the meter to start reading, pass back char to read
          setMeterSettings(moosh, function(meterSample) {
            // Start reading that char
            startReadingMeter(meterSample);
          });
        });
      }
    });

    function startReadingMeter(meterSample) {

        meterSample.on('notification', function(value) {
          var voltage = 0;
          for (var i = 0; i < 3; i++) {
            voltage += value[3+i] << (i*8);
          }
          voltage = (0x1000000 - voltage)  * (1.51292917e-04);

          console.log("Voltage", voltage);
        });

        meterSample.startNotifications();
    }

    function setMeterSettings(mooshimeter, callback) {
      if (mooshimeter) {
        // Find the characteristic with meter settings
        mooshimeter.discoverCharacteristics(['ffa2', 'ffa6'], function(err, characteristics) {
          var meterSample = characteristics[0];
          var meterSettings = characteristics[1];
          // Update meter settings struct to start reading...
          meterSettings.write(new Buffer([3, 2, 0, 0, 0, 0, 0, 0, 23]), function(err, valueWritten) {
            callback && callback(meterSample);
          });
        });
      }
    }

    function connectToMoosh(callback) {
      bluetooth.filterDiscover(mooshFilter, function(err, moosh) {
        bluetooth.stopScanning(function(err) {
          moosh.connect(function(err) {
            callback && callback(moosh);
          });
        });
      });

      bluetooth.startScanning();
    }

    function mooshFilter(peripheral, callback) {
      for (var i = 0; i < peripheral.advertisingData.length; i++) {
        var packet = peripheral.advertisingData[i];

        if (packet.type = 'Incomplete List of 16-bit Service Class UUIDs'
            && packet.data[0] == '0xffa0') {
          return callback(true);
        }
      }
      return  callback(false);
    }

Output:
![](https://31.media.tumblr.com/91fd4bd89ec1d4d65bc2bd71b3b0758c/tumblr_inline_n287u1HBXk1s75tgz.png)

See it work on [Vine](https://vine.co/v/Mb6QADFKHXv)!

I’m really excited to build out the Mooshimeter example to be able to read out both channels on the multimeter.

### Almost There

The Bluetooth Driver is about 60% done at this point. I still need to add security functionality (pairing, encryption, etc.), hardware functionality to be able to use the through-holes at the bottom, and the ability to update the firmware of the BlueGiga module itself over UART. Then I’ll be polishing up a comprehensive test suite so that we can continuously integrate any new changes to the driver. It’s a lot of work for one module, but totally worth it.

–Jon
<br/>[jon@technical.io](mailto:jon@technical.io)]]></content:encoded>
    <wp:post_name>79168037163</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/78863227277</link>
    <pubDate>Fri, 07 Mar 2014 13:16:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[tm-00-03]]></category>
		<category domain="tag" nicename="tm-00-03"><![CDATA[tm-00-03]]></category>
		<category domain="tag"><![CDATA[internet of things]]></category>
		<category domain="tag" nicename="internet-of-things"><![CDATA[internet of things]]></category>
		<category domain="tag"><![CDATA[electrical engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[electrical engineering]]></category>
		<category domain="tag"><![CDATA[power]]></category>
		<category domain="tag" nicename="power"><![CDATA[power]]></category>
		<category domain="tag"><![CDATA[eric kolker]]></category>
		<category domain="tag" nicename="eric-kolker"><![CDATA[eric kolker]]></category>
		<category domain="tag"><![CDATA[community]]></category>
		<category domain="tag" nicename="community"><![CDATA[community]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/78863227277</guid>
    <!--<wp:post_id>78863227277</wp:post_id>-->
    <wp:post_date>2014-03-07 10:16:00</wp:post_date>
    <wp:post_date_gmt>2014-03-07 18:16:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>The first day with TM-00-03</title>
    <description></description>
    <content:encoded><![CDATA[#####3/7/2014— [Eric Kolker](http://blog.technical.io/search/eric+kolker)

Hey Tesselators, Eric here.

Every once in a while I just feel like writing. I have the urge to get thoughts out of my head and onto paper, into a keyboard, whatever. When the feeling strikes, I braindump, and right now I’m in one of those moods.

### New boards!

One thing that’s super important to us is openness, as [Kelsey recently discussed at length](http://blog.technical.io/post/76637645290/transparency-keeping-an-open-company), so enough of our feelings and more of our status.

Thursday was a big day because the small batch of Tessels with the updated boot circuitry and power plant arrived from our assembly house. Here’s one in all its glory:

![](https://31.media.tumblr.com/3b83f17e4a45ec710d83d0f1f95b02d2/tumblr_inline_n22vsexiBZ1s75tgz.png)

This isn’t our first time bringing up new boards, and by now we’ve gotten pretty good at it. Kevin and Jia finished adapting the firmware to the new hardware and had it running blinky.js (the “Hello, World!” of hardware) in under an hour. For reference, that’s fast for first contact with a complex digital system.

Meanwhile, I was testing the power plant in situ, and what would bringup be without its share of troubles? (Answer: a lot less exciting)

### VCO = voltage-controlled...Oh, no.

![](https://31.media.tumblr.com/7bf4e0e6b8e78739fff112286c35f816/tumblr_inline_n22vs2jLtQ1s75tgz.png)

![](https://31.media.tumblr.com/ee816de85e254c07c97b722830b2a3f2/tumblr_inline_n22vtiXCg91s75tgz.png)

I completely reimagined the power plant for this version of the board (mockup above, schematic below), and one of the types of chips we’re using (U1 in the schematic, part number [FPF2700](http://www.fairchildsemi.com/ds/FP/FPF2701.pdf)) allows us to select which power source, USB vs. an external supply, powers the board. It can also limit the current we draw from the external supply, in case you accidentally short something. In fact, the specific chip we used even has a feature that shuts off the output by temporarily disconnecting external power if it detects an overcurrent condition (TL;DR, short circuits allow a lot of current to flow, which is usually very bad for whatever said current is flowing through).

Now that everything is together, though, our 3.3 V rail sometimes behaves like a [voltage-controlled oscillator](http://en.wikipedia.org/wiki/Voltage-controlled_oscillator). After an 11-hour day of testing, we’re pretty sure that the chip thinks that it’s in an overcurrent condition for input voltages above about 8 V (note that voltage and current are unrelated quantities and besides, it’s designed to withstand at least 15 V).

Weirder still is that the speed with which the chip makes this decision seems to be proportional to the input voltage (I have my theories here… Read my [post on the GPRS module](http://blog.technical.io/post/74730229332/gprs-2g-module) for a hint). In any case, the faster it all shuts off, the sooner the 3.3 V rail drops down, and the sooner the system reboots and goes through the cycle again, hence the apparent “VCO”.

Once you get over all of that behavior, the notion that such a system would also exhibit [hysteresis](http://en.wikipedia.org/wiki/Hystersis) and wouldn’t break the death spiral until the input voltage drops below about 6 V is trivial to accept. (Note: some sarcasm present in the otherwise objective analysis of above paragraph).

We have good reason to believe that the chip is not, in fact, in an overcurrent condition, or, at the very least, not in the type of overcurrent condition against which the feature is designed to protect. Needless to say, we have our suspicions as to what we can do to fix it, and parts are already in the mail. The easiest fix would be a partswap on the controller chip; there’s one made by the same manufacturer in the same family that relies on internal thermal protection circuitry to safely handle short circuit conditions.

### Lunch

Every Wednesday we go out to lunch, get out of the office, and talk about what we’ve been doing, what we should be doing, future directions, you name it. This week we actually just got take out from a wings place, but whatever, the kernel is the same: kick back a little and talk about the things that get pushed to the back of our minds when our heads are down in technical development.

This week, the conversation spanned hiring, housing, and the state of our blog. The consensus is that we really like the [blog](http://blog.technical.io/post/73415641960/meta-post-the-blog) (and hope you do too) and consider it to be one of our signature features, but that we need to push to keep high-quality and genuine content flowing. We made a point of enacting a policy (to the extent we have such a thing) of consciously writing things down when we’re excited or worked up about something, so here goes.

As a side note, coming attractions include…

- Jon has been grinding away on the BLE module
- Tim is the exterminator to the our runtime’s bugs
- Kelsey has been cranking on the first run experience
- Kevin is knee-deep in rewriting our entire USB stack
- Jia is busy juggling manufacturing
- I’ve been cutting my JS teeth on the GPRS module and redesigning our power input stage.

Expect posts from them soon thanks to Kelsey’s new wall of shame/indebtedness to the blog:

![](https://31.media.tumblr.com/3c2da47aeda5f893b12f5d1807f920e6/tumblr_inline_n22vrjFJCe1s75tgz.png)

#### D’aww

We’re sometimes pulled out of the sea of technical challenges by you, our...well, what do I call you? “Adoring fans” is patronizing, “customers” is far too impersonal. “Community” and “friends” is where we hope we’re headed. If you hadn’t noticed, I tend to sidestep the issue and use the highly technical, specific, endearing, and official term “Tesselators.”

But I digress. One of the things I was trying to say is that sometimes someone reaches out and we all stop what we’re doing and read their email. The commentary runs the gamut; sometimes someone tells us that they’re disappointed with the Beta program, sometimes it’s a feature request or compatability question, and other times, like yesterday, we get subject lines like “What I like about your team”. I cannot begin to describe how important all of these interactions are to us. We’ve said this before and we’ll say it again: we’re incredibly fortunate to have such an energetic, excited, and appreciative community, so we do everything we can to keep a pulse on what everyone (yes, everyone) has to say. We love you, we really, truly try our best to show it, and we hope that the system exhibits positive feedback.

Thanks!<br/>
~e

[e@technical.io](mailto:e@technical.io)]]></content:encoded>
    <wp:post_name>78863227277</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/78756796917</link>
    <pubDate>Thu, 06 Mar 2014 11:39:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[photo]]></category>
		<category domain="category" nicename="photo"><![CDATA[photo]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[tm-00-03]]></category>
		<category domain="tag" nicename="tm-00-03"><![CDATA[tm-00-03]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/78756796917</guid>
    <!--<wp:post_id>78756796917</wp:post_id>-->
    <wp:post_date>2014-03-06 8:39:00</wp:post_date>
    <wp:post_date_gmt>2014-03-06 16:39:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title></title>
    <description></description>
    <content:encoded><![CDATA[<div class="figure"><figure>
  <img src="http://67.media.tumblr.com/9e22aa48e1eb702f4241e1c676a5d520/tumblr_n20wxht3Pv1sf07vgo1_1280.jpg" alt="">
</figure></div>

    New board revision is in! Time for some serious testing.]]></content:encoded>
    <wp:post_name>78756796917</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/78452003604</link>
    <pubDate>Mon, 03 Mar 2014 12:16:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[power]]></category>
		<category domain="tag" nicename="power"><![CDATA[power]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/78452003604</guid>
    <!--<wp:post_id>78452003604</wp:post_id>-->
    <wp:post_date>2014-03-03 9:16:00</wp:post_date>
    <wp:post_date_gmt>2014-03-03 17:16:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Power Upgrades, Back in Production</title>
    <description></description>
    <content:encoded><![CDATA[#####3/3/2014— [Updates](http://blog.technical.io/search/update)

Good news! We have resolved the [reset issue](http://blog.technical.io/post/76228806867/potential-hardware-delay-software-making-progress), and sent off files for manufacturing. We should have the first test batch of 10 Tessels in our office next week. As soon as we’re done testing those units, we’ll pull the trigger on manufacturing the first batch. If all goes well, production will take 1.5 to 2 months.
 
Here’s a render of the new boards, sans through hole components: 

![](https://31.media.tumblr.com/a644ddbe5a846342d3b4b9d3bde3245a/tumblr_inline_n1vdvfTgSw1s75tgz.png)
 
If you’ve been checking out [Tessel’s old layout](http://media.tumblr.com/1dbbe162c3352e5d58b4b2f2966e5319/tumblr_inline_mx722kLNSr1s75tgz.png), you might notice that we changed quite a bit in the lower left hand corner which contains all of the power conversion stuff.
 
Since we had to rework Tessel’s schematic to fix the reset issue, we decided to upgrade the power handling circuits while we’re at it. In short, we’ve switched from a [linear regulator](http://en.wikipedia.org/wiki/Linear_regulator) to a [buck regulator](http://en.wikipedia.org/wiki/Buck_regulator).  Here’s a handy chart to see what this means:<br/>
<br/>

Parameter/Thing | Old value | New value | So what?
------------- | ------------- | -------- | -------------- |
Voltage regulator type | [Linear regulator](http://en.wikipedia.org/wiki/Linear_regulator) | [Buck (switching)](http://en.wikipedia.org/wiki/Buck_regulator) | More current available on the 3.3 V rail, higher efficiency
Max current from 3.3 V rail from USB 2.0 | ~500 mA | ~750 mA | More current available to modules!
Max current from 3.3 V rail when running on appropriate external power | 1 A | 3 A | So. Much. Current.
Maximum input voltage | 5.5 V | 15 V | Tessel can be powered off lots of different kinds of batteries. Or even stack your batteries for extra fun.
Reverse voltage protection | 8 V | 20 V | Now we can be extra sure that Tessel won’t die if you plug in the power backwards.

<br/>
Note that increasing the maximum possible/available input voltage and output current doesn’t mean Tessel will necessarily consume more power, but rather that Tessel can now make better use of the power it draws. More specifically, upgrading to the switching regulator means we’re automatically about 20% more efficient than we were before under all conditions. 

All our best,<br/>
Kelsey, Jia, Eric, Tim, Kevin, and Jon]]></content:encoded>
    <wp:post_name>78452003604</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/76637645290</link>
    <pubDate>Fri, 14 Feb 2014 11:11:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[open company]]></category>
		<category domain="tag" nicename="open-company"><![CDATA[open company]]></category>
		<category domain="tag"><![CDATA[company culture]]></category>
		<category domain="tag" nicename="company-culture"><![CDATA[company culture]]></category>
		<category domain="tag"><![CDATA[open source]]></category>
		<category domain="tag" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="tag"><![CDATA[ethical company]]></category>
		<category domain="tag" nicename="ethical-company"><![CDATA[ethical company]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
		<category domain="tag"><![CDATA[community]]></category>
		<category domain="tag" nicename="community"><![CDATA[community]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/76637645290</guid>
    <!--<wp:post_id>76637645290</wp:post_id>-->
    <wp:post_date>2014-02-14 8:11:00</wp:post_date>
    <wp:post_date_gmt>2014-02-14 16:11:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Transparency: Keeping an Open Company</title>
    <description></description>
    <content:encoded><![CDATA[#####2/14/2014— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

<p>Last Thursday, we sent out <a href="http://blog.technical.io/post/76228806867/potential-hardware-delay-software-making-progress">a difficult announcement</a>. We had just discovered a bug mandating a re-run of our hardware. It was not just expensive, problematic, and disappointing to us, but was also likely to cause delays.</p>

<p>It’s hard to announce bad news. It’s much more fun when we get to announce exciting progress. (<a href="https://twitter.com/timcameronryan/status/431315163799502849">Tessel can post over https!</a> <a href="https://twitter.com/technicalhumans/status/433365690511155200/photo/1">Tessel can now run Express!</a>) But it’s our responsibility to tell our backers if their product might be delayed, and it’s their right to know why.</p>

<p>So we pulled ourselves together and wrote about the issue as clearly as we could. Then, not without trepidation, we sent the email explanation out to our supporters.</p>

<p>We couldn’t have received a better response. There was nothing but supportive emails and tweets, solicitous encouragement from people who had given us money for a product we would not deliver on time.</p>

<div class="storify"><iframe src="//storify.com/technicalhumans/open-company/embed?header=false" width="100%" height=750 frameborder=no allowtransparency=true></iframe><script src="//storify.com/technicalhumans/open-company.js?header=false"></script><noscript>[<a href="//storify.com/technicalhumans/open-company" target="_blank">View the story "Open Company" on Storify</a>]</noscript></div>

<p>Why did we receive such a positive response?</p>

<p>I think the answer to that question has to do with transparency: openness and honesty as a company.</p>

<h3 id="whykeepanopencompany">Why keep an open company?</h3>

<p>Openness in a company’s relations with its customers, supporters, and public, is humanizing. It’s simple: We want to treat you– the mass of people who interact with our information– like people. That includes respect and forthrightness, and an assumption that you will treat us like people too. That’s the goal of transparency: mutual understanding and respect through shared knowledge.</p>

<h3 id="undersharingandoversharing">Undersharing and oversharing</h3>

<p>Transparency is difficult to achieve, just from a logistical standpoint. If we don’t share anything about ourselves, you won’t know anything about us. This is non-obvious. We think about Tessel 24/7; it takes conscious effort to remember that other people don't. It takes a lot more effort to encapsulate our thoughts and state of affairs into information bytes which we can pass on to you.</p>

<p>The other piece is trying to figure out what we <em>should</em> tell you. What information is important enough that you will want to hear about it? We don’t want to flood your inboxes with every small success or setback, but we also want you to feel like you’re in the loop.</p>

<h3 id="ourstrategiesfortransparency">Our strategies for transparency</h3>

<p>People have responded well to our openness. We’ve had our backers tell us that they feel like a part of the team, which is an excellent compliment. Here’s what we’re doing:</p>

<h4 id="emails">Emails</h4>

<p>We send update emails to backers every two weeks. These biweekly digests include technical progress, company news, and a list of recent blog posts. These go to people who have pre-ordered our products. If you’re waiting for your Tessel, you probably care about our progress towards getting it to you. Once in two weeks is low-key. It's infrequent enough that you probably won’t get annoyed and unsubscribe, but frequent enough that you feel up-to-date.</p>

<p>Major news, we send infrequently to our major mailing list. There are around 14,000 people who have signed up on our website to get updates about Technical Machine. Most of those people haven’t bought Tessels, so we assume they’re less invested than our backers. We reserve this list for announcements such as new products, retailers carrying our products, etc.</p>

<h4 id="passivetransparency">Passive transparency</h4>

<p>If you want to stay informed on your own time, you can check out our <a href="http://tessel.io/status">status page</a>. It shows how far along we are on our software and hardware. It’s not perfect, though. We try to keep it up to date, but don’t always remember. For the sake of simplicity, it doesn’t cover everything that needs to happen before we ship, such as the design and creation of a first run experience, or the minutiae of supply chain. But it is useful to have a page that always shows our approximate status.</p>

<p>The blog. I’ve talked about the value of the blog <a href="http://blog.technical.io/post/73415641960/meta-post-the-blog">before</a>. It’s a quick insight into single subjects we’ve been thinking about lately. It’s also a choose-your-own-adventure into your engagement with us: if you love it, you can put it on <a href="http://blog.technical.io/rss">RSS</a>. If you only want the need-to-know, you can pretend the blog doesn’t exist.</p>

<h4 id="socialengagement">Social engagement</h4>

<p>People email us all the time to ask for more details surrounding our products. We respond with the most up-to-date information we have, and often in more detail than you can find on our website. If there’s something we haven’t posted, it is likely because we haven’t thought of posting it. We don’t want to have secrets; we want to be an open company. By answering your emails fully and your tweets publicly, we try to keep ourselves accountable to this standard.</p>

<p>All the best,<br/>
Kelsey Breseman<br/>
<a href="kelsey@technical.io">kelsey@technical.io</a></p>

<p><img src="https://31.media.tumblr.com/a7fe87c5f00766e0b3357a923dee83ca/tumblr_inline_n0ylu6mbTJ1s75tgz.jpg"></p>]]></content:encoded>
    <wp:post_name>76637645290</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/76530100640</link>
    <pubDate>Thu, 13 Feb 2014 10:22:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[eric kolker]]></category>
		<category domain="tag" nicename="eric-kolker"><![CDATA[eric kolker]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[setback]]></category>
		<category domain="tag" nicename="setback"><![CDATA[setback]]></category>
		<category domain="tag"><![CDATA[electrical engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[electrical engineering]]></category>
		<category domain="tag"><![CDATA[nxp]]></category>
		<category domain="tag" nicename="nxp"><![CDATA[nxp]]></category>
		<category domain="tag"><![CDATA[debugging]]></category>
		<category domain="tag" nicename="debugging"><![CDATA[debugging]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/76530100640</guid>
    <!--<wp:post_id>76530100640</wp:post_id>-->
    <wp:post_date>2014-02-13 7:22:00</wp:post_date>
    <wp:post_date_gmt>2014-02-13 15:22:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Reset: Electrical Engineering from the Front Lines</title>
    <description></description>
    <content:encoded><![CDATA[#####2/13/2014— [Eric Kolker](http://blog.technical.io/search/eric+kolker)

Hey Tesselators, Eric here.

As many of you have heard by now, we found a problem with the main Tessel board about a week ago related to how quickly different parts of the board turn on (we’re talking microsecond timing here). We’re hard at work gathering data about the existing system and testing out possible fixes.

###The “reset issue”

When I started this post on Friday (after one or two days of data collection but before parts had arrived from DigiKey), we were pretty sure that the SPIFI flash chip’s boot time was to blame for the behavior we were seeing. The theory was that the LPC1830 (our main processor) was trying to communicate with the flash chip, which contains all user code, before the flash was ready. Because the flash was unresponsive, the code entered a 60-second countdown after which the LPC reset itself and tried again. Since the flash had stabilized by this point, the Tessel would boot normally and detect as a USB device in “application mode.” Translation: Tessel would work after it sat untouched for a minute, but not immediately after being plugged in.

The easiest way to cut through the ridiculous 60-second timer was simply to hit the reset button on the board, which resets the LPC, thereby restarting the boot sequence. Assuming you hit the button more than about 300 microseconds after the board is plugged in (the time it takes the flash to init), the Tessel would boot properly and become usable. We decided, though, that the need for user intervention was unacceptable (read: not shippable), so we’ve been looking into other ways to make the Tessel reset immediately after being plugged in.

Fast forward a few days and we’ve found that the flash is definitely to blame. For a variety of reasons (hysteresis, indeterminate state inside an IC during power up, etc.), we believe that the best way to fix this issue is to add a rest control chip to the board. All that this chip does is keep the LPC’s reset line asserted for a few milliseconds after the board is powered, thereby eliminating the need for the user to hit the reset button (although this may sound like a hack, trust me that this technique is very common).

###Pull resistors

However, one additional change is also required in order to guarantee that the reset chip does the trick. Some of the lines the LPC uses to talk to the RAM (not the flash) can serve the dual purpose of controlling how the LPC boots. More specifically, when the LPC is in its default boot-mode configuration, these lines control what software runs when the LPC boots, a feature which we’ve been exploiting to make it easy to update the firmware on Tessel. This also makes the Tessel [unbrickable](http://en.wikipedia.org/wiki/Brick_(electronics)), which is a really nice feature.

In order to make use of the versatility of the default configuration, we have resistors on some of the boot lines to configure them to boot from flash and actually break out others to through hole test points. This allows us to switch between “normal” boot and DFU mode (“device firmware update” — a class of USB device that lets us do the firmware update) without permanently configuring the LPC one way or another. That is to say, this keeps it flexible and allows us to physically select the boot mode.

However, the LPC also has internal resistors on these lines which are controlled programmatically. The trouble is, these resistors are not configured properly as the device is booting up (their control circuitry is turning on at the same time). Pair this with the fact that the internal resistors typically fight (pull in the opposite direction from) the external ones, and the device may inadvertently boot into an undesirable state from which it may or may not be able to recover without an external reset event.

We have gotten good results with a workaround which involves removing the external resistors (which has the added bonus of allowing us to increase the clock rate for the entire board), but this requires that we permanently configure the LPC to boot into flash, as opposed to keeping the boot options open/configurable in hardware.

The last piece of the puzzle is a bootloader that will live in a quasi-reserved section of the flash to ensure that the Tessel remains unbrickable (unless you try to load your own firmware...without using our tools, which will refuse to write to the restricted zones). I should also clarify that the Tessel can *always* be recovered using a [JTAG programmer](http://en.wikipedia.org/wiki/Jtag) (so in this case “bricked” really means “you can’t get Tessel working again without a hardware debugger”), but that we don’t ever want to force you to use anything outside of USB and WiFi to program Tessel. 

###What else is new

We’d like to take this opportunity to tweak our power input stage. We’re looking to move from a low dropout regulator (a subset of [linear](http://en.wikipedia.org/wiki/Linear_regulator) regulators) to a [switching regulator](http://en.wikipedia.org/wiki/Switching_regulator) because it will give us more current available on the 3.3 V rail. A part swap may also allow us to increase our maximum input voltage (for powering the Tessel from an external battery/supply). 

A switching regulator would allow us to draw more current from the 3.3 V rail. The two families of voltage regulators ([linear](http://en.wikipedia.org/wiki/Linear_regulator) and [switching](http://en.wikipedia.org/wiki/Switching_regulator)) differ in how they deal with the power available to them. Linear regulators, for a given output voltage and load current (P = IV), burn any excess power by dissipating it as heat. In other words, for a given regulated voltage Vout:

![](https://31.media.tumblr.com/7f1314a35305a4d4d8636df2aeaf9d68/tumblr_inline_n0xwzabbgz1s75tgz.png)

As you can see, these regulators dissipate the power that comes from “extra” voltage as heat, and are poor choices when there’s a large difference between the input and output voltages.

Switching regulators, however, conserve power from input to output and can therefore provide a higher output current at a lower output voltage (or a lower current at a higher voltage):

![](https://31.media.tumblr.com/3c70725cee34249d0c3506a1a639b672/tumblr_inline_n0xwyirdj81s75tgz.png)

Here’s to physics! (NOTE: no process is 100% efficient, so we’ll always get less than the theoretical maximum.)

In our case, dropping from 5 V USB 2.0 down to 3.3 V allows us to get ~750 mA out (in theory). The absolute maximum is, at that point, governed by the rating of the regulator, so as much as ~1.8 A might be possible with 12 V in.

While we’re on the subject of input voltage, right now the Tessel can be powered from a maximum of 5.5 V, which is fine for USB and single cell [LiPos](http://en.wikipedia.org/wiki/Lithium_polymer_battery). We’d be looking to move to a system that gets us up to 12 V in, which would let the Tessel run off of two-cell LiPos, 6/12 V [sealed lead acid (SLA) batteries](http://en.wikipedia.org/wiki/SLA_battery), and even everyday 9 V batteries. We’re in the midst of testing parts and propagating the necessary changes to the rest of Tessel, and should have a new design by the end of next week.

###Changes wrap-up/most recent state

We’ve found a switching regulator we like, a reset controller, and have parts in the mail for a power multiplexer (one of those changes that needed propagating). We need to test everything together, update the design files, and then place an order. We continue to live in interesting times...

###The original post - or - “Eric, your handwriting is terrible”

Finally, I leave you with the contents of my lab notebook, complete with the [scope](http://en.wikipedia.org/wiki/Oscilloscope) data I took as a way of showing you what the hardware debugging process can look like sometimes. Fair warning, what follows was copied verbatim from my notebook, so it’s dense, cryptic, and a lot of the supporting information elsewhere in my notes. The general pattern it follows is:

* graph description/experimental setup
* graph
* notes/comments/musings on the most recent graph

If you’d like to try your hand at interpreting the graphs, keep the following things in mind:

* I only had a 2-channel scope; if I had had a larger one, many of these graphs would have been combined
* Timing is important. Be sure to look at the values on the x axis.
* Conditions inside an IC (voltages, memory state, etc.) are highly unpredictable during boot-up, so we can’t know what’s going on inside our chips until they tell us that they’re ready. This is why it’s important to turn things on in the right order.
* On a related note, [hysteresis](http://en.wikipedia.org/wiki/Hysteresis) exists in many of these chips

Finally, as a refresher, we’re looking into an issue which we believe has its roots in when different chips on the Tessel turn on after the Tessel is plugged in. I’m measuring voltages.

Enjoy, noodle, and hit me with questions.

####From my notebook

10.26.27.14

Want to diagnose boot behavior…

01_chx.csv<br/>
  bootup<br/>
  ch1 - 3.3V<br/>
  ch2 - reset<br/>
  1V/div, 200us/div

![](https://31.media.tumblr.com/7b999557fcf540a956e7682c16ba43f2/tumblr_inline_n0xwx8ntCs1s75tgz.png)

02<br/>
w/ reset button<br/>
1 - 3.3V 	2- reset

![](https://31.media.tumblr.com/c9c9660f3648bcef25304c15feb02eae/tumblr_inline_n0xwwkhOBk1s75tgz.png)

03<br/>
ch1 - DFU<br/>
ch2 - reset<br/>
1V, 400us

![](https://31.media.tumblr.com/f270a4aa9ac1698fed3036fdb2353775/tumblr_inline_n0xwvxXLMt1s75tgz.png)

04<br/>
1 - DFU<br/>
2 - reset<br/>
1V, 10s

![](https://31.media.tumblr.com/102d8e319e4ed47f43ef872702c2db36/tumblr_inline_n0xwv8TBgF1s75tgz.png)

chip *did not* come alive<br/>
reset chip to blame?

-------------------------------------

chip power disconnected<br/>
run it again!

board *instantly* came alive on 3.3V wire cut to reset controller. ...what?

05   DFU/reset      1V, 200us

![](https://31.media.tumblr.com/576aa658a1003df5c8c738d5eec4c6b5/tumblr_inline_n0xwueBGw51s75tgz.png)

06   3.3V/reset      1V/200us

![](https://31.media.tumblr.com/8cbe5a0bef1995ac09e6de27a4e38c8a/tumblr_inline_n0xwthuwFB1s75tgz.png)

60 second timeout is *definitely* not working<br/>
hypothesis: it *is* hysteresis. Cap time<br/>
added 1uF to reset<br/>
still no 60s boot…<br/>
but the button works…<br/>
button on power plug does *not* work.<br/>
repeated plugging in rapid succession also doesn’t work…<br/>
~3s delay before button push works	edit: no, it doesn’t<br/>
<s>long wait be</s><br/>
plug + reset + 3s delay to lift works

with or without the cap, plugging in + arbitrary delay + reset button works

07   DFU/reset     1V, 100ms

![](https://31.media.tumblr.com/f9568dc2924c38eb961dda34bc75ff34/tumblr_inline_n0xwsbplSm1s75tgz.png)

[ NOTE: data file unreadable and data omitted for CH1 (DFU) ]

1uF cap button push after plug

08 no cap, same as above

![](https://31.media.tumblr.com/459367a215e46ad5258fbdc65447e34c/tumblr_inline_n0xwr8UIJI1s75tgz.png)

####Apologies

...for using Excel. My D3-fu is weak but, frankly, I really just miss MATLAB right about now.

Thanks!<br/>
~e

[e@technical.io](mailto:e@technical.io)]]></content:encoded>
    <wp:post_name>76530100640</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/76228806867</link>
    <pubDate>Mon, 10 Feb 2014 11:23:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[Update]]></category>
		<category domain="tag" nicename="update"><![CDATA[Update]]></category>
		<category domain="tag"><![CDATA[Technical Machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[Technical Machine]]></category>
		<category domain="tag"><![CDATA[NXP]]></category>
		<category domain="tag" nicename="nxp"><![CDATA[NXP]]></category>
		<category domain="tag"><![CDATA[bug]]></category>
		<category domain="tag" nicename="bug"><![CDATA[bug]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
		<category domain="tag"><![CDATA[setback]]></category>
		<category domain="tag" nicename="setback"><![CDATA[setback]]></category>
		<category domain="tag"><![CDATA[progress]]></category>
		<category domain="tag" nicename="progress"><![CDATA[progress]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[hardware is hard]]></category>
		<category domain="tag" nicename="hardware-is-hard"><![CDATA[hardware is hard]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/76228806867</guid>
    <!--<wp:post_id>76228806867</wp:post_id>-->
    <wp:post_date>2014-02-10 8:23:00</wp:post_date>
    <wp:post_date_gmt>2014-02-10 16:23:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Potential Hardware Delay, Software Making Progress</title>
    <description></description>
    <content:encoded><![CDATA[#####2/102014— [Updates](http://blog.technical.io/search/update)

It’s been snowing like crazy here in Boston, but we’re warm, indoors, and hacking away on Tessel and its modules. 
 
Last Friday we had one of the roughest days of our company’s relatively short existence. We discovered a bug in our hardware design just days before we were going to give our assembly house the go-ahead to start assembling [all 1450 Tessel PCBs that were manufactured](https://31.media.tumblr.com/39938f0046ae3cfeda261801e8028301/tumblr_inline_mz79wqWAJ41s75tgz.jpg). The bug caused Tessel to hang each time it was plugged into USB, necessitating a push of the reset button to be able to use it. 
 
###A Bug on the Hardware
 
The tough part for us as engineers, was that we had known about this bug since July, but had diagnosed it as a minor “software issue” during several independent investigations. The root cause is a race condition between the bootup of the NXP chip (the main microcontroller) and the external flash chip. Our hardware debuggers attach to the reset pin of the Tessel, so we were changing the behavior during debugging. 
 
The microcontroller powers up around 100 to 200 microseconds before the flash chip, which contains the firmware. The NXP boot code (in read-only memory) checks for the firmware in flash, doesn’t find it, then only checks again *60 seconds later*. [We’re not the only crowdfunding team to hit NXP’s bug](https://www.kickstarter.com/projects/mossmann/hackrf-an-open-source-sdr-platform/posts/675795), and it’s not something we’re comfortable shipping out to our users. 
 
There is not an insurmountable problem, it’s just a matter of reconciling the consequences. Here are our options:
 
###Solutions and Consequences
 
1. NXP has documented that they fixed the “60 second bug” on their recently manufactured Cortex M4 series chips. We’re currently trying to get in touch with someone at NXP who knows if it was fixed for the M3 series as well. If this turns out to be true, we’ll just need to make sure we have those newer chips, then we can still use the same PCB. This is the most ideal situation as our shipping schedule will likely stay the same. That being said, the current chips we have were all manufactured in the last weeks of 2013, so it is unlikely there would be newer chips with this bug fixed.
 
2. We could add a reset controller to our main board, which will allow us to delay the propagation of the reset signal to the microcontroller, thereby eliminating the race condition. This will require another board revision, but allows for minimal changes to Tessel’s functionality and has the silver lining of allowing us to make a handful of incremental improvements to Tessel including making USB more robust and picking a better voltage regulator. This our most likely solution and will push our shipping schedule back to late March or early April.
 
We’re still learning how to create a sustainable hardware company, and this issue was a real eye opener in terms of much more time and energy we need to dedicate towards testing prior to getting products ready for shipping. We have a lot of pressure on us to ship to you, our backers, as close to the date we expected as possible, but quality is more important to us than schedule. 
 
While we honestly can’t think of anything we could have done differently to avoid this specific bug (besides fix every existing software and hardware issue), we’re taking several steps to ensure the quality of our hardware and software in the future. Specifically, we’ve set up a continuous integration rig to automatically run any new firmware on every version of Tessel prior to consolidating into the rest of our code base. We’ll soon be setting up continuous integration rigs for all of our modules as well. 
 
###Progress
 
But we do also have good news! We’ve been making progress on several items recently:

* We’re able to write JS programs to flash so that they will run as soon as Tessel is powered up.
* We’ve fixed over 50 firmware bugs reported by our beta backers.
* We’ve been interviewing folks for various positions within the company (want to be an intern or a full-time employee? [We’re looking for engineers and designers.](http://tessel.io/jobs)).
* We’ve finished the Infrared Module hardware, driver, firmware, and testbench.
* We’ve done a major overhaul of the Audio Module. Here’s the latest prototype:


We now support headphones and line-out and, more importantly, the module can now record audio through an onboard microphone or a line-in jack.

![](https://31.media.tumblr.com/fd675940ac63dd14098302ea4efc72a2/tumblr_inline_n0sblkWmJD1s75tgz.png)

We’ll keep you updated over email as things progress.
 
Yours,

Kelsey, Jia, Eric, Tim, Kevin, and Jon]]></content:encoded>
    <wp:post_name>76228806867</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/75052928417</link>
    <pubDate>Thu, 30 Jan 2014 10:53:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[marketing]]></category>
		<category domain="tag" nicename="marketing"><![CDATA[marketing]]></category>
		<category domain="tag"><![CDATA[press release]]></category>
		<category domain="tag" nicename="press-release"><![CDATA[press release]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
		<category domain="tag"><![CDATA[fundraising]]></category>
		<category domain="tag" nicename="fundraising"><![CDATA[fundraising]]></category>
		<category domain="tag"><![CDATA[venture capital]]></category>
		<category domain="tag" nicename="venture-capital"><![CDATA[venture capital]]></category>
		<category domain="tag"><![CDATA[PR]]></category>
		<category domain="tag" nicename="pr"><![CDATA[PR]]></category>
		<category domain="tag"><![CDATA[PR tips]]></category>
		<category domain="tag" nicename="pr-tips"><![CDATA[PR tips]]></category>
		<category domain="tag"><![CDATA[public relations]]></category>
		<category domain="tag" nicename="public-relations"><![CDATA[public relations]]></category>
		<category domain="tag"><![CDATA[media relations]]></category>
		<category domain="tag" nicename="media-relations"><![CDATA[media relations]]></category>
		<category domain="tag"><![CDATA[reporters]]></category>
		<category domain="tag" nicename="reporters"><![CDATA[reporters]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/75052928417</guid>
    <!--<wp:post_id>75052928417</wp:post_id>-->
    <wp:post_date>2014-01-30 7:53:00</wp:post_date>
    <wp:post_date_gmt>2014-01-30 15:53:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>How to Write a Press Release</title>
    <description></description>
    <content:encoded><![CDATA[#####1/30/2014— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

_Back in November, when we closed our seed round with True and others, it was a topic of some internal debate whether we should look for press coverage on the raise. On one hand, we wanted to share our excitement with our supporters, and it’s not that often you have news that interests an actual publication. On the other hand, news of a raise is honestly not that interesting most of the time. It meant a lot to us, but talking about it outside of the team is really close to bragging._

_One of the reasons we did decide to release the information across various news sources was to practice sending out a press release. It’s not as simple as it sounds._

Press releases are extremely formulaic, concise ways to send pre-vetted information to several reporters at once.

###A press release looks about like this:
#<center>Company Name</center>
<center>(maybe your logo in or around this space)</center>

<div style="text-align: right;">Contact:</div>

<div style="text-align: right;">Contact Name (just one primary contact is best here)</div>

<div style="text-align: right;">email</div>

<div style="text-align: right;">phone (swap email and phone number if you prefer to communicate by phone)</div>

####PRESS RELEASE: Your Catchy Headline Here

####EMBARGO until Date Time Timezone

City, State, Date to be released— First paragraph of release. The meat of your announcement, in as few words as possible.

Second paragraph. Explain the point of your company/product/whatever you’re announcing. Still keep it brief.

Third paragraph. Quote from your CEO or whomever is most relevant to the announcement.

Fourth paragraph. Quote from someone outside the company. In our case, a quote from one of our new VCs.

Possibly mention a few salient traction metrics here. I’ve received conflicting advice on whether to include coverage by other media outlets; some reporters might recognize you as a vetted company, while others might be turned off if you seem like old news.

Where to find more information about your company/project/whatever. Particularly, link to your website and a place they can find relevant images.

More information, in smaller text, if relevant. We included labeled paragraphs “About Technical Machine” and “About Technical Machine’s Investors”.<br/>
<br/>
##More notes on the press release:
Headlines should be very specific. Ours was “Technical Machine Raises $1M to Make Hardware Development Tools for Software Developers”.

The press release should be concise, but contain all vital information. Organize it clearly and fact-check it.

Sometimes, reporters will copy/paste from your press release, so make sure the writing is suitable for publication.

Note that you’ll want a quote from someone outside the company, so it might take a little time to finish the release. Plan ahead!<br/>
<br/>
##Before the press release– contacting reporters:
If you are releasing to multiple reporters, you’ll want to set an embargo. The date and time of the embargo is the exact time at which you’re allowing reporters to release their articles containing information from the press release. We set ours for a Wednesday at 11am EST, because Wednesday is a low-press day (so we might stand out as more interesting), and because we see the most engagement from our users around 11am EST (8am PST).

You’ll want to contact reporters approximately one week ahead of the embargo time. Initiate contact with an email that does not contain the press release, but does contain the headline and embargo date. Actually, let me give you an

###Email template:

Subj: Your Catchy Headline Here UNDER EMBARGO UNTIL Date Time Timezone

One sentence that gets the reporter excited but doesn’t give away any details (mostly just your headline restated).

Something along the lines of: I can send you the press release under embargo (until Date Time Timezone), and I’m free to speak with you over the phone (Times & Dates, ~two of them, a day or two before the embargo is lifted)  for a pre-briefing.<br/>
<br/>
##That’s it!
[Our press release](https://drive.google.com/file/d/0B3yhLOCt9RkkdHFUT202V09nWTQ/edit?usp=sharing) had success with [GigaOm](http://gigaom.com/2013/12/04/technical-machine-gets-1m-to-let-web-developers-play-with-the-internet-of-things/) and the [Boston Business Journal](http://www.bizjournals.com/boston/blog/startups/2013/12/technical-machine-raises-1m-seed.html?ana=twt), two out of the five media outlets I had emailed about the raise (all five had previously written about or been in contact with Technical Machine). We also sent the press release to our investors [True Ventures](http://www.trueventures.com/2013/12/04/welcoming-technical-machine/) and [Rough Draft Ventures](https://medium.com/rough-draft-ventures/ad4c9f363db), who supported the release by publishing related blog posts on the same day.

The news was then picked up by [Startup Beat](http://startupbeat.com/2013/12/12/technical-machine-qa-id3614/), [Crowdfund Insider](http://www.crowdfundinsider.com/2013/12/27758-dragon-innovation-alum-technical-machine-raises-1m-seed-round-plans-move-silicon-valley/), [the San Francisco Business Times](http://www.bizjournals.com/sanfrancisco/blog/2013/12/technical-machine-moves-san-francisco.html), and [Xconomy Boston](http://www.xconomy.com/boston/2013/12/04/boston-roundup-volition-capital-freight-farms-technical-machine/).

In the end, I’m glad we sought press on the raise. Our families, friends, and supporters were enthusiastic; we had good exposure on the raise; and now I know how to release any further announcements to media outlets.

I hope this is useful! Please let me know if you have any questions.

Kelsey

[kelsey@technical.io](mailto:kelsey@technical.io)

![](https://31.media.tumblr.com/faee142303da68acabf5946d941a82a8/tumblr_inline_n0824te57b1s75tgz.png)]]></content:encoded>
    <wp:post_name>75052928417</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/74730229332</link>
    <pubDate>Mon, 27 Jan 2014 11:07:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[eric kolker]]></category>
		<category domain="tag" nicename="eric-kolker"><![CDATA[eric kolker]]></category>
		<category domain="tag"><![CDATA[gprs]]></category>
		<category domain="tag" nicename="gprs"><![CDATA[gprs]]></category>
		<category domain="tag"><![CDATA[2g]]></category>
		<category domain="tag" nicename="2g"><![CDATA[2g]]></category>
		<category domain="tag"><![CDATA[electrical engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[electrical engineering]]></category>
		<category domain="tag"><![CDATA[phone calls]]></category>
		<category domain="tag" nicename="phone-calls"><![CDATA[phone calls]]></category>
		<category domain="tag"><![CDATA[tesselphone]]></category>
		<category domain="tag" nicename="tesselphone"><![CDATA[tesselphone]]></category>
		<category domain="tag"><![CDATA[tessel phone]]></category>
		<category domain="tag" nicename="tessel-phone"><![CDATA[tessel phone]]></category>
		<category domain="tag"><![CDATA[tessel texts]]></category>
		<category domain="tag" nicename="tessel-texts"><![CDATA[tessel texts]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/74730229332</guid>
    <!--<wp:post_id>74730229332</wp:post_id>-->
    <wp:post_date>2014-01-27 8:07:00</wp:post_date>
    <wp:post_date_gmt>2014-01-27 16:07:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>GPRS (2G) Module</title>
    <description></description>
    <content:encoded><![CDATA[#####1/27/2014— [Eric Kolker](http://blog.technical.io/search/eric+kolker)

###GPRS

Hey Tesselators, Eric here.

The GPRS module has been both a ton of fun to work on and prompted its fair share of headaches, so strap in: this post will feel a lot like the one I wrote a while back about [debugging the RFID module](http://blog.technical.io/post/66391929436/debugging-the-rfid-module).

####What’s that acronym?

No shame, I had to Google it too. GPRS stands for [“General Packet Radio Service,”](http://en.wikipedia.org/wiki/General_Packet_Radio_Service) but most people know it as a GSM (“2G”, if you will) cell connection. Devices with a GPRS radio can interact with the outside world via SMS, voice calls, and even TCP/IP. Besides enabling you to essentially build your own phone with a Tessel, the GPRS module keeps the Tessel connected outside the range of WiFi. It’s one of the Class B [modules](http://tessel.io/modules) we added as a stretch goal during our crowdfunding campaign on Dragon Innovation.

As with many of our modules, we borrowed much of the design of the GPRS module from an open source product sold by [Seeed Studio](http://www.seeedstudio.com/wiki/GPRS_Shield_V2.0). The first task, as usual, was to adapt the Arduino shield so it would play nicely with a Tessel. The biggest difference we had to overcome here had to do with the power requirements of the different components.

####Power work is never over

Most devices you run into these days are either 5V or 3.3V. For instance, Tessel is a 3.3V device, most Arduinos are 5V devices, the RaspberryPi is a 3.3V device, etc. Taking a step back, when I say that something is an _x_ V device, that usually means that it takes _x_ V between its power in and [ground](http://en.wikipedia.org/wiki/Ground_(electricity)) to turn the thing on and that all of its I/O pins can tolerate a maximum of _x_ V. In other words, if you don’t give it a high enough voltage on its power pins it likely won’t turn on (I/O may still work when driven at a lower voltage,, but check the [datasheet](http://en.wikipedia.org/wiki/Datasheet) and look for the term “[logic high](http://en.wikipedia.org/wiki/Logic_level#Logic_voltage_levels)”), but if the voltages are too _high_ then you run the risk of [destroying the chip](https://www.youtube.com/watch?v=LXFxkJfqVfc), or, in EE jargon, “letting out its [magic smoke](http://en.wikipedia.org/wiki/Magic_smoke).”

The chip at the center of the GPRS module, the SIM900, however is neither a 3.3V device, nor a 5V device, nor even a 1.8V device. Instead, it’s some weird hybrid of...most of those. In a nutshell:

* The I/O for the chip is all 2.8V. This means that the pins don’t like anything higher than 2.8V coming in.
* The chip will run off 3.2V to 4.1V. Anything higher or lower and it will try to protect itself by shutting down. As it turns out, these values play very nicely with LiPo batteries, which typically hover at around 3.6 V.
* Last but not least, the module generally has a rather high current draw (on the order of 50mA when idle), but behaves more like a sinkhole when transmitting and can draw peak currents of up to 2A.

The reason the last two bullet points are so important has to do with conservation of power (summarized poorly [here](http://en.wikipedia.org/wiki/Constant_power_circuit)). In so many words, the basic idea is that some devices, when pushed beyond their limit, will conserve power (in this case, P=IV) before they give up completely and shut down. In the context of the GPRS module, this means that when we transmit and the module’s current draw spikes, the voltage drops. SIMCOM, the part’s manufacturer, knows that this will happen; the graph below is from the datasheet:

![](https://31.media.tumblr.com/9e470269a6aa665342a083340019707c/tumblr_inline_n02ifgmY9P1s75tgz.png)

This is chart tells us a few things:

* If the power supply rail for the GPRS drops below 3.2 V, even for some very short amount of time, then the module turns itself off.
* If the total drop in voltage is more than 300 mV, then the module turns itself off.
* We should expect peak current draw up to 2 A.

If we’re running the GPRS module off the Tessel’s 3.3 V rail, then we only have 100 mV of wiggle room before the module shuts down.

####Bathtubs 101

Before we go any further, here’s quick refresher on the E&M for capacitors, mostly in layman’s terms/in the context of household plumbing:

* When electrons hang out on a [node](http://en.wikipedia.org/wiki/Node_(circuits)) (the place where two or more electrical [components](http://en.wikipedia.org/wiki/Electronic_component) meet), we say that [charge](http://en.wikipedia.org/wiki/Electric_charge) has accumulated on that node. Charge has units of Coulombs (C), but is denoted with a “Q”. If you like, you can think of charge as a number of liters/gallons of water at a particular point.
* [Current](http://en.wikipedia.org/wiki/Current_(electricity)), which is measured in Amperes (A) (or, equivalently Coulombs per second) but denoted with an “I”, is the flow of electric charge from one node to another through a component. You can think of it as the flow rate of water through a pipe.
* [Voltage](http://en.wikipedia.org/wiki/Voltage), measured in Volts (V), is the difference in electric potential between two nodes, or the capacity of charge at a node to do useful work. Think of it as water pressure.
* [Capacitance](http://en.wikipedia.org/wiki/Capacitance), which has units of Farads (F), is the ability of a body to store electrical charge. [Capacitors](http://en.wikipedia.org/wiki/Capacitor) are the components we use when we want capacitance between two nodes. Within the hydraulic analogy, they behave like [tanks with a stretchy, impermeable membrane down the middle](http://en.wikipedia.org/wiki/Capacitor#Hydraulic_analogy).

When a capacitor charges or discharges, it follows the formula:

![](https://31.media.tumblr.com/5a90ce792c254b6a02ad857b742c3717/tumblr_inline_n02iefXxt51s75tgz.png)

In English: current flow into a capacitor as a function of time is equal to the size of the capacitor multiplied by rate of change of the voltage across the capacitor with time.

####Where were we?

Recall that we’re trying to be able to survive the theoretical worst-case scenario: a 577 microsecond, 2 A pulse, with a voltage drop less than 0.1 V. At first pass, a likely easy solution might be to simply add more capacitance to the power rail. We know _I(t)_ and can calculate _dV(t)/dt_, so we can solve for the lower bound of acceptable capacitances:

![](https://31.media.tumblr.com/9a73ca7a0fbad1c78ad0ba07a846335c/tumblr_inline_n02idpWzHE1s75tgz.png)

As it happens, a capacitor that size would have a lot in common with a [T-Rex](http://marswillsendnomore.files.wordpress.com/2011/11/calvin-hobbes-dinosaur-002.jpg): it would be enormous, completely impractical, and ugly...not to mention hard to find and expensive to purchase. There must be a better way.

####Success!

The best answer turns out to be 4-12 V of external power and a [buck converter](http://en.wikipedia.org/wiki/Buck_converter) that turns the supplied voltage into a ~3.5 V rail for the SIM 900, instead of enormous capacitors. Buck converters are a subset of [switching converters](http://en.wikipedia.org/wiki/Switched-mode_power_supply), which harness the properties of inductors, diodes, transistors, and capacitors to generate a higher or lower voltage. 

The buck regulator we threw on is good for 3 A and ~4 - 12 V in. The [datasheet](http://www.ti.com/lit/ds/symlink/tps62132.pdf) is here, if you’re curious.

Alright. It’s time to stop talking about woes of EE land and show you the fruits of our labor! The modules for our Beta backers look like this (without headers or the antenna):

![](https://31.media.tumblr.com/30a61491fe3760aa492fe872f0b6e354/tumblr_inline_n02hnectdX1s75tgz.jpg)

And, of course, proof that this thing works:

![](https://31.media.tumblr.com/38bc368e4b8a4ed4789e9ffa6e1646b4/tumblr_inline_n02i0mp0TV1s75tgz.jpg) 

That’s me on the Tessel phone: a Tessel + GPRS module hooked up to my laptop sending me texts, receiving my texts, and making/receiving phone calls. It was a good day at the office.

If you want to see (or hear) for yourself, send me an email with your number (US only, please) and a project you’d like to build with Tessel. I have a batch of 16 boards to test this morning; might as well make use of them.

Thanks!

~e

[e@technical.io](mailto:e@technical.io)]]></content:encoded>
    <wp:post_name>74730229332</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/74175870675</link>
    <pubDate>Wed, 22 Jan 2014 10:46:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[modules]]></category>
		<category domain="tag" nicename="modules"><![CDATA[modules]]></category>
		<category domain="tag"><![CDATA[infrared]]></category>
		<category domain="tag" nicename="infrared"><![CDATA[infrared]]></category>
		<category domain="tag"><![CDATA[gprs]]></category>
		<category domain="tag" nicename="gprs"><![CDATA[gprs]]></category>
		<category domain="tag"><![CDATA[text from tessel]]></category>
		<category domain="tag" nicename="text-from-tessel"><![CDATA[text from tessel]]></category>
		<category domain="tag"><![CDATA[bluetooth]]></category>
		<category domain="tag" nicename="bluetooth"><![CDATA[bluetooth]]></category>
		<category domain="tag"><![CDATA[ble]]></category>
		<category domain="tag" nicename="ble"><![CDATA[ble]]></category>
		<category domain="tag"><![CDATA[production]]></category>
		<category domain="tag" nicename="production"><![CDATA[production]]></category>
		<category domain="tag"><![CDATA[manufacturing]]></category>
		<category domain="tag" nicename="manufacturing"><![CDATA[manufacturing]]></category>
		<category domain="tag"><![CDATA[testing]]></category>
		<category domain="tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/74175870675</guid>
    <!--<wp:post_id>74175870675</wp:post_id>-->
    <wp:post_date>2014-01-22 7:46:00</wp:post_date>
    <wp:post_date_gmt>2014-01-22 15:46:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Updates: Manufacturing and Testing</title>
    <description></description>
    <content:encoded><![CDATA[#####1/22/2014— [Updates](http://blog.technical.io/search/update)

### Tessel

We got a batch of 50 Tessels from our manufacturer this week. We will test them before we give the go-ahead to start on the rest of the production run.

![](https://31.media.tumblr.com/77c504799b4351bf20f9de111e16ffca/tumblr_inline_mzrfvn8AAf1s75tgz.jpg)

### Modules

It is taking us longer than anticipated to finish up the test rigs and send the rest of the 5 modules into manufacturing. Unfortunately, this delay runs into the Chinese New Year, so our manufacturer will be taking the next week off. This will probably delay delivery beyond the amount mentioned in our [last email](http://blog.technical.io/post/72890484614/delivery-schedule). We'll let everyone know by exactly how long when we get dates from our manufacturer.

#### BLE

Our BLE module is a system on a chip (SoC) that runs its own firmware, separate from Tessel. We were able to write a programmer for it so that Tessel will be able to update it without a proprietary debugger. This means you will be able to select different Bluetooth Profiles to load onto the module. If you have a Windows machine, you'll even be able to completely customize your profile with BlueGiga's development tools (look out for a tutorial on that topic!).

#### GPRS

We did another revision of the GPRS board to make it a bit smaller. Here it is sending us a text message:

![](https://31.media.tumblr.com/80946614b89ce5048fcdb5b055a55a60/tumblr_inline_mzrfwb1WQo1s75tgz.png)

#### IR

A few months ago [we announced that we were splitting IR from the rest of the ambient module](http://blog.technical.io/post/68900085629/ambient-and-infrared-layout-updates). The change took us longer than anticipated, but here's the new IR module:

![](https://31.media.tumblr.com/49d3222d6ab12427f1e437280b436b22/tumblr_inline_mzrfwteQ8C1s75tgz.jpg)

And here's Jon testing it with a tv remote. Earlier, he tested from across our shared coworking space– a distance of probably around 30 ft.

![](https://31.media.tumblr.com/c9de3f1a99ed03e4316512d5e2d7dcfe/tumblr_inline_mzrfx2biRm1s75tgz.jpg)

###Upcoming Events
* 1/27 Cambridge, MA– Kelsey is speaking at Rough Draft Ventures’ sketch “Women in Technology, Now and Next”. [Free tickets.](http://www.eventbrite.com/e/rdvsketch-women-in-technology-now-and-next-tickets-10126289003)
* 1/28 Cambridge, MA– Tim is speaking at Cambridge Hackspace’s “Hacking your idea into a business”. [Meetup link.](http://www.meetup.com/Cambridge-Hackspace/events/157093632/)
* 5/28-30 Amelia Island, FL– Some or all of us will definitely be at JSConf. [Tickets.](http://2014.jsconf.us/tickets.html)

###One more thing...
We were nominated for Postscapes' Internet of Things awards– we'd appreciate if you'd [vote for us!](http://postscapes.com/internet-of-things-award/project/tessel/)

Here's to our final push,

Kelsey, Eric, Jia, Tim, Jon & Kevin]]></content:encoded>
    <wp:post_name>74175870675</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/74067878165</link>
    <pubDate>Tue, 21 Jan 2014 11:07:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[jon mckay]]></category>
		<category domain="tag" nicename="jon-mckay"><![CDATA[jon mckay]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[infrared]]></category>
		<category domain="tag" nicename="infrared"><![CDATA[infrared]]></category>
		<category domain="tag"><![CDATA[ir]]></category>
		<category domain="tag" nicename="ir"><![CDATA[ir]]></category>
		<category domain="tag"><![CDATA[module]]></category>
		<category domain="tag" nicename="module"><![CDATA[module]]></category>
		<category domain="tag"><![CDATA[debugging]]></category>
		<category domain="tag" nicename="debugging"><![CDATA[debugging]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/74067878165</guid>
    <!--<wp:post_id>74067878165</wp:post_id>-->
    <wp:post_date>2014-01-21 8:07:00</wp:post_date>
    <wp:post_date_gmt>2014-01-21 16:07:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>The Tale of the Dreaded Infrared Module</title>
    <description></description>
    <content:encoded><![CDATA[#####1/21/2014— [Jon McKay](http://blog.technical.io/search/jon+mckay)

The Infrared Module was designed to be able to interact with the remotely controlled devices around us and has a sort of infamy amongst the team. It had a rough birth and an even rougher upbringing. Maybe one day I’ll be proud of what it becomes, but for now, it’s just the problem child. 

Several months ago, the team had to make a really tough decision. We had initially designed the Ambient Module to be able to transmit and receive infrared (IR) light as well as detect ambient light and sound. This presented two problems: our design was not very modular (infrared communication and ambient sensing are two very different needs) and it was spreading our hardware thin. By jamming all that functionality on to one module, we would have to perform some tricky software engineering feats to make it work, thus increasing the chance we would have bug-ridden firmware and potentially longer development time.

After several heavy discussions, we decided to split the Ambient Module into two: an Ambient Module for light and sound, and a dedicated Infrared Module, at the risk of not shipping on time.

This decision committed us to one more module to design, code, manufacture, test, and ship– which, at 14 modules, was starting to reach the capacity of our small team’s brainpower. It was especially upsetting because infrared is not likely to be a popular module and it was taking up more of our time than modules with higher expectations like Bluetooth Low Energy. But in the long term, by splitting the modules, we’ll have two stable modules instead of one (potentially) flaky one and we’re staying true to our mission of making each module with only one particular task that is done really well.

By December, we were already a little grouchy about the Infrared Module because of time spent discussing its separation from the Ambient Module. I was tasked with writing the code for it and I hoped to complete it as efficiently as possible. 

Whoever designed the Infrared protocol made it rather complicated in an effort to avoid detectors receiving false positives from incoming sunlight (the sun also emits in the infrared band of light). At its simplest, the infrared protocol is turning on and off a modulated signal (see image below) for various amounts of time. An on is known as a “mark” and an off is known as a “gap”.

![](https://31.media.tumblr.com/792d5c5465e46f737f2f1f8572871dc3/tumblr_inline_mzpwvci9fY1s75tgz.png)

_source: electronics.stackexchange.com_

But of course, it’s not quite that simple. Every manufacturer (Phillips, Sony, Sharp, etc.) has their own definition for an on/off duration that constitutes a one or a zero. For example, Sharp defines a binary “1” as 315 microseconds of a mark followed by 1779 microseconds of a gap.

To add to the complexity of all the minor timing tweaks in the protocol from all these different manufacturers, the signal can also be modulated at different frequencies. During a mark, it is actually modulating (switching between on and off) thousands of times a second. The most popular modulation frequency is 38 kHz (36 and 40 kHz are also quite common).

Our IR module has its own tiny microprocessor, the attiny84, which is responsible for offloading all the infrared transmission logic from Tessel. The Tessel simply passes a modulation frequency and array of marks and gaps, and the microcontroller takes care of the managing the intricate timing required to transmit the signal (thus freeing up Tessel for more important things).

Fortunately, Arduino has a great IR library written by Ken Shirriff that I was able to adapt for the module pretty quickly. However, testing out my implementation was tricky. The only IR activated device I had in my apartment was an old Sharp television. I needed to find the code that could be converted to its underlying binary representation of 1’s and 0’s, which in turn could be translated into the right on/off durations in order to turn on the TV. But where does one find IR codes? After a bit of Googling, I found a database of IR codes for each manufacturer. 

To my dismay, Sharp has dozens of different codes for different devices, and I couldn’t find a model number anywhere on my TV. The only identifier I could find was an obscure, white code I located on the bottom of the TV remote. I Googled that alphanumeric code, which took me to an Ebay auction item for the same remote, which happened to list a bunch of TV model codes that the remote works with. I found a fairly similar model code (“G1059J is pretty close to G1059SA, right?”) on the infrared code database, and found a power code of “0x00000000000041A2”. I ran the number through the Arduino library and it produced an array of on/off durations (negative numbers are gaps): 

[4011, -3875, 561, -1906, 561, -1906, 561, -1906, 561, -1906, 561, -921, 561, -921, 561, -1906, 561, -921, 561, -1906, 561, -921, 561, -1906, 561, -921, 561, -921, 561, -921, 561, -921, 561, -921, 561, -1906, 561, -921, 561, -1906, 561, -921, 561, -921, 561, -921, 561]

I hardcoded the array into my module firmware and stood in front of the TV. I don’t think I’d ever felt more pessimistic about a test. I pointed the module at the TV, powered it up to send the signal and... my TV turned on! I really couldn’t believe that it worked. I stood there 5 minutes, rebooting the module over and over again, giggling as my TV turned on and off. 

[Warning: Things get [more] Technical]

The happiness I felt about that success would soon be outweighed by a devious little bug that infested my code for days. After building out more of the firmware that allowed Tessel to send over the IR data to transmit, I stumbled across an issue when I sent arrays larger than 96 bytes. If I read the array back after sending, it started writing back inconsistent bytes after the 96th.  It was always 96. My first thought was that I was out of RAM. I was using the attiny44, which had 256 bytes of RAM, but I was only using up 240 after compilation. Then I thought maybe it could have been an issue with the transmission from Tessel to the module (over SPI): Was I sending data too fast? Was I sending it in the wrong format? Was the interrupt handler infinitely recursing and causing the module to crash? I tested these theories out by saving the byte I was sending over to a temporary variable instead of my buffer and echoing it back in the same interrupt - there were no issues. 

Finally, Kevin was nice enough to put his work aside and give me a hand because he’s worked with the AVR microcontroller family extensively. Kevin was first alerted by how close I was to using up all the RAM with my transmit buffer (240/256 bytes). After poking around in the assembly code, he noticed that when the chip select line for SPI (which tells the microcontroller that data is about to come down the pipe) is pulled low and the corresponding interrupt is called, 19 different registers are pushed onto the stack. The stack grows down from the top of RAM so it was actually overwriting down into my buffer, causing the data to be corrupt (256 - 19 = 237 which overwrites bytes 97-100 of my buffer). To make the fix, we simply upgraded from the attiny44 to the attiny84, which boasts twice as much RAM.

Now, I’m off to writing the test bench for the module so hopefully we can ship it out this week and I can wash my hands off this module forever *knock on wood*.

-Jon

[@jonmckay](https://twitter.com/jonmckay)]]></content:encoded>
    <wp:post_name>74067878165</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/73618767099</link>
    <pubDate>Fri, 17 Jan 2014 10:45:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[jia huang]]></category>
		<category domain="tag" nicename="jia-huang"><![CDATA[jia huang]]></category>
		<category domain="tag"><![CDATA[jialiya huang]]></category>
		<category domain="tag" nicename="jialiya-huang"><![CDATA[jialiya huang]]></category>
		<category domain="tag"><![CDATA[beta testing]]></category>
		<category domain="tag" nicename="beta-testing"><![CDATA[beta testing]]></category>
		<category domain="tag"><![CDATA[crowdfunding]]></category>
		<category domain="tag" nicename="crowdfunding"><![CDATA[crowdfunding]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[beta tier]]></category>
		<category domain="tag" nicename="beta-tier"><![CDATA[beta tier]]></category>
		<category domain="tag"><![CDATA[beta program]]></category>
		<category domain="tag" nicename="beta-program"><![CDATA[beta program]]></category>
		<category domain="tag"><![CDATA[beta]]></category>
		<category domain="tag" nicename="beta"><![CDATA[beta]]></category>
		<category domain="tag"><![CDATA[costs]]></category>
		<category domain="tag" nicename="costs"><![CDATA[costs]]></category>
		<category domain="tag"><![CDATA[pros and cons]]></category>
		<category domain="tag" nicename="pros-and-cons"><![CDATA[pros and cons]]></category>
		<category domain="tag"><![CDATA[kickstarter]]></category>
		<category domain="tag" nicename="kickstarter"><![CDATA[kickstarter]]></category>
		<category domain="tag"><![CDATA[dragon innovation]]></category>
		<category domain="tag" nicename="dragon-innovation"><![CDATA[dragon innovation]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/73618767099</guid>
    <!--<wp:post_id>73618767099</wp:post_id>-->
    <wp:post_date>2014-01-17 7:45:00</wp:post_date>
    <wp:post_date_gmt>2014-01-17 15:45:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Costs &amp; Benefits of Beta Testing</title>
    <description></description>
    <content:encoded><![CDATA[#####1/17/2014— [Jia Huang](http://blog.technical.io/search/jia+huang)

It's not uncommon to see "Beta Test" tiers on crowdfunded projects. Before we launched on [Dragon](http://www.dragoninnovation.com/), we tested Tessel with anyone we could find. We went back and forth about whether or not we should do a beta test tier. This was around mid August, and at this point Tessel wasn't usable without a lot of hand-holding, so we were nervous about releasing it early. However, we knew that getting more beta testers would give us greater coverage across Tessel’s features.

Specifically, with the beta tier we wanted to test:

* Tessel usage across a longer period of time 
* How easily others can get setup and use Tessel without us being there
* The way we handle issues
* Setup experience on other computers/setups

But we were also concerned about:

* How much more expensive it would be to manufacture early runs
* How difficult would it be for us to push breaking changes once Tessels were in the hands of users
* How much bandwidth we had to support testers. We wanted to be able to resolve issues as they come up, and as a small team, there are only so many issues we can handle at once.

This was in August and only about 3-4 modules were done at this point. We were on the 4th build of Tessel (we're up to 14 modules and the 7th build of Tessel now). I was (and still am) afraid of people getting their hands on Tessel without it being fully "ready". 

We ended up setting up a beta tier that included 3 Tessels and all 14 modules for 1k. Testers would get their Tessels in November or December and modules as we finished building them. We hoped that the price of 1k would be enough to solve most of our concerns.

* 1k would cover the manufacturing costs of an early run
* 1k also limits the amount of backers at that level, which means we can handle issues individually.

### Costs
Now that we're close to shipping all of our beta tier rewards, I'd like to show where this 1k estimate got us:

**Item**| **Cost per tester**
----|--------
Tessel v0 | 194.03
Tessel v2 | 195.57
Accelerometer | 8.35
Climate | 13.93
Servo | 15.6
Relay | 14.22
GPS | 29.43
BLE | 29.98
MicroSD v2 | 15.0
Ambient | 20.15
Camera | 23.33
GPRS   | 25.1
IR  | 19.0
NRF24 | 9.96
RFID | 21.54
Audio | 13.56
Shipping Nov |20
Shipping Dec | 40
Shipping Jan |40
bad MicroSD round* | 10.47
bad BLE round* |19.31
bad Ambient round* |12.0
bad IR round* |18.15
**total cost/tester**|**807.66**


*During module assembly, we caught a few design errors which resulted in us having to discard parts and PCBs.

The averaged shipping costs are a little misleading; shipping in the USA is around ~$5-$10, but about $70-$90 internationally. 

I originally thought that a price tag of 1k would more than cover the costs, but it's actually very close to the cost of running our beta program. And these prices are without paying for assembly, meaning that every time we ship to the testers, there are two of us who spend a day or two in a lab hand-assembling all the modules. The overall assembly time is probably around 70 hours in total.

Here’s what our shipping setup looks like:![](https://31.media.tumblr.com/f412cb3df761b248b0b0f2bba6268f88/tumblr_inline_mzi64kEYBt1s75tgz.jpg)


### Benefits

So far we've had around 60 Github issues on Tessel, 20 of which were opened up by our testers, and we’ve closed about half of them. One beta tester even cleared some issues by themselves. Some of these issues were known before we shipped out Tessels to our testers, but having them opened up as an issue by someone other than the team helps us prioritize fixes.

My biggest worry before doing the beta tier was how much it would sidetrack us from our main development track. As it turns out, all the issues that testers run into are critical issues that we need to fix. Stability is a huge concern, and while we test all builds on our computers before pushing, there are always edge cases out there that we fail to catch. The "nice to have" features we thought we needed to work on are of a much lower priority.

Having live testers also forced us to put more effort on our debugging and test tools in general. While this takes up more of our time up front, it will allow us to iterate faster in the long run.

### Communication

After we shipped out units to our first testers, we realized we didn’t really *know* how to run a beta program. We wanted feedback, but didn’t have many communication channels set up. Our code was on Github, and we just kind of assumed that it would be enough. Issues would just pop up and we’d resolve them on Github just like our normal workflow.

This ended up being a frustrating experience for both us and our testers, so on the next round that we shipped out we tried to be as communicative as possible. We ended up setting up an IRC channel and being a lot more upfront about how much we wanted to talk with our testers.

We’ve been getting more success with this approach, but there’s still a lot of room for improvement. If we run a beta program again, I would

* put more diagnostic tools on the device up front. A lot of communication is just sending back and forth error messages until we figure out what’s happening, and since we have testers in Europe, the time-zone lag takes up a lot of time. 
* give testers an easier way to report issues.
* have more permanent communication tools setup. Right now it’s a mix of IRC, email, Github and Skype which makes a lot of the information very transient and hard to capture for others that might be running into the same problems.
* set up expectations of the beta program earlier. Tessel is still very much in beta, and as much as it pains me to say this, getting everything running smoothly is a an exception rather than the default.

Overall, having a beta program has been beneficial to us, and has helped us reprioritize issues that we otherwise wouldn't have found out about. This will in turn make Tessel a better product for all of our backers.

[@jia](https://twitter.com/jia)]]></content:encoded>
    <wp:post_name>73618767099</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/73415641960</link>
    <pubDate>Wed, 15 Jan 2014 11:03:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[blog]]></category>
		<category domain="tag" nicename="blog"><![CDATA[blog]]></category>
		<category domain="tag"><![CDATA[company blog]]></category>
		<category domain="tag" nicename="company-blog"><![CDATA[company blog]]></category>
		<category domain="tag"><![CDATA[company culture]]></category>
		<category domain="tag" nicename="company-culture"><![CDATA[company culture]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/73415641960</guid>
    <!--<wp:post_id>73415641960</wp:post_id>-->
    <wp:post_date>2014-01-15 8:03:00</wp:post_date>
    <wp:post_date_gmt>2014-01-15 16:03:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Meta-Post: The Blog</title>
    <description></description>
    <content:encoded><![CDATA[#####1/15/2014— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

###The value of a company blog

Keeping a blog takes up a fair amount of time, and it’s not always top of the list when you’re worried about shipping a project. However, I think it’s worth the effort, and here’s why:

####Furthering the mission
Every company has a mission, and the blog is great for expounding on company values. We’ve used it to discuss our takes on [JavaScript](http://blog.technical.io/post/63748658066/javascript-is-a-fixed-point), [PRISM](http://blog.technical.io/post/64792395344/prism-could-change-the-internet-of-things-for-the), and [open source](http://blog.technical.io/post/67472869771/monetizing-open-source). This helps us engage with the people we hope to reach and spread our overall mission.

Blogging is a particularly useful tool for us in this regard because part of our mission is to help web developers enter the hardware space and start hardware companies. As people with primarily web development backgrounds starting a hardware company, by blogging about what we’re doing and challenges we face, we’re directly furthering that aspect of what we, as a company, are trying to accomplish.

####Personality
When people talk about companies, they often forget that the company is comprised of people. There are only six of us, and each of us has a different perspective, writing style, and set of interests. The blog gives us a place to speak to the public as individuals, humanizing the company and making us more approachable. [A post from Eric](http://blog.technical.io/post/73210671542/musings-on-tessel-two) looks different from [a post by Jon](http://blog.technical.io/post/72669952552/ideas-for-next-generation-tessels), even on largely the same topic. Reading the blog, you can learn that [Jia watches Adventure Time](http://blog.technical.io/post/66686276686/reverse-engineering-lpcs-device-firmware-upgrade) and [Tim likes to throw things at her](http://blog.technical.io/post/70909557957/hell-week). That’s a really cool thing about startups: we’re not faceless. If you order something, we’ll smile. If you write a mean tweet about us, we’ll see it. If you email [team@technical.io](mailto:team@technical.io), we’ll read it and get back to you. We’re people; we want you to like us, and we want to know what you think we could do better. Keeping a blog helps us show that to you.

####Reflection
When you’re heads-down shipping product, it can be really hard to poke your head up and look at the big picture. Writing is an excellent tool for reflection. Our blogging schedule is about once every two weeks per person, so every two weeks or so, we have to think deeply enough about something company-relevant to express a written opinion or account.

Keeping to this post schedule can be challenging, but I’ve found that when I sit down with a teammate to help them figure out what to write, something worthwhile surfaces pretty quickly: [“Well, I’ve been working on PCBs a lot.”](http://blog.technical.io/post/68781598890/getting-custom-pcbs-for-prototyping) [“We haven’t really talked about our open source mission; most open source companies do.”](http://blog.technical.io/post/67472869771/monetizing-open-source) [“I’ve been getting a lot of emails about power management from people.”](http://blog.technical.io/post/69491145111/power-work-is-never-over) What are you doing? What are you thinking about? It doesn’t have to be deep, but you should probably have thought about something in the last two weeks.

####Record
Since we regularly post updates to our blog, we can go back and look at what we were thinking or doing at specific points in time. By reading back through the blog, we can look again at why we were excited about the logo we picked, how we were feeling halfway through our crowdfunding campaign, and watch our ideas evolve over time.

####Consistent presence
It’s important to communicate regularly with your audience. We email our backers every two weeks with updates so they know how their product is coming along. However, our audience is larger than just our backers, and we try to post to our blog more often than that, and with more varied content. This lets potential customers, investors, our parents, etc. know what our company has been up to recently, just by checking our website.

Plus, if you don’t keep a consistent presence online (we barely blogged in December), your Klout score drops like a stone:

![](https://31.media.tumblr.com/36c267fc79db5f9e384a86c7882ce088/tumblr_inline_mzep4bAE5S1s75tgz.png)

Each post drives traffic, as well. Our pageviews spike for an hour or two after every blog post. Every single blog post we’ve published has had engagement on Twitter (sparking new Twitter followers), and gotten Facebook likes. We only use company Tumblr for the blog (it’s not listed on our contact page or anything) and we’re up to 169 Tumblr followers, with new likes, reblogs, and tumblr follows nearly every day. And occasionally, people even email us because they had something to say about something we put on the blog. That’s worth a lot.

###How we keep the blog

- *Editor in chief:* I make the blog post schedule. I remind people when their blog posts are coming due, discuss ideas for new posts with them, go over their writing for proofreading and clarity, publish to the blog, and spread the link out to social media. I think it’s a good idea to have one person in charge of all this because it means someone has read all the posts, knows how long it’s been since the last one, and publishes consistently.

- *Team editing:* I do the first pass of edits, but the author typically also sends out the google doc link to the rest of the team for fact- and am-I-missing-something checks. This way everybody on the team knows what has been said to the public.

- *Publishing:* I publish our blog to our company’s Tumblr, Twitter, Facebook, Google+, and Pinterest. We get some click-throughs from each of these, but depending on the post, Twitter and Facebook pretty much always get the most traction. Tumblr’s reblogs, however, continue to generate traffic even weeks or months later.

###Our blog is now six months old! Here are some nostalgia-links.

- Our [first post](http://blog.technical.io/post/57797141932/p-dir-ltr-technical-machine-is-empowering-software)
- All of our blog posts, collected on [Pinterest](http://www.pinterest.com/frijoldelaluna/ex-machina/) (don’t laugh; the dynamic grid makes it really easy to find old posts. I do it for [press](http://www.pinterest.com/frijoldelaluna/technical-machine-press-shamelessly-collected/), too.)
- My favorite posts:
 - [A Candid Conversation with Jialiya Huang](http://blog.technical.io/post/62525010070/a-candid-conversation-with-jialiya-huang), in which I interview Jia about what it means to her to start a company/this company
 - Jon’s [8 Tips for Jumpstarting a Hardware Startup](http://blog.technical.io/post/63089046642/8-tips-for-jumpstarting-a-hardware-startup)
 - [The Making of the Ambient Module](http://blog.technical.io/post/66107571478/the-making-of-an-ambient-sensor), Jia’s illustrated account of how a module is made
 - [Debugging the RFID Module](http://blog.technical.io/post/66391929436/debugging-the-rfid-module), in which Eric explains electrical engineering (as usual)
 - [Feminism and Tech: The Reluctant Programmer](http://blog.technical.io/post/68067410677/the-reluctant-programmer-feminism-and-tech), in which I discuss some complexities of being a woman in this field
 - [Testing Hardware](http://blog.technical.io/post/71868894308/testing-hardware), in which Jia shows off test rigs for manufacturers to QA our modules

Thanks for reading! As always, please keep in touch.

Kelsey

[kelsey@technical.io](mailto:kelsey@technical.io)

![](https://31.media.tumblr.com/b98278a915a666c0efbbd9f5801064de/tumblr_inline_mzeqrmVBRB1s75tgz.png)]]></content:encoded>
    <wp:post_name>73415641960</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/73210671542</link>
    <pubDate>Mon, 13 Jan 2014 10:51:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[eric kolker]]></category>
		<category domain="tag" nicename="eric-kolker"><![CDATA[eric kolker]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[tessel 2]]></category>
		<category domain="tag" nicename="tessel-2"><![CDATA[tessel 2]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[future directions]]></category>
		<category domain="tag" nicename="future-directions"><![CDATA[future directions]]></category>
		<category domain="tag"><![CDATA[plans]]></category>
		<category domain="tag" nicename="plans"><![CDATA[plans]]></category>
		<category domain="tag"><![CDATA[modules]]></category>
		<category domain="tag" nicename="modules"><![CDATA[modules]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/73210671542</guid>
    <!--<wp:post_id>73210671542</wp:post_id>-->
    <wp:post_date>2014-01-13 7:51:00</wp:post_date>
    <wp:post_date_gmt>2014-01-13 15:51:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Musings on Tessel Two</title>
    <description></description>
    <content:encoded><![CDATA[#####1/13/2014— [Eric Kolker](http://blog.technical.io/search/eric+kolker)

As we wrap up the first wave of hardware design and push into production, we’ve turned our thoughts to what’s coming next. I’ll leave the discussion of the industry at large to the [blogosphere](http://xkcd.com/181/), but continue the discussion [Jon started](http://blog.technical.io/post/72669952552/ideas-for-next-generation-tessels) about what comes next from Technical Machine, specifically on the hardware front.

* Tessel 2 is an enormous opportunity space. We’ve tossed around the idea of
 * A simple update to the board, possibly baking some of the more common sensors (accelerometer/gyroscope, SD card, etc.) into the device
 * A smaller, low power version of the Tessel, probably with two module ports, a lower price point, more limited GPIO, and possibly a different wireless story (BLE, WiFi, cellular data of some kind, etc.). Just for kicks, here’s something we played around with (for the sake of R&D) a while back:
<center><img src="https://31.media.tumblr.com/c972a459e123a9bb4425ed40b253a0ba/tumblr_inline_mz93o2VeDS1s75tgz.png" /></center>
 * A ruggedized version of the board for our friends in industry, on boats, etc. who want to bake this into something highly reliable. We’re talking maybe as far as a waterproof case, dedicated battery, power in up to 48 V DC (AC wall power is a whole different animal), ethernet + [POE](http://en.wikipedia.org/wiki/Power_over_ethernet) support, etc.
 * Something for the roboticists out there… My guess is this would include a co-processor of some kind to handle control loops, high speed I/O, an [IMU](http://en.wikipedia.org/wiki/Inertial_measurement_unit) and communication with modern hobby radios. [This kind of architecture](http://www.abrg.group.shef.ac.uk/projects/rococo/GRR9572201_report.pdf) is common in many robotic systems because pushing the robot’s “reflexes” down to a lower level processor frees up the main CPU to do computationally expensive mission planning while maintaining a more consistent system response to external forces. TLDR: deciding where to fly would take clock cycles away from subroutines that keep the [quadcopter airborne](http://www.youtube.com/watch?v=w2itwFJCgFQ) if they shared the same CPU.
* With a little help, many of our modules can be adapted to serve alternate functions. The best example is the Servo module, which can be converted into an LED driver (well, technically we convinced it to become a servo driver in the first place) or used to drive an external [speed controller](http://en.wikipedia.org/wiki/Electronic_speed_control), thereby letting the Tessel control pretty much any kind of actuator you want. On a similar note, the NRF module can fake Bluetooth packets and the RFID module can also be used to transmit.
* As an analog guy at heart, I’m itching to get some precision instrumentation out there, and a great opportunity just popped up with another project on Dragon Innovation. The [Mooshimeter](http://www.dragoninnovation.com/projects/34-mooshimeter) is a kick-ass [multimeter](http://en.wikipedia.org/wiki/Multimeter) that communicates over BLE and uses your phone as its display/controller. We’ll be working with their team to make sure that the Tessel can talk to the Mooshimeter, thereby opening up a whole slew of possibilities in the space of measuring hard to-reach electrical things (and normal-to-reach electrical things too). To give you a sense of the numbers here, the bare Tessel can measure voltage up to 3.3 V with 10 bits of resolution. The Mooshimeter would expand that to 600 V with 24 bits of resolution.

<center><img src="https://31.media.tumblr.com/bfed67b51709541871f7f6c598785479/tumblr_inline_mz93pbFKwF1s75tgz.jpg" /></center>

* The next wave of modules will have to be better and more creative than ever. We’ve already covered most of the bases for “I/O you’d expect from something that talks to your phone,” which leaves, frankly, the more interesting things still on the table. Jon talked about the myoelectric sensor that [Kelsey and I played with at Robots Conf](https://vine.co/v/hQ7QVZt25M6), we’ve mentioned the possibility of an IMU and thermocouples, a more advanced camera, passive IR (motion detectors)...the list goes on. I’d love to see what people create with pressure and breakbeam sensors (think laser trip wire), magnetometers, and rangefinders. We’ve tossed around the idea of doing something with [MIDI](http://en.wikipedia.org/wiki/Midi), too...
* On a less physical level, I’d love to find new and improved ways for people to interact with and design hardware. I wrote a post a while back about [my physical toolbox](http://blog.technical.io/post/67667723038/inside-erics-toolbox-an-electrical-engineering-kit), but part of what I’ve come to appreciate in working on this project is just how far the *software* tools EEs use have to come. I’ve tried every once in a while to [contribute to the growing effort](https://github.com/ekolker/ee-utils), but there’s still a long way to go. Long story short, I believe that Technical Machine is in a good place to help with this movement.

At the end of the day, what we do next depends a lot on what we hear from all of you. I’d love to [build for the sake of building](http://xkcd.com/137/), and strive to keep my [head up in the clouds](http://xkcd.com/941/), at least for a little while, but ultimately we can’t be successful if all we create are beutiful yet impractical tools. Let us know what you’re yearning for ([team@technical.io](mailto:team@technical.io)), and we’ll do our best to keep up.

Thanks!

~e]]></content:encoded>
    <wp:post_name>73210671542</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/72890484614</link>
    <pubDate>Fri, 10 Jan 2014 14:28:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[delivery]]></category>
		<category domain="tag" nicename="delivery"><![CDATA[delivery]]></category>
		<category domain="tag"><![CDATA[schedule]]></category>
		<category domain="tag" nicename="schedule"><![CDATA[schedule]]></category>
		<category domain="tag"><![CDATA[manufacturing]]></category>
		<category domain="tag" nicename="manufacturing"><![CDATA[manufacturing]]></category>
		<category domain="tag"><![CDATA[shipping schedule]]></category>
		<category domain="tag" nicename="shipping-schedule"><![CDATA[shipping schedule]]></category>
		<category domain="tag"><![CDATA[backer update]]></category>
		<category domain="tag" nicename="backer-update"><![CDATA[backer update]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/72890484614</guid>
    <!--<wp:post_id>72890484614</wp:post_id>-->
    <wp:post_date>2014-01-10 11:28:00</wp:post_date>
    <wp:post_date_gmt>2014-01-10 19:28:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Delivery Schedule</title>
    <description></description>
    <content:encoded><![CDATA[#####1/10/2014— [Updates](http://blog.technical.io/search/update)

A few weeks ago we gave an update that we had put 9 out of our 14 modules in production. Tessel is already in production at the moment, and is due to be done in February. 

We'll be sending in the rest of the 5 modules into production at the end of this week/beginning of the next.

Module manufacturing is delayed for a little over a week due to the upcoming Chinese New Year at the end of January (our modules are manufactured in China). This puts the delivery date from our manufacturer around mid-February for the 9 modules that we have already sent in. 

Depending on when we're able to send in the rest of the 5 modules (audio, BLE, ambient, IR, and GPRS), the delivery date for our Dragon backers will be late February to early March. For pre-orders taken over our website (rather than crowdfunding), unless something unanticipated arises, we plan on shipping shortly thereafter.

Once the modules are made, they will be shipped to our fulfillment partner Rush Order. Rush Order will begin shipping immediately as soon as they receive Tessels and modules.

This is about two weeks later than we had originally anticipated shipping to Dragon backers: changed from mid-February to late February/early March. We underestimated how much of a delay Chinese New Year would have in our schedule, but we hope that this will be the last delay we run into.

Oh, and here's a picture of 1,500 unpopulated Tessel PCBs, sent to us this morning by our Tessel manufacturer Worthington Assembly:

![](https://31.media.tumblr.com/39938f0046ae3cfeda261801e8028301/tumblr_inline_mz79wqWAJ41s75tgz.jpg)

Cheers, and please reach out ([team@technical.io](mailto:team@technical.io)) if you have any questions.

Kelsey, Kevin, Jia, Jon, Eric, and Tim]]></content:encoded>
    <wp:post_name>72890484614</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/72669952552</link>
    <pubDate>Wed, 08 Jan 2014 11:31:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[jon mckay]]></category>
		<category domain="tag" nicename="jon-mckay"><![CDATA[jon mckay]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[future]]></category>
		<category domain="tag" nicename="future"><![CDATA[future]]></category>
		<category domain="tag"><![CDATA[plans]]></category>
		<category domain="tag" nicename="plans"><![CDATA[plans]]></category>
		<category domain="tag"><![CDATA[upnext]]></category>
		<category domain="tag" nicename="upnext"><![CDATA[upnext]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/72669952552</guid>
    <!--<wp:post_id>72669952552</wp:post_id>-->
    <wp:post_date>2014-01-08 8:31:00</wp:post_date>
    <wp:post_date_gmt>2014-01-08 16:31:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Ideas for Next-Generation Tessels</title>
    <description></description>
    <content:encoded><![CDATA[#####1/8/2014— [Jon McKay](http://blog.technical.io/search/jon+mckay)

Every once in a while, after a long day of work, the Technical Machine team will sit down, grab a couple of beers (except Jia... or else she’ll fall asleep), and bounce ideas off of each other about aspirations for our future products. 

Most of our ideas are flat out ridiculous and will never come to fruition (I’m looking at you edible Tessel) but there are a handful of major underlying trends in the embedded space that we think could be important as a guiding principle for one of the next versions of our products.

###Robotics

![](https://31.media.tumblr.com/162a65058addb1d337a9c7f4c5589877/tumblr_inline_mz0cn30AqS1s75tgz.png)

source: [http://ghostradio.wordpress.com/tag/robotics/](http://ghostradio.wordpress.com/tag/robotics/)

You’ve probably already heard all the news about Google scooping up Robotics companies [left](http://www.theverge.com/2013/12/14/5209622/google-has-bought-robotics-company-boston-dynamics) and [right](http://www.digitaltrends.com/cool-tech/google-owned-schaft-robot-wins-darpa-robotics-challenge-trials/). And with good reason, too. Robots are expected to start generating huge amounts of valuable data within the next few years. But on top of that, they’re a ton of fun to build and play around with.

 In order to make a version of Tessel that’s ideal for robotics, would need to make some major changes including allowing for a beefier power supply up to 48V, more digital input and output pins, and a coprocessor with a realtime clock.

###Wearables & Biofeedback

![](https://31.media.tumblr.com/e8db686667020b9e964e78d1524dbcb1/tumblr_inline_mz0cnsW2PI1s75tgz.png)

source: [www.medgadget.com](http://www.medgadget.com)

Wearables, are the obvious next step in making computers more mobile and closer to our senses. Some great examples of these kinds of projects are the [MYO armband](https://www.thalmic.com/en/myo/) for controlling devices around you with your forearm muscles or [Sensoria socks](http://store.sensoriafitness.com/sensoria-fitness-bundle-offer-one-anklet-4-pairs-of-socks/#.UsIM52RApR8) that improve your running style. Wearables can be more personalizable than other kinds of devices because they are so intimate with how your body works and what you physically spend your time doing. A wearable Tessel will need to be smaller, lower power (probably using BLE instead of WiFi) and maybe even flexible like [a Limberboard](http://www.dragoninnovation.com/projects/18-limberboard).

Biofeedback driven products are even closer to the senses and often overlap with wearables. My favorite example of this is this is the [Emotiv](http://emotiv.com/) headsets for gathering EEG data and controlling devices with your mind. There are a [ton of other biofeedback sensors](http://en.wikipedia.org/wiki/Biofeedback) that could be used to gather data about the body. You can bet that once we finish making Tessel, I’ll be working on a node Emotiv library. 

###Audio/Visual

![](https://31.media.tumblr.com/883cafbf4c83fe62bd68e9556cca7319/tumblr_inline_mz0co8tXV01s75tgz.png)

source: [reviews.cnet.com](reviews.cnet.com)

If we’ve learned anything from the massive increase in photo and video production and consumption on mobile platforms, we know that there will be a huge demand for A/V technology on embedded devices. The camera module that we’re working on can only run between 10 and 15 frames per second so we’ll need much higher end camera hardware to get anything close to GoPro or Parrot Drone quality. To have a great user experience at higher resolutions we would need to make a pretty different version of Tessel with higher-bandwidth wireless transmissions, more on-board memory, and video codecs .

We still have a lot of work to do on Tessel V1 but the time to start planning or even prototyping our next products start now.  Are there any hardware directions you think we should go? Let us know! [team@technical.io](mailto:team@technical.io)

-Jon]]></content:encoded>
    <wp:post_name>72669952552</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/72100061554</link>
    <pubDate>Fri, 03 Jan 2014 12:30:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[community]]></category>
		<category domain="tag" nicename="community"><![CDATA[community]]></category>
		<category domain="tag"><![CDATA[github]]></category>
		<category domain="tag" nicename="github"><![CDATA[github]]></category>
		<category domain="tag"><![CDATA[first run experience]]></category>
		<category domain="tag" nicename="first-run-experience"><![CDATA[first run experience]]></category>
		<category domain="tag"><![CDATA[user experience]]></category>
		<category domain="tag" nicename="user-experience"><![CDATA[user experience]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/72100061554</guid>
    <!--<wp:post_id>72100061554</wp:post_id>-->
    <wp:post_date>2014-01-03 9:30:00</wp:post_date>
    <wp:post_date_gmt>2014-01-03 17:30:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Designing the First Run Experience</title>
    <description></description>
    <content:encoded><![CDATA[#####1/3/2014— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

I’m designing the first run experience for Tessel, and I want it to be excellent.

It needs to do well with:

**Highly varied audience:** Most of the people purchasing Tessel are used to writing code– but not all of them. This presents an immediate challenge: I don’t want to bore our main audience by including too many basics (“what’s the command line? How do I use it?”). People will skim, skip, roll their eyes, and probably miss important information.

At the same time, I don’t want to alienate our beginning users; I’m all too familiar with technical sites that assume you have a lot more knowledge than you actually do, resulting in anger and frustration.

**Variation in product:** Every user will have a Tessel and at least one module. That’s on purpose: we didn’t want people to get their Tessel, push the blinky example, then wonder what to do next. Instead, we want people to immediately plug in the modules they chose and try out their functionality. You’ll plug in your accelerometer module, wave it around, and see values changing on the screen. And then you’ll think, “What if I taped it to a ping-pong paddle?” “Can I use it to make my servo module move?” “How hard would it be to implement gesture control?”

That’s all very good, but people have different modules or sets of modules, and it would be best if the instructions on the screen matched what you had in your hands. What’s more, the first run in my head ends with you on a page full of projects which use the modules you have.

**Other considerations:** The first-run experience, first and foremost, needs to get a user from unboxing to up-and-running as seamlessly as possible– providing all necessary setup and orientation instructions. Users should also be introduced, via the first run experience, to the site’s project and community features, if these can be integrated into the setup.

Here are some ideas on the subject:

- [Eric style](http://blog.technical.io/post/69491145111/power-work-is-never-over), I could add in links every few sentences to (e.g.) a tutorial page for working with the command line.
- Choose your own adventure: users select what modules they have, leading them on a customized first-run featuring their new abilities. This could also be extended to a customized-by-experience.
- Adventure pre-chosen: since we have information on everyone’s orders, we could in theory give you a login or special key which would serve a first run tutorial based on your modules. This has the added benefit of logging you in to our site, which might make it easier to join the community.
- Have login involving GitHub accounts. This would be useful generally, as we’d like to have GitHub integration with Tessel projects we’ll display on the site generally (more on that in another post perhaps; I’m also working on Tessel’s community aspects, including a way for the community to share their Tessel projects on the site). The other benefit of GitHub login could be to separate out experienced web programmers from people who might need a more detailed introduction to using node modules on Tessel– slyly serving up a customized first run.

What would you like to see? Do you have any examples of particularly stellar first run experiences?

Kelsey Breseman

[@SelkeyMoonbeam](http://twitter.com/SelkeyMoonbeam)

[kelsey@technical.io](mailto:kelsey@technical.io)

![](https://31.media.tumblr.com/994c48c741df0f3924ab751c1711829f/tumblr_inline_mytdy6wJKD1s75tgz.png)]]></content:encoded>
    <wp:post_name>72100061554</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/71868894308</link>
    <pubDate>Wed, 01 Jan 2014 14:13:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[jia huang]]></category>
		<category domain="tag" nicename="jia-huang"><![CDATA[jia huang]]></category>
		<category domain="tag"><![CDATA[test benches]]></category>
		<category domain="tag" nicename="test-benches"><![CDATA[test benches]]></category>
		<category domain="tag"><![CDATA[testing]]></category>
		<category domain="tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[quality]]></category>
		<category domain="tag" nicename="quality"><![CDATA[quality]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[modules]]></category>
		<category domain="tag" nicename="modules"><![CDATA[modules]]></category>
		<category domain="tag"><![CDATA[hardware hacking]]></category>
		<category domain="tag" nicename="hardware-hacking"><![CDATA[hardware hacking]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/71868894308</guid>
    <!--<wp:post_id>71868894308</wp:post_id>-->
    <wp:post_date>2014-01-01 11:13:00</wp:post_date>
    <wp:post_date_gmt>2014-01-01 19:13:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Testing Hardware</title>
    <description></description>
    <content:encoded><![CDATA[#####1/1/2014— [Jia Huang](http://blog.technical.io/search/jia+huang)

In a few months we'll be shipping over 1k Tessels and 4k modules. We want to make sure that every product we ship will work, so we shipped some test benches to our module manufacturer in China.

![](https://31.media.tumblr.com/55041099a20c676c88af8fef5b9b2fff/tumblr_inline_myn73gTO9V1s75tgz.png)

These are the test benches for the RFID, Servo, Climate, nRF24, MicroSD, Camera, Relay, and GPS modules. Try and guess which are the ones we did closer to the deadline…

The majority of the test benches are just Tessels. The Tessels can switch between multiple module tests so that our manufacturer can keep testing modules even if a few test benches break. For some modules we ended up using Arduinos since the C to JS firmware ports aren't done yet. 

In all of the tests I tried to aim for the following:

* Tests should cover core functionality
* Tests should have clear instructions
* Test benches should have minimal configuration

###Testing core functionality
Each module test goes through a core use case (or multiple use cases), and tries to approximate how an end user would use the module.

For example, our RFID module testbench has a 3 inch standoff with an RFID card taped to the top.

![](https://31.media.tumblr.com/fce3e0e766e01feb9f78b6c4ae7f8209/tumblr_inline_myn74tSTe91s75tgz.png)

If the module cannot detect from this distance, than the module has failed. 

Similarly, the nRF24 module goes through sending and receiving messages to another nRF24 module. The camera takes a picture and the test is to check whether or not the image is good.

###Clear instructions
I tried to make the test benches as consistent and self explanatory as possible. All tests pass with either Green or Blue LEDs and fail on Red. Ideally, we would like these tests to be able to be run years from now if needed. 

I originally wrote the instructions in English, but then I realized that the tests are going to be run halfway across the world by workers whose primary language is Chinese. Most Chinese manufacturers have an English speaking rep or project manager, but the level of English proficiency varies pretty drastically. So I ended up translating the instructions to Chinese as well and having both on there.

![](https://31.media.tumblr.com/8de0a622337ad344861989300f5ff32d/tumblr_inline_myn77xnj9g1s75tgz.png)

###Minimal Configuration
For some of our modules, it's annoying to set up the test: the servo module can connect up to 16 different servos, and each servo takes 3 pins (ground, power, and signal). Testing all this by plugging in a servo into each position would take a long time. Relay testing takes a similarly long time since the tester needs to connect wires to the module. 

For these kinds of tests we made module testing PCBs designed to test all the pins at once. So instead of plugging in 16 different servos, the test can use just 1 Servo test PCB. This also has the added benefit of being able to see a clear pass/fail (is the LED on?) versus having to keep track of 16 servos.

![](https://31.media.tumblr.com/7d591e45125fd8c1425fea52b3f60754/tumblr_inline_myn7oxUdpO1s75tgz.png)![](https://31.media.tumblr.com/fae35b95d73b6fc4c8b4b77f1de7d1ee/tumblr_inline_myn7pueTNX1s75tgz.png)

###Coming in January
We still have 5 more modules to get into manufacturing in early January: Ambient, IR, Bluetooth, GPRS, and Audio. 


Back to work.

Jia]]></content:encoded>
    <wp:post_name>71868894308</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/70909557957</link>
    <pubDate>Mon, 23 Dec 2013 12:11:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[eric kolker]]></category>
		<category domain="tag" nicename="eric-kolker"><![CDATA[eric kolker]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[company culture]]></category>
		<category domain="tag" nicename="company-culture"><![CDATA[company culture]]></category>
		<category domain="tag"><![CDATA[jialiyaball]]></category>
		<category domain="tag" nicename="jialiyaball"><![CDATA[jialiyaball]]></category>
		<category domain="tag"><![CDATA[camera]]></category>
		<category domain="tag" nicename="camera"><![CDATA[camera]]></category>
		<category domain="tag"><![CDATA[test benches]]></category>
		<category domain="tag" nicename="test-benches"><![CDATA[test benches]]></category>
		<category domain="tag"><![CDATA[tests]]></category>
		<category domain="tag" nicename="tests"><![CDATA[tests]]></category>
		<category domain="tag"><![CDATA[moving]]></category>
		<category domain="tag" nicename="moving"><![CDATA[moving]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/70909557957</guid>
    <!--<wp:post_id>70909557957</wp:post_id>-->
    <wp:post_date>2013-12-23 9:11:00</wp:post_date>
    <wp:post_date_gmt>2013-12-23 17:11:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Hell Week</title>
    <description></description>
    <content:encoded><![CDATA[#####12/23/2013— [Eric Kolker](http://blog.technical.io/search/eric+kolker)

I haven’t had the bandwidth lately to sit down and write another one of my long, deep technical dives. Instead, I’ll debrief a little on what I’ve been juggling lately (read: this past week). Here goes a braindump in [reverse chronological order](http://www.imdb.com/title/tt0209144/).


###Friday- Saturday: Move out
For the holidays, Jon and Kelsey had gone to California on Tuesday, and Kevin had shipped out to Colorado. That left Tim, Jia, and me the task of packing up and moving everything out of Tim and Jia’s dorm. Let’s just say that the only sleep I got in the surrounding 48 hours was in the card ride home from Boston. Tim gets most of the credit here because he’s the lucky guy who got to transport all of our gear:

![](https://31.media.tumblr.com/8cbf4649c41dc5f891bf7f807d95c83b/tumblr_inline_my873jjDhW1s75tgz.png)

###Tuesday - Friday: Test benches
Everything we make needs to get tested before it ships, including each and every module. To do this, we build dedicated hardware, which typically takes the form of either a Tessel or an Arduino with a custom PCB or protoboard. We write some firmware that verifies that the device under test (DUT) is working properly (I’ll save the juicy details for another blog post), and the test benches usually look something like this:

![](https://31.media.tumblr.com/19d34cb12336f90503324f553956dcb6/tumblr_inline_my875e6pYF1s75tgz.png)

Since we’re ready to ramp production on around nine of our modules, this meant that we had to design, build, and [test](http://cdn.memegenerator.net/instances/400x/29041416.jpg) the same number of test benches before shipping them off to one of our manufacturers. Specifically, I needed to verify that our camera and RFID designs were sound before we could ship them (spoiler: they are). This meant building a few boards and running them through the paces.

###Wednesday - Thursday: Beta round 2
We pushed out the second round of boards to Beta backers on Thursday. This culminated in the $500 USPS charge that [Kelsey showed you last week](http://blog.technical.io/post/70520262063/how-to-ship-product):

![](https://31.media.tumblr.com/9f033d9ebcaa97b0e964b1b75201d74a/tumblr_inline_my876uIpRh1s75tgz.png)

Before we could send out the hardware, though, we had to build and program it.

+ The new Tessels (model TM-00-02) needed to be one-time programmed (OTP’d) with the proper serial numbers, bootloader, etc., then tested to be sure [blinky.js](https://github.com/technicalmachine/blinky) runs smoothly
+ We needed to build around 80 modules for Tessel’s Beta backers (first and second round alike). Specifically, we built…
 + A fresh set of Micro SD modules
 + A full batch of GPS and Ambient modules 
 + A trio of IR modules (for us to test/develop firmware on, not to ship, but we were already in the lab...)
 + At least 25 BLE modules (these in particular are very difficult to assemble by hand and until very recently our yield rate was unacceptably low. We ended up tweaking the layout, praying, and I spent hours carefully building the modules one by one.
   All told, I think Jia and I spent at least six hours in the lab on Wednesday.
+ Everything had to have firmware flashed, be tested, then ESD bagged, and packed for shipping.
+ Last but not least, on Thursday, Jia and I spent three hours in not one, and not two, but *three* different Post Offices to try to ship seven internationally-bound Beta packs (one Post Office couldn’t ship internationally, one legitimately closed while Jia was filling out forms, and the third finally worked out). We ended up holding up one of the lines filling out paperwork for the better part of an hour. Fulfillment is a chore I’m grateful to be rid of (thanks, [Kelsey](http://blog.technical.io/post/70520262063/how-to-ship-product)!).

###Monday - Tuesday: Probably the Camera
I think I was working on the camera at this point.
We decided around a week ago how we wanted to go about converting the camera we’ll be using into a Tessel-compatible module. The full story will make a good blog post, but the summary is: 

+ Pick an existing camera
+ Establish that we can communicate with it
+ Ask the manufacturer to do one part swap so we can mount it to our own board
+ Mount it to said board, which includes the standard Tessel module header and some support circuitry

Once we had a homebrew prototype, we needed to test the new board, verify we could still bring it online, and generally vet the communication protocol we’ll be using to interface with the device.

###Sometime before Monday: GPRS, but I don’t even remember anymore
It turns out that you sometimes lose track of time when you work weekends, don’t sleep much, and have a bunch of looming deadlines. (Kelsey says I’m “depressing,” but I really do like my job and if you’d like to work with us, check out our [jobs](http://tessel.io/jobs) page.)

I was likely working on the GPRS module at this point. I had an Arduino shield from Seeed Studio that we had rebuilt so it would play nicely with the Tessel, but I hadn’t brought the board online yet. Luckily, this proved to be a painless process (well, after I fixed the antenna path and attached the antenna).

A minute or so later, I was able to send a “Hello, world! I miss Jialiyaball...” text to Tim using Jia’s SIM card (note: when a thing you built with your own hands sends an SMS it’s really freakin’ cool). The first half of the message should be self-explanatory. The back half is a game we play where we shout “Jialiyaball!” and throw a plush [Jake doll](http://www.amazon.com/Adventure-Time-Jake-10-Plush/dp/B005KLU2WA/ref=sr_1_1?ie=UTF8&qid=1387681693&sr=8-1&keywords=jake+the+dog) at Jialiya. By “we” I mostly mean “Tim.”

Thanks!

~e]]></content:encoded>
    <wp:post_name>70909557957</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/70520262063</link>
    <pubDate>Thu, 19 Dec 2013 16:36:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[shipping]]></category>
		<category domain="tag" nicename="shipping"><![CDATA[shipping]]></category>
		<category domain="tag"><![CDATA[customs]]></category>
		<category domain="tag" nicename="customs"><![CDATA[customs]]></category>
		<category domain="tag"><![CDATA[international shipping]]></category>
		<category domain="tag" nicename="international-shipping"><![CDATA[international shipping]]></category>
		<category domain="tag"><![CDATA[fulfillment]]></category>
		<category domain="tag" nicename="fulfillment"><![CDATA[fulfillment]]></category>
		<category domain="tag"><![CDATA[crowdfunding]]></category>
		<category domain="tag" nicename="crowdfunding"><![CDATA[crowdfunding]]></category>
		<category domain="tag"><![CDATA[logistics]]></category>
		<category domain="tag" nicename="logistics"><![CDATA[logistics]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/70520262063</guid>
    <!--<wp:post_id>70520262063</wp:post_id>-->
    <wp:post_date>2013-12-19 13:36:00</wp:post_date>
    <wp:post_date_gmt>2013-12-19 21:36:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>How to Ship Product</title>
    <description></description>
    <content:encoded><![CDATA[#####12/19/2013— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

One of the primary reasons that hardware is hard is that you have to deal with logistics. The product actually has to move from Point A to Point B. Knowing this, I set out early to tackle the piece of supply chain that involves taking finished product and delivering it to customers.

Shipping, it turns out, is a deep rabbit hole. With this blog post, I hope to introduce you to some of the pitfalls and key concepts within shipping and fulfillment– particularly for international delivery.

###Misconceptions
Initially, I assumed that shipping would be pretty simple: you print some labels, you put a thing in a box, and you’re good to go. As it turns out, there’s a lot more to worry about when you have (1) a lot of product (2) differences between orders and (3) anything international.

Back in August, when we were figuring out our crowdfunding campaign, I’m pretty sure our discussion on going international went like this:

Me: Hey Jon, somebody on Twitter wants to know if Tessel is going to be available internationally. Did we decide that yet?

Jon: Sure, why not? *Checks a few Kickstarter projects.* It looks like people usually add $10 for international shipping.

![](https://31.media.tumblr.com/2aa8b258b4c0c87ee2ecee8f5a0635e8/tumblr_inline_my2o9vw1PA1s75tgz.jpg)

*Image: postal cost for seven beta packages to be shipped internationally via USPS Global Express*

I have no idea why people usually tack on $10 for international shipping. It costs just over $15 to ship a small 1 lb. box from the United States to most other countries (e.g. Germany, Australia, the Czech Republic). And that’s just postage– which, it turns out, is not the full logistical cost of shipping. Here are a few more pieces you’ll have to worry about, whether you're shipping internationally or not:

###Beyond Postage
Before you actually get to the postage stage of sending product to customers, there are a few other things to take care of in order to prepare your product to ship. These things fall under the heading of “fulfillment”. And, it turns out you can get a ‘fulfillment house’ to take care of these things for you. Fulfillment includes:

####Packaging
This is an interesting problem: how much does packaging matter? In some ways, your unboxing is a part of your first run experience, so custom packaging might be important to you. On the other hand, you might be working with tight margins, in either time or money, so you just want to get whatever causes your product to arrive intact.
Fulfillment houses will typically source packaging for you or help you source it yourself if you want something special, and will then pass the cost of the packaging on to you. [Uline](http://www.uline.com/) is a common source for packaging.

####Pick and Pack
This is the service of putting the right things into the right boxes. In the case of Technical Machine, since we now have ~15 different SKUs (Tessel and the different modules), there are ~87178291200 different possible combinations of product (actually, in theory, it’s infinite because there is no limit to `r`, the number you select. I just wanted to write a big number). The point is, it’s a real pain to pack the right things into the right boxes, and as a start-up, you probably don’t have time to do that *and* deliver quality on time.
The price here is pretty much never a simple number, but an approximation can narrow it down to “cost of first item in package” and “cost for each additional item in package”.

####Post
The USPS and other carriers offer discounted rates for volume, and some carriers also offer discounts for connections with their preferred fulfillment houses. Your fulfillment house can likely help you negotiate rates with a postal carrier. In any case, it is best to find a shipping consolidator so that your couple of thousand units can be palleted with a million other units being shipped overseas that day. If you're shipping internationally, it may be cheaper to have different shipping services domestically and internationally.

###Legal Stuff and Filling out Forms
If you’re shipping internationally, you will run across complications almost immediately in the space of customs and taxes. The mere drudgery of filling out 1,000 customs forms is a good reason to get a fulfillment house. But even if you do, you should familiarize yourself with the legal implications of shipping goods across borders. Here are a few terms you’ll want to look up:

* [VAT](http://en.wikipedia.org/wiki/Value_added_tax#Imports_and_exports): Value added tax, similar to a sales tax.
* [DDU/DAP/DDP (Incoterms)](http://en.wikipedia.org/wiki/Incoterms): These acronyms refer to when duties are paid, to whom, and who pays them, as well as who is responsible for the goods during different phases of the journey.
* [Importer of Record](http://www.rodenborn.com/articles_importer_of_record.html): The entity responsible for customs.

I won’t define the terms fully here because I don’t want to give misinformation and the legal definitions change. But they are a good start to wrapping your head around the complexities of international shipping.

###Choosing a Fulfillment House
Choosing a fulfillment house is very complicated; each fulfillment house has a very different style and set of services. Here are a few good questions to cover when you’re selecting between options:

* **What services are offered?** Some fulfillment houses are combined fulfillment and post, some don’t cover postage but offer extensive other services such as customer service, returns, and custom packaging. Most fulfillment houses will have an overview-of-services document they can send you.
* **What else can they take care of?** Ask about the little things: will they source electostatic packaging for your electronic parts? Can they put a UPC sticker on it so you can send big packs to distributors? Will they integrate the data from two different order systems for you? The fulfillment house might be able to take care of a lot of little details for you that you hadn’t budgeted into your timeline.
* **What do they require from you?** What sort of data do they need? Do you need to supply barcode numbers? Is there a minimum shipping volume?
* **Who do they normally work with?** Interaction styles vary widely, and you can infer a lot about the fulfillment house’s usual customers based on the interaction style: are they fast on email? Do they put you on a conference call? Do they prefer you call their cell phone? You are going to need a good line of communication with your fulfillment house, so make sure you can get in touch with them easily and effectively. Then gauge their fit: a big piece of my fulfillment house selection was because I wanted to work with someone who was used to working with start-ups, and could tell me about pitfalls such as chargebacks on pre-ordered products. Other fulfillment houses were just as technically equipped, but were used to working with bigger corporations and more established businesspeople.
* **Are they equipped to work with your customer set and product?** If you have international clientele, make sure the fulfillment house is able to process foreign characters. If you have an oddly shaped or very large product, make sure their machines can handle it.
* **What options do they have for expansion?** Are you looking for a shipping solution just for your crowdfunding batch, or will you want to keep sending product– in batches or continuously– into the future? Some fulfillment houses are designed to grow with you, with options for international warehousing, customer service, and more.
* **What will they do if… ?** Read the service agreement carefully. Make sure you understand what’s going on, and ask questions if you don’t. Here are a few more questions to think about:
 * What does the tracking interface look like?
 * What if an address is invalid?
 * What if the customer returns the product?
 * What happens if there is more product at the fulfillment house than there are orders?

###Cost
Of course, you’ll also want to know the cost– here are some good things to know about your product in order to ask for a quote:

* Quantity
* Distribution by country of international shipments
* Description of the product(s)
* Product size & weight
* Distribution of number of components per package
* Any special environmental considerations on your product (e.g. temperature, humidity, special electrostatic handling)

Also ask about any setup fees and how they handle receiving and warehousing.


###Final Thoughts
Setting up shipping and fulfillment takes a lot of time; start early. I began researching shipping and fulfillment six months before we planned to use a fulfillment house, and I’m glad I did.

By far, the most confusing, complicated, and expensive part of this is the international component, and I wish we had entered into it with more research behind us. However, I’m really glad we decided to launch worldwide; around 40% of our site’s pageviews are international, and a similarly high percentage of our crowdfunding backers were international as well. More importantly, a great deal of enthusiasm has reached us over Twitter and email from various countries, and it’s hugely exciting to us as a team to see interest in open source hardware and web-connected programmable devices worldwide.

Please reach out if you have questions!

Kelsey Breseman

[@selkeymoonbeam](https://twitter.com/SelkeyMoonbeam)

[kelsey@technical.io](mailto:kelsey@technical.io)]]></content:encoded>
    <wp:post_name>70520262063</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/70233816380</link>
    <pubDate>Mon, 16 Dec 2013 18:32:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[hiring]]></category>
		<category domain="tag" nicename="hiring"><![CDATA[hiring]]></category>
		<category domain="tag"><![CDATA[kevin mehall]]></category>
		<category domain="tag" nicename="kevin-mehall"><![CDATA[kevin mehall]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/70233816380</guid>
    <!--<wp:post_id>70233816380</wp:post_id>-->
    <wp:post_date>2013-12-16 15:32:00</wp:post_date>
    <wp:post_date_gmt>2013-12-16 23:32:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Technical Machine is Growing!</title>
    <description></description>
    <content:encoded><![CDATA[#####12/16/2013— [Jon McKay](http://blog.technical.io/search/jon+mckay)

Today, we’re happy to welcome [Kevin](http://kevinmehall.net) to his first day of work at Technical Machine!

![](https://31.media.tumblr.com/b967ddbf1ed9c79c3f880a77fdaafc9d/tumblr_inline_mxxaktjJ3E1s75tgz.jpg)

We originally met Kevin when he joined Olin College back in 2010 and were blown away by his talent and knowledge of both hardware and software. Since then he’s only honed his skills and already caught a few bugs in our firmware during his on-boarding process.

Kevin already has experience starting a company focused on making great developer tools. He co-founded [Nonolith Labs](http://www.nonolithlabs.com/) which makes an awesome little analog electronics multitool called the CEE. 

He will be working on improving our USB communications, helping Tim make the runtime faster and more robust, and give us the velocity to (hopefully) ship on time.

I’m really excited to have Kevin on the team and can’t wait to see the magic he works on Tessel.

–[Jon](https://twitter.com/jonmckay)]]></content:encoded>
    <wp:post_name>70233816380</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/70201028299</link>
    <pubDate>Mon, 16 Dec 2013 12:13:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[accelerometer]]></category>
		<category domain="tag" nicename="accelerometer"><![CDATA[accelerometer]]></category>
		<category domain="tag"><![CDATA[camera]]></category>
		<category domain="tag" nicename="camera"><![CDATA[camera]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/70201028299</guid>
    <!--<wp:post_id>70201028299</wp:post_id>-->
    <wp:post_date>2013-12-16 9:13:00</wp:post_date>
    <wp:post_date_gmt>2013-12-16 17:13:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Updates: Accelerometer, Camera, GPS</title>
    <description></description>
    <content:encoded><![CDATA[#####12/16/2013— [Updates](http://blog.technical.io/search/update)

We got in our newest batch of Tessels this week!

![](https://31.media.tumblr.com/bf5d0138c51db543a2924a913b2db89e/tumblr_inline_mxwsy7ziMK1s75tgz.png)

We're testing them now but it's likely that this will be the same design used in our production run.

We also got in 300 Accelerometers from our manufacturer. We'll be pushing more modules into production soon.

![](https://31.media.tumblr.com/7835c495eb208172bfaccfbdba9465a5/tumblr_inline_mxwsyslVIL1s75tgz.png)

#Modules
 
###GPS
The GPS module now has working firmware! Here is our first coordinate data:

![](https://31.media.tumblr.com/b7513d87c6f36f41b0f6d35d843e5711/tumblr_inline_mxwszcsUJL1s75tgz.png)

(Don't worry, I fixed the timestamp issue shown here.)
 
###Camera
It's been a while since we gave an update about the camera module, but here's a Tessel selfie we took with one of the cameras we're testing:

![](https://31.media.tumblr.com/b0c3d63dc62a52d52419005fbc74d09e/tumblr_inline_mxwszxIYGn1s75tgz.png)

The camera can send data over two different protocols, UART and SPI. SPI is much faster than UART as you can see from the signal readings we did.

This is sending an image at 38400 baud. It takes... a few seconds. Realistically this can probably go up to 115200 baud and have the transmission time cut down to ~1s.

![](https://31.media.tumblr.com/2c34f5c7d36cc2ad9df3861712c99a56/tumblr_inline_mxwt0hMwMq1s75tgz.png)

This is transmitting over SPI. It takes ~26ms with a 500KHz clock.

![](https://31.media.tumblr.com/761810e4a8792df608a9918b48c77e2d/tumblr_inline_mxwt0zN4NJ1s75tgz.png)

Sooo we’re going to be using SPI.

Till next time,

Jia, Kelsey, Eric, Jon, Tim

[@technicalhumans](twitter.com/technicalhumans)]]></content:encoded>
    <wp:post_name>70201028299</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/69599254087</link>
    <pubDate>Tue, 10 Dec 2013 12:08:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[learn to code]]></category>
		<category domain="tag" nicename="learn-to-code"><![CDATA[learn to code]]></category>
		<category domain="tag"><![CDATA[programming]]></category>
		<category domain="tag" nicename="programming"><![CDATA[programming]]></category>
		<category domain="tag"><![CDATA[node.js]]></category>
		<category domain="tag" nicename="nodejs"><![CDATA[node.js]]></category>
		<category domain="tag"><![CDATA[nodeschool]]></category>
		<category domain="tag" nicename="nodeschool"><![CDATA[nodeschool]]></category>
		<category domain="tag"><![CDATA[olin.js]]></category>
		<category domain="tag" nicename="olinjs"><![CDATA[olin.js]]></category>
		<category domain="tag"><![CDATA[olin]]></category>
		<category domain="tag" nicename="olin"><![CDATA[olin]]></category>
		<category domain="tag"><![CDATA[hourofcode]]></category>
		<category domain="tag" nicename="hourofcode"><![CDATA[hourofcode]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/69599254087</guid>
    <!--<wp:post_id>69599254087</wp:post_id>-->
    <wp:post_date>2013-12-10 9:08:00</wp:post_date>
    <wp:post_date_gmt>2013-12-10 17:08:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Zero to Tessel: Teach Yourself Node</title>
    <description></description>
    <content:encoded><![CDATA[#####12/10/2013— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

<p><span>At this point, I consider myself a connoisseur of online learning programs. Coursera, edX, Boundless, Codecademy, Khan Academy&ndash; I&rsquo;ve tried them all. Because I&rsquo;ve tested out many of these paths, I now feel qualified to offer you a three-step plan to JavaScript and Node.JS fluency&ndash; whether or not you plan to use these skills to work with Tessel. There are no prerequisites.</span></p>
<div align="center">
<p><span><span><br /><span></span><a href="nodeschool.io"><img height="156px;" src="https://lh3.googleusercontent.com/7WBa2UU01qNFzMRmE7Jzsmrs3t_GMuw8ku8jE-Dv9eTh47aZIP9VLUGfA8hrxwa1mI-ORsXfjv_K6uqXAVpfAxFQWdqSOPWpsht7rz_-verP5ybh9F71EIz_uw" width="591px;" /></a></span></span></p>
<p><em>(image via <a href="http://nodeschool.io/">nodeschool.io</a>)</em></p>
</div>
<p></p>
<ol>
<li>
<p><a href="http://www.codecademy.com/"><span>Codecademy</span></a><span> [~3 hours] for JavaScript syntax. If you&rsquo;ve never coded in JS before (or even never coded at all), head over to Codecademy and spend a few hours in the JavaScript lessons. You need to know about if statements, for loops, how to make a function. If you&rsquo;re new to JS but not to code, you could probably skip this step and just google things like &ldquo;JavaScript function&rdquo;, but it&rsquo;s nice to get in a bit of practice so you can recognize bad grammar in your code.</span></p>
</li>
<li>
<p><a href="http://nodeschool.io/#learn-you-node"><span>Nodeschool: learnyounode</span></a><span> [~2 days] is a nice transition. Nodeschool is an all-offline set of courses, where each lesson is a puzzle to complete in your terminal. Learnyounode will take you from a &ldquo;Hello World&rdquo; to parsing information from multiple websites asynchronously. If you focused, you could complete Learnyounode in two days.</span><strong> By the end of this, you&rsquo;ll know how to use Node and npm, and you&rsquo;ll be more than prepared to start hacking on Tessel.</strong></p>
</li>
<li>
<p><a href="http://olinjs.github.io/"><span>Olin.JS</span></a><span> [~8 weeks] is a class Tim and Jia created and taught last semester at Olin. All the lessons are </span><a href="https://github.com/olinjs"><span>here on github</span></a><span>, so you (like me) can work through them at your own pace. It will take your newfound knowledge of JS and Node and show you what it can really do. It&rsquo;s designed to take eight weeks, and will introduce you to git, Heroku, Express, JQuery, AJAX and many other useful tools: essentially, it&rsquo;s zero to hireable for Node. I recommend this course because you&rsquo;ll make a lot of cool projects, because you&rsquo;ll become a legit web programmer, and because Jia&rsquo;s writing is entertaining.</span></p>
</li>
</ol>
<p>You don&rsquo;t need to do step 3 in order to hack on Tessel. Really, you could just use example code to get it working, and by the time we release we&rsquo;ll have all the necessary information up on a start page. But to unleash its full potential, you&rsquo;ll probably want the full arsenal of web programming tools at your beck and call.</p>
<p></p>
<p><span>Happy coding!</span></p>
<p><span id="docs-internal-guid-06f9707c-ac58-082e-5f02-8c534371ba79"><span></span><span>Kelsey Breseman</span></span></p><a href="mailto:team@technical.io">kelsey@technical.io</a>
<br/>
<p><i>Enjoy this post? Based on this blog post, I'm curating a similarly styled but more detailed pathway for learning to code over at my website <a href="http://ifoundthemeaningoflife.com/learntocode">ifoundthemeaningoflife.com/learntocode</a>. Check it out! It contains everything from this post, plus a bit more.</i></p>]]></content:encoded>
    <wp:post_name>69599254087</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/69491145111</link>
    <pubDate>Mon, 09 Dec 2013 11:04:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[eric kolker]]></category>
		<category domain="tag" nicename="eric-kolker"><![CDATA[eric kolker]]></category>
		<category domain="tag"><![CDATA[power]]></category>
		<category domain="tag" nicename="power"><![CDATA[power]]></category>
		<category domain="tag"><![CDATA[current]]></category>
		<category domain="tag" nicename="current"><![CDATA[current]]></category>
		<category domain="tag"><![CDATA[power consumption]]></category>
		<category domain="tag" nicename="power-consumption"><![CDATA[power consumption]]></category>
		<category domain="tag"><![CDATA[electrical engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[electrical engineering]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/69491145111</guid>
    <!--<wp:post_id>69491145111</wp:post_id>-->
    <wp:post_date>2013-12-09 8:04:00</wp:post_date>
    <wp:post_date_gmt>2013-12-09 16:04:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Power work is never over</title>
    <description></description>
    <content:encoded><![CDATA[#####12/9/2013— [Eric Kolker](http://blog.technical.io/search/eric+kolker)

We get a lot of questions over email, so today my goal is to answer the question we get asked most frequently: how much power does the Tessel use?

More specifically, the question usually takes the form of:

   *“Hey, guys, just saw Tessel the other day and it looks sweet! I want to use it to build a [ six word description of the project ]! How much power will it use?”*

At which point half of me jumps for joy (cold calls about using Tessel are always appreciated) and half of me rolls up my sleeves. A complete answer touches on power consumption vs. current draw, the role USB can play, and things to be conscious of when designing a Tessellation.<br/>
<br/>

##Power vs. Current

As it turns out, power consumption is difficult to calculate, and often people actually care more about [current draw](http://en.wikipedia.org/wiki/Electric_current). In our case, the two are closely related:

*P = IV*

The [electric power](http://en.wikipedia.org/wiki/Electric_power) used by a circuit at [steady state](http://en.wikipedia.org/wiki/Steady_state) is equal to the current flowing through the circuit multipled by the voltage across it.

Although most devices are in truth *limited* by power consumption (rather than current output), it’s good practice to never draw more than a power supply’s rated current. On a good day, an overloaded supply will simply sag its voltage ([brown itself out](http://en.wikipedia.org/wiki/Brownout_(electricity))) until P=IV, but on a bad day it could become unstable and damage components connected to it. In order to avoid either scenario, most computers will cut power to a USB port if it draws more than 500 mA (2.5 W of power).<br/>
<br/>

##In a world ruled by USB...

Because the Tessel is most commonly powered off its USB connection, it turns out that current draw is usually the more important number to keep track of. As such, the data points I rattle off quickly are as follows:

* A bare Tessel, that is, one without any modules attached, draws about 110 mA of [quiescent current](http://en.wikipedia.org/wiki/Quiescent_current) .
* We ran a test with a 3.7 V, 350 [mAh](http://en.wikipedia.org/wiki/MAh) [LiPo](http://en.wikipedia.org/wiki/LiPo) battery where the Tessel pinged Tim’s laptop once per second and the device ran for almost exactly two hours.

The next information I offer is that use of the onboard WiFi radio, flash, and RAM can draw additional currents of 275 mA, 175 mA, and 100 mA, respectively. The astute mathematician will note that 110 + 250 + 175 + 100 > 500, which suggests that the Tessel should constantly be browning itself out and rebooting.

Although it is probably possible for the Tessel to do that to itself, the reality is that those current draw numbers, like many others, represent the peak draw of the chips in question, as opposed to average continuous draw. This suggests that:

1. The chips usually draw much less current than that (low quiescent current).
2. When the chips do draw that much, they do so for a very short period of time (high peak current).
3. Therefore, it’s very unlikely that the Tessel *will* do that to itself (we’ve never had it happen to us and triggering such event would likely require that high power WiFi transmission and complete wipes of both the flash and RAM happened exactly simultaneously).
4. [Bypass capacitors](http://en.wikipedia.org/wiki/Bypass_capacitor) on the power rail are really important! They help keep the 3.3 V and 5 V rails at their respective values, instead of sagging miserably during bursts of high current draw.

When you think about it, all of these make sense: the WiFi radio is only going to use a lot of power when it’s transmitting or working to decode an incoming packet and the memory will need the most power during read/write operations, both of which shouldn’t be happening all of the time (there’s a difference between “every time” and “continuously”). Last but not least, [always decouple your rails!](http://www.analog.com/static/imported-files/tutorials/MT-101.pdf)
<br/>
<br/>
##Plan accordingly

But I digress… Allow me to explain why I often need to take a minute to collect my thoughts before typing up a reply.

In order to estimate of power consumption, you need to know what goes into your device and how you plan to use each part. Here are a few key things you’ll want to figure out:


###What modules do you plan to use?

All of the modules are marked with their peak current draw, but the notion that “they don’t really draw that much” rule doesn’t always apply.

* Sensor modules (ambient, accelerometer, climate, GPS, camera) tend to use the same amount of current all the time.
* The nRF and BLE modules (low power wireless communication) use a modest amount of power over a short amount of time to transmit packets and little power for the rest of the time. 
* The GPRS module follows a similar pattern, but draws a truly exorbitant amount of current during transmission and has a higher quiescent current.
* Because RFID must generate an RF field in order to read tags, it has a relatively high quiescent current. Consumption during transmission is even higher.
* The relays we chose latch (save their state), so they only draw current when their state is switched, but don’t provide power to whatever they’re hooked up to. On a related note, please be very careful when dealing with wall power. Unplug everything before inserting anything into the relay module and wrap things up with electrical tape when you’re done.
* Servos connected to the servo module are powered externally, so their power draw is not included in the peak power consumption for the module.

**NOTE:** Although most hobby servos can be powered off 5 V, we strongly recommend against powering them off the Tessel’s 5 V rail (more on this 5 V rail later). The [inductive kick](http://en.wikipedia.org/wiki/Inductive_kick#Electrical_systems) from the motors could brown out or permanently destroy the Tessel. The module ships with a 5 V power adaptor for the servos. Please use it.


###Does your project have any moving parts?

This is typically only an issue if you have a relay or servo module onboard, but if it’s an issue it will likely be a serious one. I already mentioned the dangers of [inductive kick](http://en.wikipedia.org/wiki/Inductive_kick#Electrical_systems), and it’s worth noting that a standard hobby servo will stall out (maximum torque = maximum current draw here) at upwards of 1 A. If you know you need a motor of some kind, [do some research to figure out what kind of motor makes sense](http://en.wikipedia.org/wiki/Electric_motor#Comparison_by_major_categories) based on what you need to move, how quickly you need it to move, and how accurately you need it to move.
A good rule of thumb from the field of [robotics](http://www.youtube.com/watch?v=wE3fmFTtP9g) is that actuators use an order of magnitude (or three) more power than anything else in the system, so plan accordingly.


###Plan ahead

Figure out how often everything will be on vs. in standby. See if you can predict how often you’ll need to communicate with the web, and if that will require a long series of back and forths or a simple handshake. Is a live stream of data necessary all the time, or just occasional polling? Can you offload heavy processing or JSON parsing to a back end somewhere?

Finally, before you go spend hundreds of dollars on parts, I’ll remind you to start small and to iterate. If you’re new to hardware, keep in mind that things break and don’t always work the first time, so leave room in your budget for spares, replacements, upgrades, and jumper wires (somehow, they always seem to wander off).


###Using the 5 V in pins

Another thing to consider is where the power physically enters the Tessel. The Tessel can be powered either from the micro USB port, or through a pair of 5 V in pins right near it.

* Either way, the *absolute maximum voltage those pins can accept before you destroy your Tessel* is 5.5 V (I only mention this because officially the party line is 5 V, but some phone chargers output 5.1 V and I’d like to let you all know that using such an adapter will not trigger the apocalypse).
* The Tessel will use USB power preferentially over the power supplied to the 5 V in pins . This is likely only relevant if you will need a USB data connection to the device some, but not all of the time, and therefore cannot devote the USB port to power alone.
* Circuitry onboard the Tessel allows seamless switching between power sources.
* Last but not least (and sometimes very important), the external power that goes into the 5 V in pins is whatever you put there. That is, if you attach a 3.7 V LiPo, don’t expect to get 5V out (we’re good, but not that good). The only place on the board which exposes the 5 V rail (be it from the USB port or the 5 V in pins) is on the GPIO bank.


##In closing

The more you know about your design the easier it will be to estimate power consumption. My offhand guess for most Tesselations is that a 1A cell phone wall charger will be enough, and it’s not worth your time to worry about it any further. If you can’t afford to be tied down to a wall socket, grab a battery above 5,000 mAh and you should be able to run all day so long as you don’t have any moving parts, try to stream YouTube, or calculate the millionth digit of pi. If you have anything more complicated than that, or just want someone to bounce an idea off of, drop me a line to ask questions.

~e

[e@technical.io](mailto:e@technical.io)]]></content:encoded>
    <wp:post_name>69491145111</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/68900085629</link>
    <pubDate>Tue, 03 Dec 2013 14:43:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[layout]]></category>
		<category domain="tag" nicename="layout"><![CDATA[layout]]></category>
		<category domain="tag"><![CDATA[communications protocols]]></category>
		<category domain="tag" nicename="communications-protocols"><![CDATA[communications protocols]]></category>
		<category domain="tag"><![CDATA[infrared]]></category>
		<category domain="tag" nicename="infrared"><![CDATA[infrared]]></category>
		<category domain="tag"><![CDATA[ir]]></category>
		<category domain="tag" nicename="ir"><![CDATA[ir]]></category>
		<category domain="tag"><![CDATA[ambient]]></category>
		<category domain="tag" nicename="ambient"><![CDATA[ambient]]></category>
		<category domain="tag"><![CDATA[sensor]]></category>
		<category domain="tag" nicename="sensor"><![CDATA[sensor]]></category>
		<category domain="tag"><![CDATA[module]]></category>
		<category domain="tag" nicename="module"><![CDATA[module]]></category>
		<category domain="tag"><![CDATA[manufacturing]]></category>
		<category domain="tag" nicename="manufacturing"><![CDATA[manufacturing]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/68900085629</guid>
    <!--<wp:post_id>68900085629</wp:post_id>-->
    <wp:post_date>2013-12-03 11:43:00</wp:post_date>
    <wp:post_date_gmt>2013-12-03 19:43:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Ambient and Infrared, Layout Updates</title>
    <description></description>
    <content:encoded><![CDATA[#####12/3/2013— [Updates](http://blog.technical.io/search/update)

##Tessel
We sent out a new design for a test run about a week ago. 

![](http://media.tumblr.com/1dbbe162c3352e5d58b4b2f2966e5319/tumblr_inline_mx722kLNSr1s75tgz.png)

The major changes are:
UART is now on every port. A lot of commonly used chips use UART for communication. Every port now supports UART, SPI, and I2C communication protocols. We have hardware UART on three module ports and software UART on the fourth module port and the gpio port.
We have two different I2C ports. Port banks A, B, and the GPIO bank use one I2C port, while banks C and D use another. Because I2C uses the same two lines to talk to all the ports, this can create a problem if you want to hook up two of the same I2C devices to Tessel. For example, two Accelerometer modules would clash with each other trying to talk at the same time. Now one Accelerometer module can be hooked up to bank A and another can be hooked up to bank C without clashing.
USB power and external power now switches smoothly. In our last revision we had an issue where Tessel would brown out during power switches.

We’ll be getting back the new Tessels late this week/early next week from our manufacturer. <br/>
 <br/>
##Modules
###Ambient/Infrared
We’ve split up Ambient into two different modules, one for sound/visible light, and another for infrared (IR) sending/receiving. Everyone who ordered an Ambient module before now will get both the Ambient and the IR modules. 

We felt that combining these into one module stuck too many features together, and most people we talked to either wanted ambient sensing or IR transmissions. Our goal for Tessel is to make hardware abstractions that make sense, and combining low precision data (such as ambient) with data that needed signal processing (such as IR) felt that we were trying to do too many things at once.

Splitting the modules up frees up space on the ambient module, which we’re using to compute the “loudness” in hardware, as opposed to doing so in software. This means that the ambient sensor will let you quickly determine the ambient noise level or run your own algorithm on the incoming analog signal. 
 
###Bluetooth
We’ve made the switch from the BLE112a to the BLE113a module. The BLE113a is not only smaller in size, but it also has a lower power draw, so you have a little more wiggle room with your other modules. 
 
###Accelerometer
We sent out the Accelerometer about a month ago to a manufacturer for the production run. They’re done making them and are now testing them. We should get them back in the next week or so. If these turn out well, we’ll begin to do production runs of the other modules we’ve finished.

As always, you can see our progress here [http://tessel.io/status](http://tessel.io/status)

–Jon, Kelsey, Tim, Jia, and Eric<br/>
[team@technical.io](mailto:team@technical.io)]]></content:encoded>
    <wp:post_name>68900085629</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/68781598890</link>
    <pubDate>Mon, 02 Dec 2013 09:59:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[jia huang]]></category>
		<category domain="tag" nicename="jia-huang"><![CDATA[jia huang]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[pcb]]></category>
		<category domain="tag" nicename="pcb"><![CDATA[pcb]]></category>
		<category domain="tag"><![CDATA[manufacturing]]></category>
		<category domain="tag" nicename="manufacturing"><![CDATA[manufacturing]]></category>
		<category domain="tag"><![CDATA[gerber files]]></category>
		<category domain="tag" nicename="gerber-files"><![CDATA[gerber files]]></category>
		<category domain="tag"><![CDATA[seeed]]></category>
		<category domain="tag" nicename="seeed"><![CDATA[seeed]]></category>
		<category domain="tag"><![CDATA[seeedstudio]]></category>
		<category domain="tag" nicename="seeedstudio"><![CDATA[seeedstudio]]></category>
		<category domain="tag"><![CDATA[gold phoenix pcb]]></category>
		<category domain="tag" nicename="gold-phoenix-pcb"><![CDATA[gold phoenix pcb]]></category>
		<category domain="tag"><![CDATA[osh park]]></category>
		<category domain="tag" nicename="osh-park"><![CDATA[osh park]]></category>
		<category domain="tag"><![CDATA[ap circuits]]></category>
		<category domain="tag" nicename="ap-circuits"><![CDATA[ap circuits]]></category>
		<category domain="tag"><![CDATA[silver circuit]]></category>
		<category domain="tag" nicename="silver-circuit"><![CDATA[silver circuit]]></category>
		<category domain="tag"><![CDATA[Electrical Engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[Electrical Engineering]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/68781598890</guid>
    <!--<wp:post_id>68781598890</wp:post_id>-->
    <wp:post_date>2013-12-02 6:59:00</wp:post_date>
    <wp:post_date_gmt>2013-12-02 14:59:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Getting Custom PCBs for Prototyping</title>
    <description></description>
    <content:encoded><![CDATA[#####12/2/2013— [Jia Huang](http://blog.technical.io/search/jia+huang)

When we first started making hardware, we knew we needed custom printed circuit boards, but didn't exactly know how to go about getting them. I thought I'd just share some of the tools and resources we use for getting PCBs made.<br/>
<br/>
##PCB files

Most manufacturers will ask for Gerber files. These are the files that specify how each layer of the PCB should be made. These layers are then stacked together to form the PCB. From top to bottom, Gerbers are usually split into the following files:

* Top silk - the (usually) white informational text on PCBs
* Top paste - this is used if you have a stencil for the PCB. The top paste is laser cut out of a stencil and then put over the PCB and solder paste is put on top. Components are placed on top of the solder. The paste layer is useful if you have a bunch to make and don’t want to apply all the solder yourself.
* Top soldermask - this goes over the copper layers
* Top copper - the top signal layer
* Inner layers (if you have any) - inner layers are for ground, power, or extra signal layers.
* Bottom copper - bottom signal layer
* Bottom soldermask - same as the top soldermask
* Bottom paste - same as the top paste
* Bottom silk - same as the top silk

Additionally, if you have any holes, you'll need to have a drill file. 

The files for the accelerometer look like this:

![](http://media.tumblr.com/7ec72e0fb86c1716daae3f9fa3c5eb34/tumblr_inline_mx5mpniSo91s75tgz.png)

Note that this doesn't include the drill file even though the accelerometer has one. The bottom paste also isn't included since we don't have any components that need to be mounted from the bottom.

We use [Diptrace](http://www.diptrace.com/) for schematic & pcb layout. Then I use the [MCN Gerber viewer](http://www.mcn-audio.com/sharewares/index.html) to double check files before sending them out. As far as I know, MCN is the only native OSX gerber viewer. MCN has some issues displaying drill files so I also use [gerbv](http://gerbv.sourceforge.net/) to double check. Eric uses [Graphicode](http://www.graphicode.com/GC-Prevue) on Windows.<br/>
<br/>
##Manufacturing

We spent a while looking at different ways to source the custom printed circuit boards we needed. Different fabrication houses tend to specialize in different things, and vary in:

* lead time (a few days to a few weeks)
* number of boards needed
* quality

The price for the same board differs depending on the manufacturer and their setup. Depending on what we need to do (prototype, test run, side project), we'll use different manufacturers. Since most of our modules go through multiple revisions, it's not uncommon for us to use different fab houses at different stages of development for the same module.

Here are some of the PCB manufacturers we've used so far:<br/>
<br/>
###[AP Circuits](https://www.apcircuits.com/)

**Lead time:** 3 days

**Number of boards:** 2 or 4 boards. While you can order a lot more, we only do 2-4. Anything higher and we tend to use Seeed or Silver Circuits. 

**Quality:** Electrical testing isn't included, and sometimes we've had soldermasks shift. But for the turnaround time and price, it's a pretty good trade off.

If you want to forgo the silkscreen and the soldermask, AP circuits can make the boards in 1 day. AP Circuits also has very good engineering support. They've caught more than a few of my mistakes.<br/>
<br/>
###[Seeed Studio](http://www.seeedstudio.com/depot/services-c-70_71/?ref=side)

**Lead time:** 2.5 weeks

**Number of boards:** 10+

**Quality:** There's free electrical testing included, and Seeed usually makes extra boards in case some fail. 

Seeed also allows different colored PCBs at low volumes as well as great pricing for 4 layer boards. In addition, they also have a stencil service which is useful if your boards have a lot of pads.

Seeed also has an assembly service for 100+ units. <br/>
<br/>
###[Silver Circuits](http://www.custompcb.com/)

**Lead time:** 1.5 weeks

**Number of boards:** 4+

**Quality:** There's an option to include electrical testing, but I've never had any boards that were defective.

Silver Circuits also offers 1oz and 2oz copper layers at similar costs which is useful for our RFID module.<br/>
<br/>
###[OSH Park](http://oshpark.com/)

**Lead time:** 3 weeks

**Number of boards:** 3+. Must be a multiple of 3.

**Quality:** Never have had any issues with quality.

OSH park has automated design rule checks that it runs through as soon as you submit your files. Additionally it takes Eagle files directly as well as Gerbers.<br/>
<br/>
###[Gold Phoenix PCB](http://www.goldphoenixpcb.com/)

*Disclaimer:* I haven't used Gold Phoenix for Tessel, but I've used them before for other boards so I thought I might as well include them in this list.

**Lead time:** 2-3 weeks

**Number of boards:** 20+. They can do any number, but it's probably not worth it unless you're doing at least 20 boards.

**Quality:** Optional electrical testing, though I've never had any issues with getting working boards. 

Like Seeed, Gold Phoenix also has assembly services though I've never used them for that.<br/>
<br/>

-Jia<br/>
[jia@technical.io](mailto:jia@technical.io)]]></content:encoded>
    <wp:post_name>68781598890</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/68067410677</link>
    <pubDate>Mon, 25 Nov 2013 10:52:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[women in tech]]></category>
		<category domain="tag" nicename="women-in-tech"><![CDATA[women in tech]]></category>
		<category domain="tag"><![CDATA[women in stem]]></category>
		<category domain="tag" nicename="women-in-stem"><![CDATA[women in stem]]></category>
		<category domain="tag"><![CDATA[feminism]]></category>
		<category domain="tag" nicename="feminism"><![CDATA[feminism]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[programming]]></category>
		<category domain="tag" nicename="programming"><![CDATA[programming]]></category>
		<category domain="tag"><![CDATA[company culture]]></category>
		<category domain="tag" nicename="company-culture"><![CDATA[company culture]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/68067410677</guid>
    <!--<wp:post_id>68067410677</wp:post_id>-->
    <wp:post_date>2013-11-25 7:52:00</wp:post_date>
    <wp:post_date_gmt>2013-11-25 15:52:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>The Reluctant Programmer: Feminism and Tech</title>
    <description></description>
    <content:encoded><![CDATA[#####11/25/2013— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

<p><span>I&rsquo;m not an absolute novice on code&hellip; but my credentials are pretty bad. I took Visual Basic in high school, played around a bit with Python and Arduino during college, and really sucked at learning Ruby on Rails ...twice. My major was in neural engineering (which is some combination of bio, electrical theory, and MATLAB/neural modeling); I had never programmed in JavaScript. I joined Technical Machine because they needed a tech-savvy writer with some varied HR and maker background: somebody who could focus on some of the non-technical development aspects of a business.</span></p>
<p><span>It turns out there are a lot of components to a business that don&rsquo;t have to do with making the product. These aspects of my job are important (designing the logistics of getting products delivered, managing HR and payroll, continuing to have a media presence), but I realized pretty quickly that I would be more useful if I understood more about JavaScript and Node.js&ndash; both to improve my ability communicate usefully about what we do, and so I could help with technical development if the need arose. So I looked around online and started learning.</span></p>
<p><span>It&rsquo;s a difficult thing for me to come out and write about my coding deficiencies. I like the logic puzzles of coding, but not the screen time. The decision not to pursue coding as a primary interest is one I made years ago. I didn&rsquo;t want the kind of expertise that limits me to sitting still all day, staring at a screen. But I&rsquo;ve reconsidered&ndash; partly due to the advent of the </span><a href="http://www.instructables.com/id/Treadmill-Desk/"><span>treadmill desk</span></a><span> (I don&rsquo;t have one yet, but I will someday), and partly because the refusal to learn code feels increasingly like an intentional lack of agency in the modern world. And, well, feminism. I think it got to me.</span></p>
<p><span>I can&rsquo;t help but feel like a traitor to women in tech when I, an engineer by training, describe what I do as the &ldquo;non-technical&rdquo; work. Though I&rsquo;m proud of what I&rsquo;ve done for Technical Machine, I cringe to describe what I do&ndash; usually because I&rsquo;m explaining it to engineers, who don&rsquo;t really go in for &ldquo;marketing&rdquo; (my excuse to pursue writing) and who don&rsquo;t adequately respect the difficulties of learning business and logistics (speaking as an engineer who didn&rsquo;t). And because I&rsquo;m a woman.</span></p>
<p><span>I don&rsquo;t think it&rsquo;s possible to graduate from </span><a href="http://bostinno.streetwise.co/2013/08/24/olin-college-class-of-2017-women-in-stem/"><span>an engineering college that&rsquo;s intentionally half women</span></a><span> and not be aware of terms like &ldquo;gender gap&rdquo; and </span><a href="http://en.wikipedia.org/wiki/Imposter_syndrome"><span>&ldquo;imposter syndrome&rdquo;</span></a><span>. So when I arrive at a code conference, I am not surprised to feel like a fake. It doesn&rsquo;t happen immediately; the conferences are interesting, and I forget sometimes how odd it is to be a woman in tech. But at some point I always remember. Reflexively, I look around and seek out other females in the room: one&hellip; two&hellip; three of us! No, four! The numbers are not always that skewed, but they usually are. And then, instantly, I feel like a representative. Worse, I feel like a false hope. Because I really don&rsquo;t belong: is it still imposter syndrome if you really are an imposter?</span></p>
<p>I don&rsquo;t code, not really. I&rsquo;m there representing Tessel, introducing my teammates&rsquo; impressive technical work. If anybody asks me about Tessel and how it runs, I&rsquo;ve got that down pat. I&rsquo;ve seen it work; I&rsquo;ve run the code; I looked up any relevant terms I didn&rsquo;t already know. Going to all of these conferences (Wikipedia at the ready), I&rsquo;ve basically had a crash course in what&rsquo;s important in the web development scene. And I haven&rsquo;t felt discriminated against at the conferences. There aren&rsquo;t very many women speaking, but there also aren&rsquo;t very many women attending, so it&rsquo;s not a surprise.</p>
<p><span>People who approach me don&rsquo;t pre-assign me a coding level based on my gender. Quite the reverse; they overestimate me, assuming I have at least as much experience as they have. So when they ask me, inevitably, &ldquo;What do you do for Technical Machine?&rdquo;, I feel like a bit of a letdown. I preface my answer with, &ldquo;I&rsquo;m an engineer, but&hellip;&rdquo;</span></p>
<p>And then, when I say whatever comes next (&ldquo;I&rsquo;m working on marketing.&rdquo; &ldquo;I&rsquo;m doing business development at the moment.&rdquo; &ldquo;I&rsquo;m doing a lot of the non-technical work.&rdquo;), I feel instead like I&rsquo;m saying, &ldquo;I&rsquo;m just along for the ride.&rdquo; Hair flip, ditzy smile. And in my head, I silently apologize to all four of the other women in the room, who are probably real programmers.</p>
<p><span>Perhaps, if I don&rsquo;t code, I don&rsquo;t belong at coding conferences. No matter that by now I&rsquo;m excited by the open source community, that I learn a huge amount of code theory when I listen to good speakers. Regardless that attending helps me fill my community engagement role by putting Tessel in the hands of the people it&rsquo;s built for. If I don&rsquo;t actually follow through and write programs myself, do I belong at a programming conference?</span></p>
<p><span>So that&rsquo;s part of the reason I&rsquo;m learning to code.</span></p>
<p><span>I can&rsquo;t decide how I feel about that. I know that feminism isn&rsquo;t about pushing women into fields they don&rsquo;t want to enter. But I feel like a traitor to all the women who had a much harder time entering STEM fields if I arrive at a technical conference with below-average knowledge of the subject. And in the modern world, </span><a href="http://code.org/"><span>code literacy is increasingly like, well, literacy</span></a><span>.</span></p>
<p><span>I&rsquo;m not interested in code for code&rsquo;s sake, but I do like what comes with it: When I&rsquo;m not working on code projects far above my head, solving logic instead of syntax is a delight. At conferences, I&rsquo;ve been inspired: I now have opinions about open source and the indie web. Independent of my gender, I need to program to have a voice in these communities. And of course, to best engage the community that&rsquo;s growing up around Tessel, I need to speak JavaScript&ndash; the language of the web.</span></p>
<p><span>Kelsey Breseman</span></p>
<p><span></span><a href="https://twitter.com/SelkeyMoonbeam">@selkeymoonbeam</a></p>
<p><span id="docs-internal-guid-46977476-8d38-c915-248a-e68f6f793f87"><a href="mailto:kelsey@technical.io"><span>kelsey@technical.io</span></a></span></p>
<p></p>
<p><img src="http://media.tumblr.com/eaf1d40c3b40577c49ff727ad0c65349/tumblr_inline_mwtto8TbHW1s75tgz.jpg" /></p>
<p></p>]]></content:encoded>
    <wp:post_name>68067410677</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/67667723038</link>
    <pubDate>Thu, 21 Nov 2013 11:58:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[eric kolker]]></category>
		<category domain="tag" nicename="eric-kolker"><![CDATA[eric kolker]]></category>
		<category domain="tag"><![CDATA[electrical engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[electrical engineering]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[hardware hacking]]></category>
		<category domain="tag" nicename="hardware-hacking"><![CDATA[hardware hacking]]></category>
		<category domain="tag"><![CDATA[toolbox]]></category>
		<category domain="tag" nicename="toolbox"><![CDATA[toolbox]]></category>
		<category domain="tag"><![CDATA[tools]]></category>
		<category domain="tag" nicename="tools"><![CDATA[tools]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/67667723038</guid>
    <!--<wp:post_id>67667723038</wp:post_id>-->
    <wp:post_date>2013-11-21 8:58:00</wp:post_date>
    <wp:post_date_gmt>2013-11-21 16:58:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Inside Eric's Toolbox: An Electrical Engineering Kit</title>
    <description></description>
    <content:encoded><![CDATA[#####11/21/2013— [Eric Kolker](http://blog.technical.io/search/eric+kolker)

In engineering we talk a lot about tools. Some people have a favorite collection of software, some a metaphorical belt filled with tips, tricks, and techniques, and others a literal box or lab bench filled with instruments. In my experience, a good engineer not only maintains all three, but seeks to expand his or her collection and share it with peers on a daily basis.
 
Today I’d like to share what I keep in my literal toolbox and provide some commentary and backstory for the tools I carry with me. Expect some tangents and links to more Wikipedia pages, too.

![](http://media.tumblr.com/e8d2048c96ac3240be222e09b5e8ca3c/tumblr_inline_mwlrsj1ggE1s75tgz.jpg)

![](http://media.tumblr.com/fcb31e83e18938f428634824b2db5219/tumblr_inline_mwlry2Ny2M1s75tgz.jpg)
 
Figure 1: The box. Starts closed, gets opened, returns to closed configuration for transport.
#Boxception<br/>
<br/>
Unpacking from the top down, the first thing out is a smaller box.

![](http://media.tumblr.com/1333e1bae3c7946b15cbc1d18753eff9/tumblr_inline_mwlsiwAaEK1s75tgz.jpg)

Figure 2: box of hand tools, closed

The box contains the things I use most often: a plethora of small hand tools. In it I somehow manage to stash:

+ Wire strippers
+ Needle-nose pliers
+ Hemostats
+ A spool of 30-gauge wire
+ A spool of solder wick
+ A spool of solder
+ A loupe
+ Three sets of tweezers (yes, I use them all)
+ Four dental picks (ditto)
+ An assortment of connectors in various states of dismemberment
+ Some small plastic bags
+ A few scraps of wire, heat shrink, and other miscellaneous parts

![](http://media.tumblr.com/a1d054ad09e66d00315786a2d70c058d/tumblr_inline_mwlrx33Ikg1s75tgz.jpg)

Figure 3: box of hand tools, open<br/>
<br/>
##Big things with two handles<br/>
<br/>
![](http://media.tumblr.com/918f077773342325bcca70871cbc01f5/tumblr_inline_mwlrvgXVV91s75tgz.jpg)

Figure 4: Left to right: wire strippers, needle nose pliers, and hemostats

The wire strippers I use for, well, stripping the insulation off of copper wire. I use them only and exclusively on copper because otherwise I would risk  [plastically deforming](http://en.wikipedia.org/wiki/Plastic_deformation#Plastic_deformation) the tool and [ruining it](http://www.jewelrymakingdaily.com/cfs-filesystemfile.ashx/__key/CommunityServer.Components.ImageFileViewer/CommunityServer.Blogs.Components.WeblogFiles.daily/5850.ruined_2D00_cutters.JPG_2D00_550x0.jpg). Side note: I used the word "maintain" earlier not only imply that you should keep a kit of tools, but also to hint that good tools warrant, and often require, good care. But I digress: never use wire cutters or wire strippers on anything other than hookup wire. Headers, nails (tack, finger, or toe, it makes no difference), small steel shafts, etc. are not to be cut with my tools.

Needle-nose pliers are great for pretty much everything. I like these in particular because they have good grips (compliant but not too soft and not the kind that dry your hands out or cause blisters), close evenly, and are *lightly* textured at the ends. They’re also a good size.

[Hemostats](http://en.wikipedia.org/wiki/Hemostat) (point of interest: they’re supposed to be used to clamp arteries during open heart surgery) are a new addition to the box, and are useful because they ratchet shut and don’t let go. I often use them to hold things in place or grab onto tiny wire when I strip it.<br/>
<br/>
##Things directly related to soldering<br/>
<br/>
![](http://media.tumblr.com/373d0b2b55438c6e55d59870cb2e2f7b/tumblr_inline_mwls48zbGg1s75tgz.jpg)

Figure 5: Left to right: 30 gauge wire, solder wick, solder, and a loupe

This tiny spool of tinier wire is what lets me hack boards with [surface mount (SMT)](http://en.wikipedia.org/wiki/Surface-mount_technology) parts. Thirty [gauge](http://en.wikipedia.org/wiki/Wire_gauge) (technically 30 [AWG](http://en.wikipedia.org/wiki/American_wire_gauge)) is small enough that I can attach it to a tiny pad, but big enough that it can actually be manipulated without a microscope. This particular spool is insulated with plastic (as opposed to enamel-coated [magnet wire](http://en.wikipedia.org/wiki/Magnet_wire) which is a royal pain to strip), so I can run it all over the board without worrying about shorting things out, but strip off the insulation easily (with heat, even, if need be).

Solder wick, sometimes called solder/copper braid, is used to [desolder](http://en.wikipedia.org/wiki/Desoldering) (mop up solder) by following these easy steps:

1. Place wick on affected area
2. Place soldering iron on wick (on affected area)
3. Wait until solder in affected area becomes molten (you’ll see smoke rise when the wick’s rosin flux melts)
4. Mop up molten metal
5. Remove tools from affected area
6. Feel like a boss because your ugly solder job is gone

Up close, this stuff is a flat, woven strap made of tiny copper wires. It comes in different thicknesses, but I generally like think stuff so I can be precise with my solder removal.

Not all [solder](http://en.wikipedia.org/wiki/Solder) is created equal. There are a [myriad of different blends](http://en.wikipedia.org/wiki/Solder#Solder_alloys) of tin and lead (and others), [flux](http://en.wikipedia.org/wiki/Flux_(metallurgy)) and no flux, fat and skinny, etc. My preferred blend is [63/37](http://en.wikipedia.org/wiki/Solder#Lead_solder) (%tin, %lead by weight, which is the [eutectic](http://en.wikipedia.org/wiki/Eutectic_point) ratio for the metals, and corresponds to the lowest melting temperature for the alloy), [rosin](http://en.wikipedia.org/wiki/Rosin) core, and super thin. It’s one step below good [solder paste](http://en.wikipedia.org/wiki/Solder_paste) for precise SMT work.

The [loupe](http://en.wikipedia.org/wiki/Loupe) is effectively a magnifying glass that sits in your eye socket. I first ran into these guys when I took a photography class (we used ‘em to look at [negatives](http://en.wikipedia.org/wiki/Negative_(photography)) before making [prints](http://en.wikipedia.org/wiki/Photographic_paper)). If you don’t have a [microscope](http://www.amazon.com/AmScope-3-5X-90X-Binocular-Stereo-Microscope/dp/B006QN5T5G/ref=sr_1_6?s=photo&srs=3016947011&ie=UTF8&qid=1384964024&sr=1-6&keywords=amscope) and need to make sure a board looks good (all the solder joints are [nice](http://learn.adafruit.com/adafruit-guide-excellent-soldering/common-problems)ly connected, [components are properly seated](http://www.nordson.com/en-us/divisions/efd/Literature/White-Papers/Solder/Nordson-EFD-Tombstone-Troubleshooting.pdf), etc.), you’ll want one of these and a good flashlight to see what’s up.<br/>
<br/>
##Tweezers<br/>
###(aka “small things with a debatable number of handles”)<br/>
<br/>
![](http://media.tumblr.com/28db12c77e7e8e45286e6bc6a3e3d9d3/tumblr_inline_mwls5bwEgy1s75tgz.jpg)

Figure 6: Tweezers!

Each pair of tweezers is so important that it deserves its own paragraph. Left to right:

[These babies](http://www.amazon.com/gp/product/B006RBAHWM/ref=oh_details_o06_s00_i00?ie=UTF8&psc=1) are my go-to. They have a long pointed tip, are acid resistant and anti-magnetic, are lightweight, and have a very abrupt taper at the end. The last two characteristics are especially important when I use them under a microscope because they help me know exactly where my fingers are on the tool at all times.

[These next guys](http://www.amazon.com/gp/product/B001HBVFW8/ref=oh_details_o06_s01_i00?ie=UTF8&psc=1) are called “reverse action tweezers” because when you pinch they open up, rather than close down. These aren’t super useful for surface mount work because they’re so big, but are great for holding “normal” size wire (~24 AWG) or through-hole components in place when I solder.

[The last pair of tweezers](http://www.amazon.com/gp/product/B0015T787I/ref=oh_details_o06_s02_i00?ie=UTF8&psc=1) is probably the most expensive tool in my box that doesn’t use electricity. They’re made of stainless steel, are corrosion resistant, anti-magnetic, and are designed specifically for SMT soldering (and surely give +5 Dexterity). The shape of the tines lets me apply pressure to chips evenly along the sides (crucial for precise placement) without hitting other components on the board (essential for densely-packed boards). When you turn them sideways (so the tines are vertical), you can grab the chip perpendicularly to the board and still see everything in the microscope.<br/>
<br/>
##Dental picks<br/>
<br/>
![](http://media.tumblr.com/0d742b9987331f61493690d6bde82fb0/tumblr_inline_mwls64d2Ag1s75tgz.jpg)

Figure 7: Dental picks

Unlike the tweezers, [these](http://www.amazon.com/gp/product/B000SVMJDC/ref=oh_details_o06_s00_i02?ie=UTF8&psc=1) dental picks are all pretty much the same (sorry to disappoint). Some have pointier ends or are better shaped for some specific task, but all are used for some combination of scraping, pushing, or cleaning boards or chips. Because they have all come into contact with lead, I can no longer recommend that they be used to clean teeth.<br/>
<br/>
##Miscellaneous smallbox-dwellers<br/>
<br/>
![](http://media.tumblr.com/164f0b90decd83c6c91b46f35e2a257a/tumblr_inline_mwls6ydUjm1s75tgz.jpg)

Figure 8: Miscellaneous occupants of my meta-toolbox

This is an odd assortment of stuff. Left to right, top to bottom we have a (probably broken) RFID IC, the cover for one of my super swank multimeter probes (read on!), [SMA connectors](http://en.wikipedia.org/wiki/SMA_connector), two small plastic bags, [heat shrink](http://en.wikipedia.org/wiki/Heat_shrink), and some black wires (for ground, should I need ‘em).

SMA connectors are industry standard RF (radio frequency) connectors. They belong to a family of connectors called “[coaxial](http://en.wikipedia.org/wiki/Coaxial_cable)”, whose name comes from the arrangement of the inner and outer conductors (the latter, a ring in cross-section, should always be used for ground). I keep these particular connectors around because 1) connectors in general are expensive (these were maybe $3 each, but [some are truly pricey](http://www.digikey.com/product-search/en?pv697=10&FV=fff40016%2Cfff80519&k=lemo&mnonly=0&newproducts=0&ColumnSort=0&page=1&quantity=0&ptm=0&fid=0&pageSize=500)) and 2) because they have been modified (read: I broke off some pieces off of each one) so they’re easy to attach to boards quickly for the purpose of testing something.<br/>
#Scopes and meters<br/>
<br/>
##A tiny oscilloscope<br/>
<br/>
![](http://media.tumblr.com/9e83c8c8343408da3b873ea1a81eb90f/tumblr_inline_mwls91mZ2d1s75tgz.jpg)
 
Figure 9: DSO Nano with probes plugged in and the box it comes in

One holds a [DSO Nano](http://www.seeedstudio.com/depot/dso-nano-v2-p-681.html), which is a pocket-sized [oscilloscope](http://en.wikipedia.org/wiki/Oscilloscope)/[function generator](http://en.wikipedia.org/wiki/Function_generator) made by Seeed Studio. As far as scopes go it's certainly a budget model, but when you need a scope you need a scope, regardless of how small.  I use it when I'm in a pinch, am too lazy to walk to the lab, or have simply run out of channels on a larger and less portable scope. It's also nice to have on hand because it's battery powered, and therefore it [floats](http://en.wikipedia.org/wiki/Floating_ground) (in the electrical sense, that is: it has no connection to Earth ground, which could get you into nasty trouble when dealing with things that plug into the wall).<br/>
<br/>
 ##Multimeters and probes<br/>
<br/>
![](http://media.tumblr.com/bd051ab8d8274371405c49b478ec3f4d/tumblr_inline_mwls9uodwF1s75tgz.jpg)

Figure 10: multimeters and probes.

My old, crappy multimeter and the thoroughly destroyed probes it came with, the probes for a new multimeter, and [the new multimeter](http://www.amazon.com/Mastech-MS8268-Digital-Manual-Multimeter/dp/B0050LVFS0/ref=sr_1_3?ie=UTF8&qid=1384966350&sr=8-3&keywords=multimeter) with my [fancy probes](http://www.amazon.com/Pomona-6342-Precision-Electronic-Replaceable/dp/B00COAYP4G/ref=sr_1_4?ie=UTF8&qid=1384966623&sr=8-4&keywords=pomona+6342). The old meter still mostly works, so I keep it around. The new one is honestly untested, as are the probes it came with, but the probes installed in it are the best. Their tips are spring loaded (called “[pogo pins](http://en.wikipedia.org/wiki/Pogo_pin)” in the art), interchangeable, stupid sharp, and gold-plated, which make them good for getting a reliable connection on tiny surface mount parts. They even have their own [datasheet](http://www.pomonaelectronics.com/pdf/d6341-6342-6375_100.pdf)! The downside is that, as probes go, they have a super high resistance (maybe 0.6 Ohms or so).<br/>
#Tape<br/>
<br/>
![](http://media.tumblr.com/3fe5fb52cc27169e6d934dc26f1e8787/tumblr_inline_mwlsan2QJ31s75tgz.jpg)

Figure 11: Tape!

I carry [Kapton](http://en.wikipedia.org/wiki/Kapton), Crapton, and electrical tapes.

Kapton is great: it’s corrosion-resistant, has excellent thermal properties, is a fantastic insulator, stays sticky even when abused, and is rated by its thickness, so even mechanical engineers appreciate it. [It’s a little pricey, though](http://www.digikey.com/product-search/en?pv700=78&FV=fff4003b%2Cfff800a1&k=kapton&mnonly=0&newproducts=0&ColumnSort=0&page=1&quantity=0&ptm=0&fid=0&pageSize=500). I use it to cover up wire hacks (when I use that blue wire) and strain-relieve wires I’ve soldered onto a board temporarily for testing.

Crapton is fake kapton. It’s still an insulator (read: when something has been taped up, it can no longer be poked), but I don’t trust it on the other counts. Buyer beware: a lot of the cheap kapton on Amazon is really crapton, which is how I wound up with [this roll](http://www.amazon.com/gp/product/B004QVU9UU/ref=oh_details_o08_s00_i00?ie=UTF8&psc=1).

Electrical tape is, well, nonconductive. More often than not, I use the stuff to secure boards to the lab bench when I’m soldering them. Electrical tape is good for that because it ‘s a little stretchy, so I can keep the tape under tension to make sure the board doesn’t slide around.<br/>
#Soldering paraphernalia<br/>
<br/>
![](http://media.tumblr.com/d49bd6b69eeb3f51e724b584b3b85fee/tumblr_inline_mwlsbzUBrV1s75tgz.jpg)

Figure 12: An itty-bitty soldering iron and some syringe tips/needles.

At 12 Watts, [this iron](http://www.amazon.com/Weller-WM120-120v-Pencil-Soldering/dp/B0000WT586) is truly puny ([even the inexpensive industrial grade ones are usually 60 W, and they do as high as 240 W](http://www.apexhandtools.com/brands/weller/index.cfm?model_list=1&att_id=WEL003&att1=Soldering%20Stations&att2=Industrial%20Soldering%20Stations) before you start to get to plumbing gear); you can’t beat the portability.
The needles go on the ends of syringes of solder paste, which are stored in a refrigerator (we probably confused some people at Highland this summer…).

The needles allow you to apply paste super precisely to the tiny pads of [obnoxious SMT chips](http://en.wikipedia.org/wiki/QFN), but they often clog, so it’s good to keep extras on hand.<br/>
#Miscellaneous debugging tools<br/>
<br/>
![](http://media.tumblr.com/d0288d685a0c2d28cbc6c01010ebea7b/tumblr_inline_mwlsd6td181s75tgz.jpg)

Figure 13: Assorted jumper wires, a big electrolytic capacitor, a bag of grippy things, a binder clip, a ruler, and a Bus Pirate.

+ Jumper wires are just generally good to have around when debugging
+ Same goes for a decently sized capacitor. This particular capacitor (220 microfarads, 50V, aluminum [electrolytic](http://en.wikipedia.org/wiki/Electrolytic_capacitor)) helped me debug Tessel’s power input circuitry.
+ The grippy things are like small versions of [those robot hands they sell at science museums](http://ii.worldmarket.com/fcgi-bin/iipsrv.fcgi?FIF=/images/worldmarket/source/22421_XXX_v1.tif&wid=2000&cvt=jpeg), but for circuits; they’re used to grab onto unsuspecting wires, pins, or leads so that you can measure the voltage there. Lots of different tools come with these kinds of things, but [these particular ones](http://www.testpath.com/Items/SMT-IC-Test-KlipChip-Adapter-Each-123-642.htm) are made by [Tektronix](http://www.tek.com/datasheet/smk4-%E2%80%A2-smg50-%E2%80%A2-surefoot%C2%AE-%E2%80%A2-st501-%E2%80%A2) (one of the big test equipment manufacturers, and a company known for its analog oscilloscopes) and are designed to be used on SMT parts. In short, they’re the best grippy things I’ve come across with their long, skinny necks and super strong grip. There’s a reason I have so many of them.
+ Binder clips hold stuff, keep bags closed to keep moisture-sensitive parts dry, etc.
+ This ruler is open source! No, really. It also happens to have metric/imperial conversion charts, PCB spacing guidelines, hole sizes, and a whole slew of other useful information.
+ The [Bus Pirate](http://dangerousprototypes.com/docs/Bus_Pirate) (and cable assembly) is a piece of OSHW that’s essentially the Rosetta Stone for communication with embedded devices. You tell it what you want to say and what protocol to use and it translates. Works with OSX and Linux and is available from [Dangerous Prototypes (the creators) through Seeed Studio](http://dangerousprototypes.com/docs/Bus_Pirate) and [SparkFun](https://www.sparkfun.com/products/9544).<br/>
#Knife<br/>
<br/>
![](http://media.tumblr.com/06727bfa965c6a7d9f375fe52cf50e6b/tumblr_inline_mwlsefyjxs1s75tgz.jpg)

Figure 14: Cardsharp, aka TSA bait

This knife usually lives in my pocket, but bears mention because I truly bring it almost everywhere. The blade is good (medical-grade stainless which I keep sharp), but the handle is a little weird when you unfold it.<br/>
#Cables and boards<br/>
<br/>
##USB Cables<br/>
<br/>
![](http://media.tumblr.com/d247dcb8db47b8b639cb921b2f5f2c74/tumblr_inline_mwlseyKaqa1s75tgz.jpg)

Figure 15: USB cables

I have a bunch of USB cables. The ones in this picture are A to B and A to micro, and I use them to talk to an Arduino Uno and Tessels, respectively. The two in the little box are the same kind that our Beta backers get (whoo colors!).<br/>
<br/>
##Arduinos and Tessel modules<br/>
<br/>
![](http://media.tumblr.com/d2b76fb7063ba718c27fd139dda079c0/tumblr_inline_mwlsfjXrj11s75tgz.jpg)

Figure 16: a handful of modules and an esoteric Arduino

Tessel modules (RFID, Ambient, and GPS), an [Arduino Pro Mini](https://www.sparkfun.com/products/11114), and an [FTDI USB to serial adapter](https://www.sparkfun.com/products/9873) + mini USB cable. This particular Arduino is great because, unlike the Uno and the Mega (which I have but don’t always carry with me), it’s a 3.3V device (so’s the Tessel). I use it to test and debug modules without worrying about breaking the module with a 5V signal. The downside to the device is that it needs the external USB to serial adapter in order to be programmed.<br/>
<br/>
##Tessel (of course)<br/>
<br/>
![](http://media.tumblr.com/dded7befa8a40fafe4b5c39c391814cf/tumblr_inline_mwlsg3aNiq1s75tgz.jpg)

Figure 17: my Tessel

Last but not least, my Tessel (and yet another micro USB cable). This particular board has been hacked so that it uses an external antenna, and I’ve been using it to test the range at which Tessels can connect to WiFi. Perhaps “hacked” is a strong word: the current version of the board has the footprint for an [MMCX](http://en.wikipedia.org/wiki/MMCX) connector (the smallest, most robust RF connector I know of) on it so that it’s easy to swap to a more sensitive antenna. Here I’ve attached an [MMCX to SMA adapter from SparkFun](https://www.sparkfun.com/products/285) to connect to a 2.4 GHz WiFi antenna.


...And that just about does it. The old school EE in me feels compelled to also mention the concept of a good [lab notebook](http://en.wikipedia.org/wiki/Lab_notebook) (there are actually some interesting legal reasons here) in which you date every page and write only in pen...and that I almost always use a [fountain pen](http://www.amazon.com/gp/product/B002YQ8A4G/ref=oh_details_o01_s00_i00?ie=UTF8&psc=1). The rest of me would like to remind our readers that I am not, in fact, an old man.

~e<br/>
[e@technical.io](e@technical.io)

P.S. Even though studies overwhelmingly show that learning by doing is the best way to retain information, good whitepapers and [lectures](http://www.youtube.com/watch?v=ji5_MqicxSo) still have their place. [Here’s](https://www.dropbox.com/sh/lg3g1esl7p9pq5l/e4tOX1I05a) a link to my personal stash of application notes and reference guides from a few of the big players in the electrical engineering space. The trove grows with time, and grows fastest when I’m building exciting new things. Enjoy!]]></content:encoded>
    <wp:post_name>67667723038</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/67472869771</link>
    <pubDate>Tue, 19 Nov 2013 11:30:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[tim ryan]]></category>
		<category domain="tag" nicename="tim-ryan"><![CDATA[tim ryan]]></category>
		<category domain="tag"><![CDATA[open source]]></category>
		<category domain="tag" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="tag"><![CDATA[monetization]]></category>
		<category domain="tag" nicename="monetization"><![CDATA[monetization]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
		<category domain="tag"><![CDATA[company culture]]></category>
		<category domain="tag" nicename="company-culture"><![CDATA[company culture]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/67472869771</guid>
    <!--<wp:post_id>67472869771</wp:post_id>-->
    <wp:post_date>2013-11-19 8:30:00</wp:post_date>
    <wp:post_date_gmt>2013-11-19 16:30:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Monetizing Open Source</title>
    <description></description>
    <content:encoded><![CDATA[#####11/19/2013— [Tim Ryan](http://blog.technical.io/search/tim+ryan)

Free and Open Source Software helped shape the growth of software development. Giving users the freedom to modify and control their own devices, as well as contribute freely to their development, is uniquely possible in this industry. Even today's fashionable litmus test for hiring (["Github is My Resume"](http://pydanny.blogspot.com/2011/08/github-is-my-resume.html)) measures open source contributions as a proxy for developer skill.

Open source is such a strong ideology that the first time someone asked "How are you going to make money off of open source?" I stuttered. The question they implied was, "Why are you developing a product and giving it away for free?" A quick reading of the freedoms that FOSS gives users seems to imply that making money is the antithesis of user freedom. 

Any research into what successful open source companies do will show you that, yes, most companies don't "make money" off open source code—they make money through services, support, or selling products with an "open core". So what is the business motivation for releasing any part of a project as open source or under a FOSS license?

If you release free or open source code, you're willfully revoking your legal monopoly to control how people modify or use your code—good for you! Whether you make your source code available for inspection/modification, or choose a license that lets users freely deploy that code to arbitrary devices, it's a simple exchange: <i>You are irrevocably trading copyright you own in exchange for other benefits.</i>

Consider developing a JavaScript interpreter. If your goal is compatibility, there is a *massive* amount of existing code in the wild, most of which you didn't write (unless you're [substack](http://github.com/substack)). More likely than not, bugs will be found by your users, not you. If your interpreter is closed source, the majority of users will discover your bugs, and a relatively few number of developers will be responsible for fixing them. Meanwhile, the user who has the issue has more incentive than you (for a time) to see that bug fixed. To open source the code would trade *your right to keep the source code private* for the potential for outside developers to submit patches, broadening your code coverage as well as your development speed. If achieving broad compatibility is less important than licensing your code, the rationale checks out.

Depending on your license, you may revoke your ability to charge money to license your code. A common solution is dual-licensing: release code under the viral GPL license and license it under a commercial license. Here, you revoke your right to keep code private, while directly selling to businesses the right for them to keep *their* code private. Hypocrisy! But also wildly successful, and demonstrably profitable. Not only are to targeting customers with a) money and b) incentive, you'll also reaching to those to stand only to benefit from open source code by improving it.

These days, many companies release code under the MIT/New BSD/Apache licenses, which essentially revokes a) the right to keep code private and b) to prevent users from building closed-source products on top of them. You might look at Heroku, Nodejitsu, and others as businesses that released their entire stack under these licenses. Always-on Internet connections have made service-based businesses possible, changing licensing from "charge for access" to "charge for time/resources". 

(Interestingly, shared source—making source code available only to licensees—hasn't seen much traction. Perhaps a solution you can *debug* but *not alter yourself* is no better than [one you can reverse engineer](http://blog.technical.io/post/66686276686/reverse-engineering-lpcs-device-firmware-upgrade).)

<center>![](http://media.tumblr.com/ac2e10613de9bd28bba64eb7248b455c/tumblr_inline_mwhrcvPXAm1s75tgz.png)

[Adapted from David A. Wheeler (2007)](http://timreview.ca/article/416)</center><br>
 
The hardest aspect of rationalizing "how you get paid with open source" is because when no money changes hands, *you don't*. An open source project is not a business; it's a trade of rights for increased development velocity, enthusiasm, or marketshare. You can build a business profiting off marketshare with ads, create powerful services around an open core, or build a profitable brand around enthusiastic supporters. Each of these benefits from open sourcing code, but is fundamentally a business in its own right. When you find business models that users are familiar with and which satisfy their needs, there is the potential to make money, not in spite of, but as a direct result of open source projects.

Code costs nothing to distribute and benefits from more eyes, not fewer. If reserving your copyright doesn't offer business value—or actively detract from your business—get rid of it! Open source or freely license your code, build a community around it, and strengthen your core business/brand/market—that's what you're making money on anyway, right?
 
 — Tim, software man]]></content:encoded>
    <wp:post_name>67472869771</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/67368925253</link>
    <pubDate>Mon, 18 Nov 2013 10:10:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[js on hardware]]></category>
		<category domain="tag" nicename="js-on-hardware"><![CDATA[js on hardware]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/67368925253</guid>
    <!--<wp:post_id>67368925253</wp:post_id>-->
    <wp:post_date>2013-11-18 7:10:00</wp:post_date>
    <wp:post_date_gmt>2013-11-18 15:10:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Updates</title>
    <description></description>
    <content:encoded><![CDATA[#####11/18/2013— [Updates](http://blog.technical.io/search/update)

<div style="color: #505050;font-family: Arial;font-size: 14px;line-height: 150%;text-align: left;"><h1 class="h1" style="color: #202020;display: block;font-family: Arial;font-size: 34px;font-weight: bold;line-height: 100%;margin-top: 0;margin-right: 0;margin-bottom: 10px;margin-left: 0;text-align: left;">
<h4 class="null" style="color: #202020;display: block;font-family: Arial;font-size: 22px;font-weight: bold;line-height: 100%;margin-top: 0;margin-right: 0;margin-bottom: 10px;margin-left: 0;text-align: left;">
	<span id="docs-internal-guid-00b6bd72-59e9-8df3-71c3-ae324c7eabcd">Tessel</span></h4>
<span id="docs-internal-guid-00b6bd72-59e9-8df3-71c3-ae324c7eabcd">We shipped out Tessels to the November Beta Testers last week. </span><br>
<br>
<img align="none" height="267" src="https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/tesselWithModules_1_.jpg" style="width: 600px;height: 267px;border: 0;line-height: 100%;outline: none;text-decoration: none;display: inline;" width="600"><br>
<br>
<span id="docs-internal-guid-00b6bd72-59e9-8df3-71c3-ae324c7eabcd">Along the way of preparing for that, we&rsquo;ve identified a few issues with the hardware that we&rsquo;ll fix in the next revision. We&rsquo;ll send those designs out to the manufacturer next Friday and hopefully getting back another revision of Tessel early December. We left extra room in our schedule in case we needed to do another prototype run, so we&rsquo;re still on track for shipping in February. </span><br>
<br>
<h3 class="null" style="color: #202020;display: block;font-family: Arial;font-size: 26px;font-weight: bold;line-height: 100%;margin-top: 0;margin-right: 0;margin-bottom: 10px;margin-left: 0;text-align: left;">
	<span id="docs-internal-guid-00b6bd72-59e9-8df3-71c3-ae324c7eabcd">Modules</span></h3>
<span style="font-size:18px;"><strong>Ambient</strong></span><br>
<span id="docs-internal-guid-00b6bd72-59e9-8df3-71c3-ae324c7eabcd">Remember that </span><a href="http://blog.technical.io/post/66107571478/the-making-of-an-ambient-sensor" style="color: #336699;font-weight: normal;text-decoration: underline;">ambient sensor we made</a> way back when? We finally finished evaluating it and the base design is working well. We&rsquo;ll be making a few tweaks to the hardware so that we can pick up quieter sounds. We&rsquo;re also playing around with adding an ultraviolet LED to the module. Because anything under a blacklight is cool.<br>
<br>
<strong><span style="font-size:18px;">GPS</span></strong><br>
<span id="docs-internal-guid-00b6bd72-59e9-8df3-71c3-ae324c7eabcd">We&rsquo;ve switched from the GlobalTop to the </span><a href="http://www.mouser.com/catalog/specsheets/EVA2235-H.pdf" style="color: #336699;font-weight: normal;text-decoration: underline;">A2235-H gps module</a>. The usage for both is the same (they both send over NEMA strings) and additionally the A2235-H is easily sourceable.<br>
<br>
<strong><span style="font-size:18px;">GPRS</span></strong><br>
<span id="docs-internal-guid-00b6bd72-59e9-8df3-71c3-ae324c7eabcd">We just finished assembling the first revision of the GPRS module today.</span><br>
<br>
<img height="272px;" src="https://lh5.googleusercontent.com/qC-erE8o52ySOAxNR-yKqdMsqOpHSznjPOA6BXqVN7jPgIUOSBsTM6_xQZmqbNYLnbeaHf0dPj9kt_LSEIvwWO1-loHt65z4zBQi4_L7JI87QhO6cUOohDwBNQ" width="326px;" style="border: 0;height: auto;line-height: 100%;outline: none;text-decoration: none;display: inline;"><br>
<br>
<span id="docs-internal-guid-00b6bd72-59e9-8df3-71c3-ae324c7eabcd">The capacitors are probably a little&hellip; overkill. But it&rsquo;s always easier to over-engineer and remove pieces than go the other way around. We&rsquo;ll be checking it for electrical stability over the next few days and revising our hardware design.</span><br>
<br>
<span id="docs-internal-guid-00b6bd72-59e9-8df3-71c3-ae324c7eabcd">As always, you can see what we&rsquo;re working on at </span><strong><a href="http://tessel.io/status" style="color: #336699;font-weight: normal;text-decoration: underline;">tessel.io/status</a></strong>.<br>
<br>
<strong><span id="docs-internal-guid-00b6bd72-59e9-8df3-71c3-ae324c7eabcd"><a href="https://twitter.com/technicalhumans" style="color: #336699;font-weight: normal;text-decoration: underline;">Keep in touch</a></span></strong>,<br>
<span id="docs-internal-guid-00b6bd72-59e9-8df3-71c3-ae324c7eabcd">Kelsey, Jia, Tim, Eric, and Jon</span></div>]]></content:encoded>
    <wp:post_name>67368925253</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/66787380460</link>
    <pubDate>Tue, 12 Nov 2013 12:05:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[internet of things]]></category>
		<category domain="tag" nicename="internet-of-things"><![CDATA[internet of things]]></category>
		<category domain="tag"><![CDATA[web development]]></category>
		<category domain="tag" nicename="web-development"><![CDATA[web development]]></category>
		<category domain="tag"><![CDATA[web developers]]></category>
		<category domain="tag" nicename="web-developers"><![CDATA[web developers]]></category>
		<category domain="tag"><![CDATA[prototype]]></category>
		<category domain="tag" nicename="prototype"><![CDATA[prototype]]></category>
		<category domain="tag"><![CDATA[entrepreneur]]></category>
		<category domain="tag" nicename="entrepreneur"><![CDATA[entrepreneur]]></category>
		<category domain="tag"><![CDATA[entrepreneuship]]></category>
		<category domain="tag" nicename="entrepreneuship"><![CDATA[entrepreneuship]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
		<category domain="tag"><![CDATA[lean startup]]></category>
		<category domain="tag" nicename="lean-startup"><![CDATA[lean startup]]></category>
		<category domain="tag"><![CDATA[Electrical Engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[Electrical Engineering]]></category>
		<category domain="tag"><![CDATA[pervasive computing]]></category>
		<category domain="tag" nicename="pervasive-computing"><![CDATA[pervasive computing]]></category>
		<category domain="tag"><![CDATA[ubiquitous computing]]></category>
		<category domain="tag" nicename="ubiquitous-computing"><![CDATA[ubiquitous computing]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/66787380460</guid>
    <!--<wp:post_id>66787380460</wp:post_id>-->
    <wp:post_date>2013-11-12 9:05:00</wp:post_date>
    <wp:post_date_gmt>2013-11-12 17:05:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Electrical Engineering and the Internet of Things</title>
    <description></description>
    <content:encoded><![CDATA[#####11/12/2013— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

<p><em>At the end of September, we released a <a href="http://www.slideshare.net/TechnicalMachine/tessel-the-end-of-web-development-as-we-know-it">set of slides</a>&nbsp;that got a lot of attention. Probably, a lot of this was due to its somewhat inflammatory title: "The End of Web Development (as we know it)". However, because the slides were designed as visual aids for some tech talks Jon gave, they didn't tell the whole story without him speaking in front of them. I thought this would be a good opportunity to respond to one reaction we received:</em></p>

![](http://media.tumblr.com/a00b482017c3d4a0db820d9aed7d48fe/tumblr_inline_mw5ufq6hlA1s75tgz.png)

<p><em>"Why do you think electrical engineering is hampering the internet of things?"</em></p>
<p>It&rsquo;s not that electrical engineering is hampering the internet of things; pervasive computing would not be possible without the dedication of electrical engineers. However, the key point presented in the slideshow is that electrical engineers are not equipped to create the connected world in the same way as software developers, for a few reasons:</p>
<p>Electrical engineering is really hard. Even for a seasoned electrical engineer, the speed of development for embedded hardware projects is very slow. There are delays in ordering parts, in soldering components together, in debugging a circuit only to find that one of the chips is fried. We wanted to abstract away this whole complicated process so that the makers of the internet of things can focus on their product ideas&ndash; what they are and whether they&rsquo;re worth pursuing&ndash; before they have to think about designing embedded circuits.</p>
<p>Software developers are used to a different standard of deployment and analytics. When software developers are dissatisfied with the development tools available to them, they can create better ones. And they can track how well their software is performing after its deployment in order to further improve. Electrical engineers, on the other hand, have to work with design tools in software that are inflexible, proprietary, closed source, and prohibitively expensive, and have no analytics suites to use on embedded devices in the field. Tessel&rsquo;s development environment seeks to leverage the best software tools and developments available&ndash; and those tools are made for software.</p>
<p>The software community is already instilled with the values of open source and community creation. The pace of innovation is fast in software partially because there are so many projects open to be copied, forked, and improved upon. This community doesn&rsquo;t exist in the same way with hardware. Although the Open Source Hardware movement is growing, it isn&rsquo;t as established as in software, and few tools currently exist to centralize the movement or share hardware designs. Technical Machine wants to speed up the pace of innovation in hardware by not only open sourcing the hardware and software of Tessel, but also by making a system that a community can capitalize upon: modular components and open components from the get-go.</p>
<p>The creation of the next generation of connected devices requires both software and electrical engineering expertise. Since very few individuals have both of those required skillsets, the barrier to entry for entrepreneurs in the space can be prohibitively high. Technical Machine wants to make that barrier to entry as low as possible by abstracting away the complexities of electrical engineering at the prototyping stage, and ushering in lean, entrepreneurial, innovative software developers to start with the tools they already know how to use.</p>
<p>&mdash;Kelsey</p>]]></content:encoded>
    <wp:post_name>66787380460</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/66686276686</link>
    <pubDate>Mon, 11 Nov 2013 11:58:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[jialiya huang]]></category>
		<category domain="tag" nicename="jialiya-huang"><![CDATA[jialiya huang]]></category>
		<category domain="tag"><![CDATA[jia huang]]></category>
		<category domain="tag" nicename="jia-huang"><![CDATA[jia huang]]></category>
		<category domain="tag"><![CDATA[nxp]]></category>
		<category domain="tag" nicename="nxp"><![CDATA[nxp]]></category>
		<category domain="tag"><![CDATA[reverse engineering]]></category>
		<category domain="tag" nicename="reverse-engineering"><![CDATA[reverse engineering]]></category>
		<category domain="tag"><![CDATA[hacking]]></category>
		<category domain="tag" nicename="hacking"><![CDATA[hacking]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
		<category domain="tag"><![CDATA[jtag]]></category>
		<category domain="tag" nicename="jtag"><![CDATA[jtag]]></category>
		<category domain="tag"><![CDATA[dfu]]></category>
		<category domain="tag" nicename="dfu"><![CDATA[dfu]]></category>
		<category domain="tag"><![CDATA[company culture]]></category>
		<category domain="tag" nicename="company-culture"><![CDATA[company culture]]></category>
		<category domain="tag"><![CDATA[usb]]></category>
		<category domain="tag" nicename="usb"><![CDATA[usb]]></category>
		<category domain="tag"><![CDATA[firmware]]></category>
		<category domain="tag" nicename="firmware"><![CDATA[firmware]]></category>
		<category domain="tag"><![CDATA[driver]]></category>
		<category domain="tag" nicename="driver"><![CDATA[driver]]></category>
		<category domain="tag"><![CDATA[code]]></category>
		<category domain="tag" nicename="code"><![CDATA[code]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/66686276686</guid>
    <!--<wp:post_id>66686276686</wp:post_id>-->
    <wp:post_date>2013-11-11 8:58:00</wp:post_date>
    <wp:post_date_gmt>2013-11-11 16:58:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Reverse Engineering LPC’s Device Firmware Upgrade Protocol</title>
    <description></description>
    <content:encoded><![CDATA[#####11/11/2013— [Jia Huang](http://blog.technical.io/search/jia+huang)

Device Firmware Upgrade (DFU) allows a device’s firmware to be changed over USB. The alternative is having to use an external device such as a [JTAG](http://en.wikipedia.org/wiki/Joint_Test_Action_Group) programmer. Setting up an external programmer is costly so we wanted to expose a DFU method for upgrading Tessel’s firmware.

In order for DFU mode to actually work, the device has to:

1. go into USB boot mode
2. have the host (any computer) send it the firmware using the [DFU protocol](http://www.usb.org/developers/devclass_docs/DFU_1.1.pdf)

Tessel had USB boot mode enabled about 3 revisions ago because we knew we would eventually want DFU. The current revision of Tessel goes into USB boot mode if the two pins by the RAM chip are bridged. In this mode, Tessel enumerates as a USB device and is ready for host communication.

So great, #1 is already solved. 50% of the way there! Time for a celebratory browse of [/r/aww](http://www.reddit.com/r/aww).

And for #2, there’s a tool called [dfu-util](http://dfu-util.gnumonks.org/) that handles host side communication for DFU. BOOM! Solved! Back to [/r/aww](http://www.reddit.com/r/aww)!

Except that it didn’t work. 

Confused and a bit annoyed, I scrounged around a bit and found [this thread](http://www.lpcware.com/content/forum/usb-dfu-firmware-upload-for-lpc1850-lpc4350-lpc1800-lpc4300-lpc18xx-lpc43xx) where NXP support says:

>When the LPC18xx and LPC43xx family of parts boot up over USB they send a DFU descriptor up to the host but they do not support the full set of DFU functions. They can only download an image into RAM and jump to it. That's it.

>To implement a DFU driver you will need to create an image that contains this driver and download and run it as a second stage

Oh. Well. That sucks. Then it goes on to say:

>The utility that downloads the image when the parts are booting up over USB is a C# application that sits on top of WinUSB. Source code to this application can be obtained with an NDA. Contact your FAE to do this.

What? I have to sign an NDA? **No way**. 

But it did give me 2 important pieces of information – there is a protocol specific way to write to flash, and that there’s already an existing (though proprietary) tool which works on Windows.

So breaking it down, the proper way to write new firmware over USB is:

1. Tessel goes into USB boot mode
2. LPC’s first stage DFU ROM is loaded into internal RAM
3. Do something as a second stage to put on firmware

I didn’t know what LPC’s first stage DFU ROM does, but I did know that it had to accept messages over USB somehow. I didn’t know much about USB, so I went and checked out how [USB packet transfers work](http://www.beyondlogic.org/usbnutshell/usb1.shtml). The cliffnotes version can be summed up in this image:

![](http://media.tumblr.com/accb15a2111595ca56e9a1b1df73bd81/tumblr_inline_mw2eai5ifr1s75tgz.png)

A USB device can have multiple configuration types (though having more than 1 is rare). Each configuration type has multiple interface descriptors. Each interface as multiple endpoints. Endpoints are what you actually talk to the USB device over.

Now I just have to check out what endpoint I need to talk over, write to that, and presumably the LPC DFU ROM will write that information to flash. So I whipped up a quick Python script that gave me all this information:

    import sys
    import usb
    import usb.core
    import usb.util

    # find our device
    dev = usb.core.find(idVendor=0x1fc9, idProduct=0x000c)

    # was it found?
    if dev is None:
      raise ValueError('Device not found')

    # set the active configuration. With no arguments, the first configuration     will be the active one
    dev.set_configuration()
    for cfg in dev:
      print "bLength", cfg.bLength
      print "bDescriptorType", cfg.bDescriptorType
      print "wTotalLength", cfg.wTotalLength
      print "bNumInterfaces", cfg.bNumInterfaces
      print "bConfigurationValue", cfg.bConfigurationValue
      print "iConfiguration", cfg.iConfiguration
      print "bmAttributes", cfg.bmAttributes
      print "bMaxPower", cfg.bMaxPower

      for (counter, intf) in enumerate(cfg):
        print "\t Interface number ", counter
        print "\t bLength", intf.bLength
        print "\t bDescriptorType", intf.bDescriptorType
        print "\t bInterfaceNumber", intf.bInterfaceNumber
        print "\t bAlternateSetting", intf.bAlternateSetting
        print "\t bNumEndpoints", intf.bNumEndpoints
        print "\t bInterfaceClass", intf.bInterfaceClass
        print "\t bInterfaceSubClass", intf.bInterfaceSubClass
        print "\t bInterfaceProtocol", intf.bInterfaceProtocol
        print "\t iInterface", intf.iInterface

It gave out the following:

![](http://media.tumblr.com/742593280c6998e058963e9a57a2f90c/tumblr_inline_mw2dvyBl6U1s75tgz.png)

Wait what, there’s no endpoints? How do I talk to it then? At this point I went and watched an episode of [Adventure Time](http://en.wikipedia.org/wiki/Adventure_Time) because goddammit what does this mean?

I then re-read that USB site I linked to earlier and saw that

>Endpoint descriptors are used to describe endpoints other than endpoint zero. Endpoint zero is always assumed to be a control endpoint and is configured before any descriptors are even requested

Nice. So I want to talk over endpoint zero because that’s the only possible endpoint that’s available. This meant that writing to firmware over USB was now:

1. Tessel goes into USB boot mode
2. LPC’s first stage DFU ROM is loaded into internal RAM
3. The first stage DFU ROM is listening to endpoint 0 for the right commands
4. The second stage writes to endpoint 0 with the proper protocol and actual firmware data

At this point I booted into Windows and downloaded the proprietary LPC tool for DFU. The setup for it looks like this

![](http://media.tumblr.com/7a26c856523cc1916b26830336c866c2/tumblr_inline_mw2dy8KrQq1s75tgz.png)

Here we have the first stage ROM (Algo), and the second stage program (a 160 byte length of repeating 0xDEADBEEFs). The address field is for the location in flash memory that we’re writing to. The microcontroller used on Tessel is the LPC1830. The 1830 doesn’t have any internal flash, which means all of our code is stored on Tessel’s SPIFI flash chip. The SPIFI flash is memory mapped at 0x1400 0000. 

The input fields for this tool told me a lot. I should expect at least 4 DFU transactions (one for the Algo, one for erasing the flash, one for writing the flash, and one for reading the flash back to me). Somehow the protocol had to embed 0x1400 0000 (probably during flash writing and reading) and 0x00020000 (probably during erase). 

I opened up a software based USB packet analyzer and tracked the packets as I ran the Windows tool. There were a few boring setup packets, but here’s the first interesting one

![](http://media.tumblr.com/72c898673a884361a5e74ebcd8e7826c/tumblr_inline_mw2dz21YBX1s75tgz.png)

That 0x14 byte looks promising. Looks like that section are the bytes that tell it where to erase. And the 0x02 area is the size of a region to erase. Immediately following this came a reply 

![](http://media.tumblr.com/2f0aecf6e992c5448ce66695e0255bdd/tumblr_inline_mw2dzoG9cO1s75tgz.png)

The next 2 DFU commands had these in the payload

![](http://media.tumblr.com/02a3a560f7614ec1fc2d43046e70105e/tumblr_inline_mw2e09Ja3F1s75tgz.png)

See that 0xA0 byte? 0xA0 in decimal is 160. So during a write command it sends over the number of bytes it needs to write every time. The only other major difference is the beginning 0x08 byte vs 0x07 for erase. So the first byte is probably which command to execute.

![](http://media.tumblr.com/225eb9438bc604e6c355bb4c9031ea5e/tumblr_inline_mw2e11TU8C1s75tgz.png)

And the reply from the device

![](http://media.tumblr.com/919b119eddecde3eb1494ebbf602adb0/tumblr_inline_mw2e1nnQFc1s75tgz.png)

Last was the read call:

![](http://media.tumblr.com/8c3cb00c9c7503487b500d0948eb4b2d/tumblr_inline_mw2e3fB2xN1s75tgz.png)

And the device response:

![](http://media.tumblr.com/a6bff9fb328a443c738c98af69205725/tumblr_inline_mw2e2gehy71s75tgz.png)

And following this was another packet that had the 160 byte 0xDEADBEEF data in it.

Now with this information we can pretty much figure out that the protocol is sending a packet of 16 bytes which has the format 

    aa 00 00 00 bb bb bb cc cc cc 00 0B 01 43 18

Where aa is the protocol (0x07 for erase, 0x08 for writing, 0x09 for reading), bb is the memory location and cc is the length. 

I then switched back to my Mac and sent over payloads that looked exactly the same with the exception of a payload of 16 bytes of 0xDEADBEEF. Checking the memory location over JTAG gave me this: 

![](http://media.tumblr.com/ee5cbcc77ce59c40f5dc070e5359bddf/tumblr_inline_mw2e6im4EZ1s75tgz.png)

Success! All this just so I didn’t have to contact NXP and sign a freaking NDA. Worth it. 

Jia]]></content:encoded>
    <wp:post_name>66686276686</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/66391929436</link>
    <pubDate>Fri, 08 Nov 2013 14:51:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[eric kolker]]></category>
		<category domain="tag" nicename="eric-kolker"><![CDATA[eric kolker]]></category>
		<category domain="tag"><![CDATA[rfid]]></category>
		<category domain="tag" nicename="rfid"><![CDATA[rfid]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[modules]]></category>
		<category domain="tag" nicename="modules"><![CDATA[modules]]></category>
		<category domain="tag"><![CDATA[rfid module]]></category>
		<category domain="tag" nicename="rfid-module"><![CDATA[rfid module]]></category>
		<category domain="tag"><![CDATA[electrical engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[electrical engineering]]></category>
		<category domain="tag"><![CDATA[debugging]]></category>
		<category domain="tag" nicename="debugging"><![CDATA[debugging]]></category>
		<category domain="tag"><![CDATA[adafruit]]></category>
		<category domain="tag" nicename="adafruit"><![CDATA[adafruit]]></category>
		<category domain="tag"><![CDATA[open source]]></category>
		<category domain="tag" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="tag"><![CDATA[open source hardware]]></category>
		<category domain="tag" nicename="open-source-hardware"><![CDATA[open source hardware]]></category>
		<category domain="tag"><![CDATA[oshw]]></category>
		<category domain="tag" nicename="oshw"><![CDATA[oshw]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/66391929436</guid>
    <!--<wp:post_id>66391929436</wp:post_id>-->
    <wp:post_date>2013-11-08 11:51:00</wp:post_date>
    <wp:post_date_gmt>2013-11-08 19:51:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Debugging the RFID Module</title>
    <description></description>
    <content:encoded><![CDATA[#####11/8/2013— [Eric Kolker](http://blog.technical.io/search/eric+kolker)

<p><em>It&rsquo;s nearly 4 AM. My hands and eyes are dry and tired, and my fingers probably smell like a mix of isopropanol and flux. I&rsquo;m dehydrated and have been inhaling fumes for the last six hours, but it&rsquo;s been a good day. Today we built all the modules which will be going out to our first round of Beta backers in less than two weeks. They&rsquo;re shiny, they&rsquo;re red, and they represent a hard day&rsquo;s work in the lab. If my sleep schedule weren&rsquo;t inverted, I&rsquo;d probably be crashing about now (unless I caught the second wave), but it very nearly *is* inverted, so</em></p>
<p></p>
<p><em>&lt; hour-long break where I read some articles, sign some paperwork, and browse Facebook &gt;</em></p>
<p></p>
<p><em>it looks like I have a blog post and maybe some firmware ahead of me. With any luck, I&rsquo;ll get up in time for a meeting around lunchtime. &hellip; Part of me wants to blame the startup life, but part of me knows my own habits get all the credit. Swap &ldquo;credit&rdquo; and &ldquo;blame&rdquo; as you see fit.</em></p>
<p><span><span><span></span></span></span></p>
<p><span>&nbsp;</span></p>
<p><span>Hey readers! Eric here. We hinted in a </span><a href="http://blog.technical.io/post/66016274023/progress"><span>recent blog post</span></a><span> that we&rsquo;d tell the tale of our RFID module sometime this week, so here goes.</span></p>
<p><span><span><span></span></span></span></p>
<p><span>Our story begins with the second round prototype. I knew that this version of the RFID board and the hardware we had bought from Adafruit differed in something that was subtle but also quite important. It wasn&rsquo;t anything about the </span><a href="http://en.wikipedia.org/wiki/Circuit_diagram"><span>schematic</span></a><span> or </span><a href="http://en.wikipedia.org/wiki/Printed_circuit_board"><span>PCB</span></a><span> layout per se (I had essentially forked my designs for both off of </span><a href="https://github.com/adafruit/Adafruit_NFCShield_I2C"><span>Adafruit&rsquo;s</span></a><span>), so I had to dig deeper and think a little harder.</span></p>
<p><span><span><span></span></span></span></p>
<p><span>I started by simulating the RF (radio frequency, anything operating above a few hundred kilohertz) TX/RX (transmit/receive) chain in </span><a href="http://www.linear.com/designtools/software/#LTspice"><span>LTSPICE</span></a><span> (my circuit simulator of choice). The RF chain is made up of a network of </span><a href="http://en.wikipedia.org/wiki/Passivity_(engineering)"><span>passives</span></a><span> (resistors, capacitors, and inductors), so I plugged in the values I had on the schematic, did a frequency sweep, and found that, surprise, the circuit had a resonant peak near 13.56 MHz. This is what that looks like in simulation:</span></p>
<p><span><span><br /><span></span><img height="576px;" src="https://lh6.googleusercontent.com/ewueEJotHVIVvCPOyjMUX7U7dGu845t-_XphAzk_mj26QWqO4uXNd6-LCJB2_fcbxYh-FBKQSHvEdLM7dig-yH3a0QwVvLLZRhRTqr0kHaATfXUhsZE1CoE_pg" width="624px;" /><span></span><br /><span></span><br /><span></span></span></span></p>
<p><span>A quick note on how to read the charts and what matters:</span></p>
<ul>
<li>
<p><span>The top graph is called a </span><a href="http://en.wikipedia.org/wiki/Bode_plot"><span>Bode plot</span></a><span>. It shows what happens to a sinusoidal waveform as it passes through my circuit. Frequency, in Hertz, is on the x-axis. Magnitude, in </span><a href="http://en.wikipedia.org/wiki/Decibel"><span>decibels</span></a><span>, and </span><a href="http://en.wikipedia.org/wiki/Phase_(waves)"><span>phase shift</span></a><span>, in degrees share the y-axis.</span></p>
</li>
<ul>
<li>
<p><span>The solid lines show the magnitude of the frequency response of the circuit, which tells us if portions of the signal at any given frequency are amplified or attenuated as they travel through the system.</span></p>
</li>
<li>
<p><span>The dashed lines show the phase shift of the output waveform with respect to the input waveform, in this case measured in degrees. We don&rsquo;t care about it so much in this case, but phase is really important in control systems design.</span></p>
</li>
</ul>
<li>
<p><span>The bottom is the schematic I&rsquo;m simulating. I&rsquo;ve named all my </span><a href="http://en.wikipedia.org/wiki/Electronic_symbol"><span>components</span></a><span> and nodes (places where components are connected) so that it&rsquo;s easier for me to read the graphs, which in turn help me tune the values on the schematic, which, well, you get the idea.</span></p>
</li>
</ul>
<p><span><span><span></span></span></span></p>
<p><span>In this case, I wanted to see a spike upwards around 13.56 MHz, which would tell me that the system </span><a href="http://en.wikipedia.org/wiki/Resonance"><span>resonates</span></a><span> around that frequency. In layman&rsquo;s terms, this means that the system is good at storing energy that comes in at that frequency. In the case of RFID, we mostly care about the current through the last inductor, I(L2), and in the very special case of the board we built, this inductor is actually a long, winding trace on the PCB. In any case, current through an inductor is related to the strength of the magnetic field and therefore the distance at which we can read an RFID tag. I included V(V_1) (the voltage at node V_1) as well to get a general sense of what inductor L1 and capacitor C1 do to the signal; it just so happens that the input section of a system often has a disproportionately large impact on output signal quality.</span></p>
<p>As I hoped, the system resonated at roughly 13.56 HMz. However, the system as simulated is a purely theoretical one, and it turns out that that is part of the problem.</p>
<p><span><span><span></span></span></span></p>
<p><span>I wanted to know how the real boards compared to my simulations, so I soldered a few wires onto both the boards (to nodes V_1, V_out, and ground) so that I could drive (provide input to) the antenna circuitry and measure the response. I then proceeded to beg my old wireless communications professor to let me use some of his lab equipment to </span><a href="http://en.wikipedia.org/wiki/Frequency_response"><span>characterize</span></a><span> the system. Armed with a swank signal generator and </span><a href="http://en.wikipedia.org/wiki/Spectrum_analyzer"><span>spectrum analyzer</span></a><span> (a poor man&rsquo;s </span><a href="http://en.wikipedia.org/wiki/Network_analyzer_(electrical)"><span>network analyzer</span></a><span>, but still $35,000 in test equipment), I did frequency sweeps and collected some data:</span><img height="341px;" src="https://lh3.googleusercontent.com/911-eqv1SmultPze3EqW2ggUPPQwFE4Se-EQjz_VHEaiFFF9IoJM24RbO-Hj-ZLH9U_uNh_6LQ35VPZxk67yvVVy-4bFAy4k0P2N3fnVsvxLJBnt7evAtynPmQ" width="624px;" /><span></span></p>
<p><span>This is another Bode plot (well, the magnitude portion), which shows the frequency response of our board (red) and Adafruit&rsquo;s (blue) on top of one another. The fact that the curves look like gradients (as opposed to just lines) stems from how I took the measurements (like I said, poor man&rsquo;s network analyzer), but the shape of the upper limits of the curves is what&rsquo;s important in this case.</span></p>
<p><span><span><span></span></span></span></p>
<p><span>We care most about the response at 13.56 MHz, but the takeaways from this graph are mixed. </span></p>
<ul>
<li>
<p><span>These graphs should look like the ones from SPICE, but definitely don&rsquo;t. Hmm...</span></p>
</li>
<li>
<p><span>Our amplitude is slightly higher than Adafruit&rsquo;s at 13.56 MHz (win! This means we&rsquo;re more sensitive to signals at 13.56 MHz, which means we should be able to read RFID tags from further way)...but this finding is not actionable because we were apparently already doing fine.</span></p>
</li>
<li>
<p><span>Not instantly sure what&rsquo;s going on on our board with the huge null around 17MHz, but because it&rsquo;s outside the band of interest we don&rsquo;t actually care.</span></p>
</li>
<li>
<p><span>The fact that the slope at 13.56 MHz is more gradual suggested to us that the </span><a href="http://en.wikipedia.org/wiki/LC_circuit"><span>LC resonant tank</span></a><span> created between C3 and L2 (with R2 in the way) might be less ideal on our board than on Adafruit&rsquo;s. Translation: Adafruit picked a few key parts to splurge on which might make all the difference. Time to figure out which ones.</span></p>
</li>
</ul>
<p><span><span><span></span><br /><span></span></span></span></p>
<p><span>One of the things I learned to do early on in my engineering career was simulate things. It&rsquo;s often easier to have a computer run the numbers than to run the test yourself (be it a </span><a href="http://en.wikipedia.org/wiki/SPICE"><span>circuit</span></a><span>, mobile app, or </span><a href="http://en.wikipedia.org/wiki/Finite_element_method"><span>load test</span></a><span> for a large mechanical assembly). The blessing and the curse of simulations, however, is that they can only ever be </span><a href="http://en.wikipedia.org/wiki/Gummel%E2%80%93Poon_model"><span>as accurate as you care to make them</span></a><span>. In other words, if real resistors, capacitors, inductors, and transistors were all perfect, ideal, purely mathematical devices, the board&rsquo;s performance would match simulation&rsquo;s, we&rsquo;d be able to read RFID tags from a good distance away (and angels would sing on high as we did).</span></p>
<p><span><span><span></span></span></span></p>
<p><span>It turns out that these </span><a href="http://en.wikipedia.org/wiki/Parasitic_element_(electrical_networks)"><span>parasitic</span></a><span> characteristics (think &ldquo;this resistor should not be here because i&rsquo;m supposed to be an inductor, not a resistor&rdquo;) and other &ldquo;nonidealities&rdquo; (deviations from the pure mathematical models in the form of </span><a href="http://en.wikipedia.org/wiki/Nonlinearity"><span>nonlinearities</span></a><span>, </span><a href="http://en.wikipedia.org/wiki/Temperature_coefficient"><span>dependence on temperature</span></a><span> or voltage, </span><a href="http://en.wikipedia.org/wiki/Hysteresis"><span>hysteresis</span></a><span>, etc.) are part of what separate not only real components from ideal ones, but also high quality real components from low quality ones.</span></p>
<p><span><span><span></span><br /><span></span></span></span></p>
<p><span>Armed with the knowledge that the fundamental design I had in hand was good, I looked through the datasheets for the components we had used on our board and plugged in some values of </span><a href="http://en.wikipedia.org/wiki/Inductor#Q_factor"><span>series resistance</span></a><span> to SPICE. The results, below, are quite different from what I had originally found.</span></p>
<p><span><span><br /><span></span><img height="577px;" src="https://lh4.googleusercontent.com/kQGgHtkiH7BPVFfTXnTTOvuUPAo6s5ZuwzT_gJJ2O1d1Gc5ZLXhljCaKLFRBE2u_VokQ0qY_ojgQZ18UxyEGAR2V07IKnJtl9WJTtVfOltnezUUWc-Mo4nfgwQ" width="624px;" /><span></span><br /><span></span></span></span></p>
<p></p>
<p>Everything is smoother (this is bad: we want nice sharp resonant peaks), V_1 now has a null near 14.5 MHz (look familiar?), and the output voltage and current drop by around 20 dB (a factor of 10). Clearly the components we were using were no good.</p>
<p><span><span><span></span></span></span></p>
<p><span>I suspected then, that the inductor L1 was the primary offender, so I popped the corresponding part off of the Adafruit board and swapped it for what we had on ours. It helped, but did not completely solve the problem: RFID communication distance jumped from a millimeter (read: contact) to about a centimeter. I spent half an hour on </span><a href="http://www.digikey.com/"><span>Digi-Key</span></a><span> &ldquo;specing&rdquo; (hunting for a part that not only has the right value, but also the right </span><a href="http://en.wikipedia.org/wiki/List_of_integrated_circuit_packaging_types"><span>package</span></a><span>, is economical in quantities of 100 and 1000, meets other required specifications, etc.) inductors to replace the ones we currently had on our board, ordered a few samples, and then turned my sights to the PCBs themselves.</span></p>
<p><span><span><span></span><br /><span></span></span></span></p>
<p><span>I took the boards up to the lab and used a </span><a href="http://en.wikipedia.org/wiki/LCR_meter"><span>LCR meter</span></a><span> to measure the inductance of the PCB antennas (L2 in my sim). I found that they were actually remarkably similar, but that the Adafruit board had a higher </span><a href="http://en.wikipedia.org/wiki/Q_factor"><span>Q factor</span></a><span>, which implied that it had a smaller resistance.</span></p>
<p><span><span><span></span></span></span></p>
<p><span>Next, I set up an ultra-precise </span><a href="http://en.wikipedia.org/wiki/Four-terminal_sensing"><span>four point resistance measurement</span></a><span> and found that Adafruit&rsquo;s antenna had a series resistance of about 0.37 Ohms. Ours clocked in at about 0.53 Ohms. Although the difference there is small, it&rsquo;s the ratio that matters: their antenna was about 30% less resistive than ours, which was consistent with their higher Q factor.</span></p>
<p><span><span><br /><span></span></span></span></p>
<p><span>These days, PCB mills are out of style. Well, they may be </span><a href="http://otherfab.com/products/"><span>coming back into style for personal use</span></a><span>, but the fact remains that most boards that are made in any volume are </span><a href="http://en.wikipedia.org/wiki/Printed_circuit_board#Manufacturing"><span>printed</span></a><span>. For two-layer boards (the process is more complex with more layers), you start with a piece of copperclad: a sheet (generally fiberglass-based) with a thin layer of copper on the top and bottom. A series of processes lay down chemicals that become corrosion resistant when properly treated, and the remaining exposed copper is bathed in nasty chemicals and dissolved away. Afterwards the surface may be treated with some combination of metal plating, a nonconductive layer called the soldermask, and a layer of paint called the silkscreen.</span></p>
<p><span><span><span></span></span></span></p>
<p><span>As you can imagine, every step in this process can be customized, and the </span><a href="http://en.wikipedia.org/wiki/Printed_circuit_board#PCB_characteristics"><span>thickness of the copper is no exception</span></a><span>. It&rsquo;s specified in terms of ounces per square foot (which typically just gets shortened to &ldquo;oz.&rdquo;, or oz./ft. if you have the time) and corresponds to &ldquo;if you took x ounces of copper and mashed it over one square foot...well, that&rsquo;s how thick the copper is on each side of your board&rdquo;. Most boards use one-ounce copper (at least for the outer layers) and &ldquo;heavier&rdquo; boards are typically only needed for high power applications (the highest I&rsquo;ve held is 4 oz., but I&rsquo;m sure </span><a href="http://www.4pcb.com/NEW-Capabilities-Brochure-Feb2013-ForWebsite.pdf"><span>the sky&rsquo;s the limit</span></a><span>).</span></p>
<p><span><span><br /><span></span></span></span></p>
<p><span>Finally, I grabbed a pair of calipers and set to measuring the thickness of the copper plating on the PCB. I measured the &ldquo;bare&rdquo; board first, then the board with the antenna trace. The differences were not the same: Adafruit&rsquo;s copper was, in fact twice as thick as ours, putting it at two ounces.</span></p>
<p><span><span><span></span></span></span></p>
<p><span>I let out a sigh, emailed Jia, and told her to find me a PCB house that would do two ounce copper in a reasonable amount of time. At this point, it was late, I was tired, and it would be better to continue to match Adafruit&rsquo;s working design as best we could, rather than chase down more rabbit holes.</span></p>
<p><span><span><br /><span></span></span></span></p>
<p><span>Fast forward a week or so, and there I was in the lab with two boards in front of me, fresh back from the </span><a href="http://en.wikipedia.org/wiki/Reflow_oven"><span>oven</span></a><span>. They were two ounce copper, had the funky fresh inductors I had picked out, and were ready to test. I plugged one in, loaded some code, watched the RFID chip enumerate, pulled out my </span><a href="http://en.wikipedia.org/wiki/Charlie_card"><span>CharlieCard</span></a><span> (Boston&rsquo;s RFID-enabled subway fare card), and held my breath.</span></p>
<p><span><span><span></span></span></span></p>
<p><span>I brought the card close, and watched as my screen displayed a very familiar, but lately aloof, four byte sequence: my identifier in the eyes of the MBTA.</span></p>
<p><span><span><span></span></span></span></p>
<p><span>It had worked, and at a distance of roughly three inches, so naturally I threw my hands in the air in celebration. In my hurry to capslock the success to the rest of team over HipChat, I lost my Charlie card somewhere on my desk. I&rsquo;m sure it&rsquo;ll turn up eventually.</span></p>
<p><span><span><span></span></span></span></p>
<p><span>~e</span></p>]]></content:encoded>
    <wp:post_name>66391929436</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/66223097277</link>
    <pubDate>Wed, 06 Nov 2013 17:54:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[bluetooth]]></category>
		<category domain="tag" nicename="bluetooth"><![CDATA[bluetooth]]></category>
		<category domain="tag"><![CDATA[ble]]></category>
		<category domain="tag" nicename="ble"><![CDATA[ble]]></category>
		<category domain="tag"><![CDATA[jon mckay]]></category>
		<category domain="tag" nicename="jon-mckay"><![CDATA[jon mckay]]></category>
		<category domain="tag"><![CDATA[js on hardware]]></category>
		<category domain="tag" nicename="js-on-hardware"><![CDATA[js on hardware]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[hardware hacking]]></category>
		<category domain="tag" nicename="hardware-hacking"><![CDATA[hardware hacking]]></category>
		<category domain="tag"><![CDATA[open source]]></category>
		<category domain="tag" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="tag"><![CDATA[oshw]]></category>
		<category domain="tag" nicename="oshw"><![CDATA[oshw]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/66223097277</guid>
    <!--<wp:post_id>66223097277</wp:post_id>-->
    <wp:post_date>2013-11-06 14:54:00</wp:post_date>
    <wp:post_date_gmt>2013-11-06 22:54:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>The Making of a Module: The Dive from Hardware to JS</title>
    <description></description>
    <content:encoded><![CDATA[#####11/6/2013— [Jon McKay](http://blog.technical.io/search/jon+mckay)

<p><span>The Technical Machine team is hard at work designing, assembling, programming and testing all the components of Tessel and its modules (see our </span><a href="http://tessel.io/status"><span>status page</span></a><span> for details). Personally, I&rsquo;ve been spending a lot of time getting the Bluetooth module ready for release.</span></p>
<p></p>
<p><span>In </span><a href="http://blog.technical.io/post/66107571478/the-making-of-an-ambient-sensor"><span>a previous post</span></a><span>, we talked about what goes into the hardware design and assembly of a module. But that&rsquo;s only the beginning. After we put the module together, there&rsquo;s a long process of testing the hardware works and writing the entire library.</span></p>
<p>The first step is to make sure that hardware works like it&rsquo;s supposed to. The chances of it working 100% right with the first revision is infinitesimally small, so we make it easier on ourselves by breaking out any questionable connections with headers so that we have more flexibility when we start testing. Headers give us the option of easily changing connections (with jumpers or soldering on wires) or verifying the signals on those lines with a logic analyzer. We use and love <a href="http://www.saleae.com/logic16">Salae&rsquo;s logic analyzer</a> which will decode any signals we send over the wire so we can be sure our communications are working as expected. On our first Bluetooth module, we broke out a block of headers (see picture below) for all the communication signals so that we can easily test the receive, transmit and wakeup lines on the BlueGiga chip.</p>
<p><img alt="image" height="334px;" src="https://lh6.googleusercontent.com/m0PFnNc8H_jMfulHXt92kEo0m-3bUhASdjlOuz_m6jTNNNQ89putcVvSfqbmdWCUL8-tDs7eFPVatqyE7Tp-cdZ1pFSvUAoIfpSbecueVMwUCgzXHf8yOzSQ" width="549px;" /></p>
<p></p>
<p><span>The BlueGiga Chip is what&rsquo;s known as a System on a Chip (SoC), which means it has a microcontroller as well as a Bluetooth chip (the TI CC2540) and all the passive hardware like capacitors and resistors to make it all work reliably. The smaller group of headers at the bottom of the module exists so that we can program the BlueGiga chip with their proprietary toolchain. That&rsquo;s right, we not only have to program the Tessel to communicate with the Bluetooth module, but we have to program the Bluetooth module itself to be able to respond. But don&rsquo;t worry, if we need to update the firmware on the BlueGiga chip once we ship out the module, we can update it from the Tessel.</span></p>
<p></p>
<p><span>The next step is to make sure we can communicate with the module. Tessel initially supported only the SPI and I2C communication protocols, but the BlueGiga chip that we&rsquo;re using communicates over UART. Each communication protocol has its pros and cons but these three are by the far the most common. To be able to interact with the BLE chip, we threw a SPI to UART bridge onto the module. I began making sure communication worked with the bridge over SPI, but soon after, we decided to add UART support to Tessel modules, rendering the bridge useless. Luckily, the fact that we add headers on all the communication channels meant that I could bypass the UART bridge by just adding some wires from Tessel&rsquo;s UART to the header block, so we didn&rsquo;t have to pay to manufacture more test module boards.</span></p>
<p></p>
<p><span>Next, I started working with the UART library and writing the bluetooth driver in C. I started working in C as opposed to JavaScript because BlueGiga provides a C library called BGLib that makes it easy to prove out the BlueGiga functionality quickly. I had to write and test the UART library in C anyway. We make heavy use of logic analyzers at this point to make sure the waveforms that are being sent between Tessel and the module look exactly how they should.</span></p>
<p><span><img src="http://media.tumblr.com/71a14a7a4396d3a797e8fa212392727b/tumblr_inline_mvvq1yoiR81s75tgz.png" /></span></p>
<p></p>
<p><span><span><span></span></span></span></p>
<p><span>Once the UART library was finished and proved out with the BGLib library, it was time to move on to JavaScript land. In order to do that, we tell our Lua runtime what UART JavaScript functions correspond to which UART C functions. It&rsquo;s the layer of glue between the two worlds.</span></p>
<p><span><span><span></span><img alt="image" height="245px;" src="https://lh5.googleusercontent.com/H_YJzm3rvkBvVPjZqSXLKjyVZp6eYRZamevUUZT36SFB1BRZnvRFfzZSoLbM5tVnPp8hcNi8ds0ZMICj6phDDy2CUgxdI-CB4B3EkZnarFvr7aVCP3CbO1pT" width="322px;" /><span></span><br /><span></span></span></span></p>
<p><span>Now we&rsquo;ll need to update the Tessel Node Package with the new UART function calls that we&rsquo;ve made. The Tessel command line tools automatically inject the Tessel library as a dependency when we push code, so we don&rsquo;t have to worry about updating any references.</span></p>
<p></p>
<p><span>This takes us up to about where I am now. I still need to port the BGLib library to JavaScript (or some variation of it) and write some abstractions on top of it to make Bluetooth transmissions as simple as possible. From there, it will just be revising the hardware schematic with any problems I found and squashing any bugs in the UART code. Easier said than done.</span></p>
<p></p>
<p><span>&ndash;Jon</span></p>
<p><span>&nbsp;</span></p>]]></content:encoded>
    <wp:post_name>66223097277</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/66107571478</link>
    <pubDate>Tue, 05 Nov 2013 13:34:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[jialiya huang]]></category>
		<category domain="tag" nicename="jialiya-huang"><![CDATA[jialiya huang]]></category>
		<category domain="tag"><![CDATA[ambient module]]></category>
		<category domain="tag" nicename="ambient-module"><![CDATA[ambient module]]></category>
		<category domain="tag"><![CDATA[electrical engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[electrical engineering]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[jia huang]]></category>
		<category domain="tag" nicename="jia-huang"><![CDATA[jia huang]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/66107571478</guid>
    <!--<wp:post_id>66107571478</wp:post_id>-->
    <wp:post_date>2013-11-05 10:34:00</wp:post_date>
    <wp:post_date_gmt>2013-11-05 18:34:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>The Making of an Ambient Sensor</title>
    <description></description>
    <content:encoded><![CDATA[#####11/5/2013— [Jia Huang](http://blog.technical.io/search/jia+huang)

<p><em><span>We sent this out to our backers more than a month ago, but somehow it never made it to the blog! For those of you who weren't backers by 9/27: enjoy!</span></em></p>
<p></p>
<p>We announced the Ambient Sensor module as a Class A module a few weeks back (as always you can get yours <a href="http://www.dragoninnovation.com/projects/22-tessel">here</a>). We put it together this past week and thought you guys might be interested in the process.</p>
<p><span id="docs-internal-guid-686589d9-6034-b932-e5a5-10eff2f3996a">We first draw out the schematic and PCB layout in DipTrace.</span></p>
<p><span><br /><img alt="image" height="280px;" src="https://lh4.googleusercontent.com/0FyV_yRLw_mUTySrmzxmUOFI57KDhrvV9uukU6V0nANLb1L9ml3P1ipWBBwTFw2BAWy6IPDOsCPZrNFT3FcCOWCxl6eEUl1nEtkPN6T2vZhb7tojJfqWaclBWg" width="368px;" /><img alt="image" height="236px;" src="https://lh4.googleusercontent.com/91XWCWJHwh8L3T4MNj17Hp82MIPH2b-iFnswmoHMx3pAo1QGfMtMFVk363swZxJS6ctGL2mhqnrIdzeKuN0xJ-3iOdrBVZlJkf6JB0pzk3AU3Q3LiRzM6SrTwg" width="239px;" /></span></p>
<p></p>
<p><span><span>Then, we get a small number (usually 2) PCBs made for the prototype run of a module. The parts are sourced from Digi-Key.&nbsp;</span></span></p>
<p><span><br /><img alt="image" height="410" src="https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/IMG_20130926_205046.jpg" width="597" /></span></p>
<p></p>
<p><span><span>Our modules use surface-mount components, which means that they are soldered onto the top of the board, with no wires poking through. Because of this, we use solder paste, place components with tweezers, and then heat the whole board to attach all the components at once.</span></span></p>
<p><span><span>We apply solder paste to the pads on the board using a syringe. Then, we use dental picks to scrape off excess paste. (Basically, all of our tools are repurposed medical equipment; if it&rsquo;s good enough for humans, it&rsquo;s good enough for our PCBs.)</span><br /><br /><img alt="image" height="371" src="https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/IMG_20130926_212807.jpg" width="597" /></span></p>
<p></p>
<p><span><span>Next, we place the components. This squishes down the solder paste and makes the board a little messier. But despite it looking like it&rsquo;ll fuse into one metal blob, the solder paste always ends up working somehow...</span></span></p>
<p><span><br /><img alt="image" height="384" src="https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/IMG_20130926_231210.jpg" width="597" /></span></p>
<p></p>
<p><span><span>In order to make the components bond to the board, we heat everything up until the solder flows. This summer, we used a $20 electric skillet and literally fried our boards. Lately we&rsquo;ve been able to use a reflow oven at <a href="http://www.olin.edu/">Olin College</a>, which has helped tremendously.</span></span></p>
<p><span><br /><img alt="image" height="388" src="https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/IMG_20130926_232122.jpg" width="597" /><img alt="image" height="421" src="https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/IMG_20130926_232312.jpg" width="597" /></span></p>
<p></p>
<p><span><span>After baking the board, we set it out to cool before putting on the headers by hand. Remember how the solder paste looked really terrible three images up? Since solder paste is made out of <strike>unicorn blood</strike> tiny balls of solder and a liquid cleaning compound called flux, it pretties itself up magically in the oven.</span></span></p>
<p><span><br /><img alt="image" height="280" src="https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/IMG_20130926_233731.jpg" width="597" /></span></p>
<p></p>
<p></p>
<p><span>All of the module header pins you&rsquo;ve seen in other photos have been through-hole mounted (the pins go through holes in the board). The headers on this batch of modules are surface mounted instead; we&rsquo;re experimenting with how different header types feel when attaching and detaching modules.</span></p>
<p><span><span>And there it is, ready to go! You can read more about the ambient module here: </span><a href="http://tessel.io/modules#module-ambient"><span>http://tessel.io/modules#module-ambient</span></a><span>.</span></span></p>
<p><span><span>Now we just have to test it and make sure it actually works</span></span><span>.</span></p>
<p></p>
<p><span>-Jia</span></p>
<p></p>
<p></p>]]></content:encoded>
    <wp:post_name>66107571478</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/66016274023</link>
    <pubDate>Mon, 04 Nov 2013 14:36:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[modules]]></category>
		<category domain="tag" nicename="modules"><![CDATA[modules]]></category>
		<category domain="tag"><![CDATA[schematic]]></category>
		<category domain="tag" nicename="schematic"><![CDATA[schematic]]></category>
		<category domain="tag"><![CDATA[testing]]></category>
		<category domain="tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="tag"><![CDATA[jialiya huang]]></category>
		<category domain="tag" nicename="jialiya-huang"><![CDATA[jialiya huang]]></category>
		<category domain="tag"><![CDATA[gprs]]></category>
		<category domain="tag" nicename="gprs"><![CDATA[gprs]]></category>
		<category domain="tag"><![CDATA[2g]]></category>
		<category domain="tag" nicename="2g"><![CDATA[2g]]></category>
		<category domain="tag"><![CDATA[sim]]></category>
		<category domain="tag" nicename="sim"><![CDATA[sim]]></category>
		<category domain="tag"><![CDATA[rfid]]></category>
		<category domain="tag" nicename="rfid"><![CDATA[rfid]]></category>
		<category domain="tag"><![CDATA[camera]]></category>
		<category domain="tag" nicename="camera"><![CDATA[camera]]></category>
		<category domain="tag"><![CDATA[bluetooth]]></category>
		<category domain="tag" nicename="bluetooth"><![CDATA[bluetooth]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/66016274023</guid>
    <!--<wp:post_id>66016274023</wp:post_id>-->
    <wp:post_date>2013-11-04 11:36:00</wp:post_date>
    <wp:post_date_gmt>2013-11-04 19:36:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Progress</title>
    <description></description>
    <content:encoded><![CDATA[#####11/4/2013— [Updates](http://blog.technical.io/search/update)

<p><span>We just got in the redesigned version of the boards, check it out!&nbsp;</span><br /><br /><span><img alt="image" height="319" src="https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/png_base64d8b2dde7f663cb6.png" width="600" /></span><br /><a href="https://www.facebook.com/media/set/?set=a.478201802294244.1073741832.290355304412229&amp;type=1" target="_blank">(More pictures)</a></p>
<h1>Status</h1>
<p><span>We&rsquo;ll be making another version before manufacturing with some additional routing changes. We&rsquo;ll send out an update with all the changes as soon as we&rsquo;re done testing all the new units.</span><br /><br /><span>We&rsquo;ve also solved the&nbsp;</span><a href="http://blog.technical.io/post/64348199725/layout-updates" target="_blank">lead time issue with manufacturing</a><span>&nbsp;that we mentioned in our last backer update. This means we&rsquo;re on track to ship in February.</span><br /><br /><span>There&rsquo;s now a dedicated status page for Tessel and all its modules up on&nbsp;</span><a href="http://tessel.io/status" target="_blank">tessel.io/status</a><span>. Check it out and see what we&rsquo;re working on!&nbsp;</span><strong><a href="http://clicktotweet.com/2bfsa" target="_blank">Tweet this.</a></strong></p>
<h1>Modules</h1>
<h4>GPRS (2G)</h4>
<p><span>We&rsquo;re waiting to get the PCBs back from our fab house so we can assemble and test the module. The interesting challenge for GPRS is that the peak current draw is 2A during transmissions (USB 2.0 only gives us 500mA). We hope to get around this with careful power conversion and really big capacitors.&nbsp;</span><br /><br /><span>In this first round of PCBs we&rsquo;re hoping to test several things:</span></p>
<ul>
<li>Actual current draw of the SIM900 GPRS module</li>
<li>The logic level translator chip. The SIM900 is a 3.0v device instead of the 3.3v that Tessel outputs. So in order to properly talk to the SIM900 we have to step our signals down.</li>
<li>Different antenna options</li>
<li>Different power conversion and power input options</li>
</ul>
<p><span>Here&rsquo;s what the schematic looks like to test all that (click for larger version):</span><br /><br /><span><a href="https://s3.amazonaws.com/uploads.hipchat.com/49770/405706/wsVRT1BfRC51hOT/gprs.png" target="_blank"><img alt="image" height="368" src="https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/gprs.png" width="600" /></a></span></p>
<h4><br />RFID</h4>
<p><span>We&rsquo;ve had a prototype working for a while now, but it was only able to read RFID cards at a distance of about half an inch (1 cm), which was too small for our liking. Over course of the last few days, we&rsquo;ve gotten its range up to around 3 inches (8 cm), and are happy to report that the module is basically done at this point. Look for a&nbsp;</span><a href="http://blog.technical.io/" target="_blank">blog</a><span>&nbsp;post about the debugging and tuning process next week.</span></p>
<h4>Bluetooth</h4>
<p><span>We've nearly decided between using the BlueGiga chipset versus Panasonic; we're leaning towards the Bluegiga. The BlueGiga module has been verified to be detectable by BLE devices and we're working on getting reliable communications between Tessel and the module.</span><br /><br /></p>
<h4>Camera</h4>
<p><span>We&rsquo;re still getting some more samples in, but it looks like we&rsquo;ll be using the VC0706 as our main signal processing chip. This means the camera will be able to give back compressed JPEGs for snapshot.</span><br /><br /><span>As always, thanks for reading! We&rsquo;re always available on&nbsp;</span><a href="https://twitter.com/technicalhumans" target="_blank">twitter.com/technicalhumans</a><span>,&nbsp;</span><a href="https://www.facebook.com/technicallyamachine" target="_blank">https://www.facebook.com/technicallyamachine</a><span>, or&nbsp;</span><a href="mailto:team@technical.io" target="_blank">team@technical.io</a><br /><br /><span>Jia, Kelsey, Tim, Eric, and Jon</span></p>]]></content:encoded>
    <wp:post_name>66016274023</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/65540821184</link>
    <pubDate>Wed, 30 Oct 2013 15:02:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[marketing]]></category>
		<category domain="tag" nicename="marketing"><![CDATA[marketing]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
		<category domain="tag"><![CDATA[outreach]]></category>
		<category domain="tag" nicename="outreach"><![CDATA[outreach]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/65540821184</guid>
    <!--<wp:post_id>65540821184</wp:post_id>-->
    <wp:post_date>2013-10-30 12:02:00</wp:post_date>
    <wp:post_date_gmt>2013-10-30 19:02:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Startup Marketing Tips from an Engineer</title>
    <description></description>
    <content:encoded><![CDATA[#####10/30/2013— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

<p><span>I had never done marketing before working for Technical Machine, but I stepped in to fill the role, mostly because everyone else had their hands full with technical development (and also didn&rsquo;t want to do it).</span></p>
<p>I can&rsquo;t claim absolute success, &nbsp;but things have gone better than I expected&ndash;&nbsp;and since it&rsquo;s all new to me, the learning curve is huge. What I hope to present here are a few pieces of advice you might not have seen before. I hope you find them useful.</p>
<p></p>
<p></p>
<p><strong>Know your product.</strong></p>
<p><span>When I first joined Technical Machine, not much had been written down as far as company mission and value proposition. Tim, Jia, and Jon had a united vision that they&rsquo;d talked about a lot, but it wasn&rsquo;t enumerated in words. So in order to understand what I was selling, I had to ask a lot of questions.</span></p>
<p><span>What drove Technical Machine? It didn&rsquo;t make sense to sell the product without the vision, or the vision without the people. So I started by researching and writing one-paragraph biographies of Tim, Jialiya, and Jon. Tim lives and breathes software. Jia cringes to see automatable tasks done by hand. Jon can keep his head above the daily development and see big futures down the road.</span></p>
<p><span>Next, I wrote a sort of statement of purpose. This was complicated; it&rsquo;s hard to get someone else&rsquo;s vision on paper, so I made some educated guesses&ndash; internet of things, Arduino-type thing for webdevs&ndash; and passed it back to the founders for a few rounds of corrections.</span></p>
<p>By the time I went through this whole process, I had a much better idea why Technical Machine mattered, and was able to start asking the more trivial questions: What differentiates Tessel from other microcontrollers? I had to know why before I could adequately explain and sell what. And since all of these writing-and-correcting processes occurred between all of us together, minor discrepancies in founders&rsquo; vision came to light, and we all finished the exercise with clearer understandings of exactly how we were presenting Technical Machine.</p>
<p></p>
<p><strong>Be honest and open.</strong></p>
<p><span>We&rsquo;re open source hardware, open source software, and we&rsquo;re also trying to be an open business: we&rsquo;re reaching for transparency not just within the company, but also with our broader audience. This is partly because, as a company, we&rsquo;d like to encourage other web developers to start hardware companies. It&rsquo;s part of our core mission. Thus if we can use ourselves as an example, we can help other companies like us to learn and grow.</span></p>
<p>One surprisingly difficult facet of openness is to be honest within the culture of your company. For example, at Technical Machine, we&rsquo;re just five 22-year-olds who like free food, jokes steeped in nerd culture, and spending time together. We&rsquo;re working on Tessel because we really want it and think the world could use a better hardware prototyping experience. Sometimes we get ahead of ourselves and try to sound distinguished and professional, but our best reactions come from just being ourselves and trying to openly connect with our users (albeit politely).</p>
<p></p>
<p><strong>Connect with the people who impress you.</strong></p>
<p><span>Early on, Technical Machine decided on a core user group that we wanted to design for: entrepreneurial web developers. We picked JavaScript, and we admire the Node community. So we designed for them, and that&rsquo;s who we set out to tell about Tessel.</span></p>
<p>Fortunately, people are pretty easy to find online (especially web developers). I found lists of the people I thought would care most about our project, and I started to follow them on Twitter: the most active node.js authors, people who work at Github, etc. Because I hand-selected each of these people, they&rsquo;re the ones who learned about Technical Machine first. And because we had designed for them, their excitement lent us a good introduction to the internet when they passed the word along.</p>
<p></p>
<p><strong>Be prepared.</strong></p>
<p><span>You never know when you&rsquo;ll suddenly be exposed to the public eye. With all my Twitter following, we accidentally launched a couple of weeks before we meant to. Although we had planned to launch with more detailed information and clearer design, we had a website up with the basic information and a big, obvious &ldquo;join our mailing list&rdquo; field. We panicked a bit to find ourselves at the top of HackerNews, but then we spun up a few more dynos on Heroku to manage the traffic, regularly backed up the flood of email addresses coming in through MongoDB, and by the end of two days, had a mailing list 10,000 strong to reach out to with our crowdfunding launch.</span></p>
<p><span>Put up your MVP of a website, and make sure of all the core functionalities in case people find it. You can perfect your design and finish filling out details later.</span></p>
<p></p>
<p><strong>Connect with the people who support you.</strong></p>
<p><span>Pay attention to everyone who has backed your crowdfunding campaign, joined your mailing list, followed you on Twitter. Certainly, it&rsquo;s tedious to read through lists of thousands of people&ndash; but it pays off. We read through our lists regularly and reach out to interesting people. This is how we meet investors, get invited to conferences, and arrange tech talks at different companies. Your supporters are invaluable, and some of them are also well-connected.</span></p>
<p><span>Even easier, sometimes people email you. Talk to them! Start a discussion! Whenever we get a chance, we ask people how they want to use Tessel. This helps us make the product our customers want most.</span></p>
<p><span>Responding to every email and tweet is important. There are few faster ways to annoy a supporter than to ignore them; likewise, a clear, speedy, and thoughtful response can make a loyal supporter.</span></p>
<p><span><span><span></span></span></span></p>
<p><span>With that advice, how can I end this post any other way than by asking you to write? Please reach out to me: </span><a href="https://twitter.com/SelkeyMoonbeam"><span>@selkeymoonbeam</span></a><span>, or kelsey at technical.io.</span></p>
<p><span id="docs-internal-guid-3952ad43-0ab8-e91c-b1b2-d6940bd1ced8"><br /><span></span><span>&mdash;Kelsey Breseman</span></span></p>]]></content:encoded>
    <wp:post_name>65540821184</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/65440059253</link>
    <pubDate>Tue, 29 Oct 2013 12:27:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[Electrical Engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[Electrical Engineering]]></category>
		<category domain="tag"><![CDATA[web development]]></category>
		<category domain="tag" nicename="web-development"><![CDATA[web development]]></category>
		<category domain="tag"><![CDATA[it is known]]></category>
		<category domain="tag" nicename="it-is-known"><![CDATA[it is known]]></category>
		<category domain="tag"><![CDATA[best practices]]></category>
		<category domain="tag" nicename="best-practices"><![CDATA[best practices]]></category>
		<category domain="tag"><![CDATA[eric kolker]]></category>
		<category domain="tag" nicename="eric-kolker"><![CDATA[eric kolker]]></category>
		<category domain="tag"><![CDATA[company culture]]></category>
		<category domain="tag" nicename="company-culture"><![CDATA[company culture]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/65440059253</guid>
    <!--<wp:post_id>65440059253</wp:post_id>-->
    <wp:post_date>2013-10-29 9:27:00</wp:post_date>
    <wp:post_date_gmt>2013-10-29 16:27:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>&quot;It is Known&quot;</title>
    <description></description>
    <content:encoded><![CDATA[#####10/29/2013— [Eric Kolker](http://blog.technical.io/search/eric+kolker)

<p>Hey readers, Eric here again. <a href="http://blog.technical.io/post/63602294200/var-eric-require-electrical">Last time</a> I promised some thoughts on how joining a team of webdevs as an EE has been, so here goes.</p>
<p>The short answer is &ldquo;ethnographic.&rdquo; I stepped into the world of the web for the first time when I joined Technical Machine, and doing so has forced me to see things from new perspectives as I immerse myself in a new culture. There&rsquo;s been a sharing of jargon, best practices, and design metrics which has helped us synergize and ship a web-based platform that bridges hardware and software. ...Oh, and we learned some buzzwords, too.</p>
<p>The long answer is a metaphor surrounding &ldquo;it is known,&rdquo; a quote from Game of Thrones. The phrase is typically used by the Dothraki to inform Daenerys Targaryen that, in their eyes, she&rsquo;s wrong (Dany, like me, is a minority in a foreign land). In general the phrase pops up in conjunction with cultural, procedural, or aesthetic disagreements, and has the effect of shutting Dany down, forcing her to reevaluate or re-express her beliefs.</p>
<p>Taken in a technical light, the phrase can simply be interpreted to mean &ldquo;there exists a known best practice here.&rdquo; However, the tone of the quote also conveys a sense of &ldquo;no, sorry, you&rsquo;re wrong, end of story.&rdquo;</p>
<p>As a newbie stepping in, there&rsquo;s a lot that I don&rsquo;t know about the way the web works (as of June, &nbsp;the extent of my JS experience was a page that I hacked together from D3 examples and only ran on localhost). I quickly learned about services, scaling, and callbacks, but also about new syntax, the names of key players in the space, and (surprise) a whole slew of best practices. To my team&rsquo;s credit, my introduction thus far has been surprisingly gentle. Whenever I encounter a teachable moment, Tim and Jia show me the best practice, squash my ignorance, and eliminate the sting of &ldquo;you&rsquo;re wrong, end of story.&rdquo;</p>
<p>It's the "you're wrong, end of story" side of the quote which ultimately&nbsp;guilt-trips me into clarifying why I&rsquo;m inclined do things a certain way. It empowers me to convey important, often overlooked information in a way that&rsquo;s easy for my team, and ultimately you, our users, to digest. As the guy who owns the hardware, it&rsquo;s my job to tell my friends when something&rsquo;s not right electrically, even if it means an impromptu lecture on why we need to keep that specific type of &ldquo;big, ugly capacitor.&rdquo;</p>
<p>I often find myself defending/explaining what I would consider to be the norms of electrical engineering against/to teammates with varying experience in hardware. Analogies serve reasonably well here:</p>
<ul>
<li>Integrated circuits (anything more complicated than a transistor, and &ldquo;ICs&rdquo; for short) should be decoupled with capacitors,often large ones, for optimal performance (would you want an unstable library as a core dependency?)</li>
<li>The silkscreen on a board should be informative (some combination of tooltips, helper text, and nicely placed UI elements)</li>
<li>Schematics should be on a grid (consistent use of whitespace)</li>
<li>Subsystems should to be placed in certain places on the board (don&rsquo;t write it all in main)</li>
</ul>
<p>The list goes on, but you get the idea. (And while I cede that these are ultimately &ldquo;nice to haves&rdquo; rather than &ldquo;must haves,&rdquo; what kind of reputation would you want to establish and what kind of example would you want to set for your new users and budding community?)</p>
<p>In essence, Technical Machine is closing the gap between two worlds, and I&rsquo;m the one who&rsquo;s designing the physical bridges. To do so effectively, I&rsquo;ve had to enforce best electrical practices, but simultaneously question the rationale for my own ideals as I learn more about the foundations on the web side. It&rsquo;s not that one culture is better than the other, but rather that it takes time to grok something new and strike effective compromises.</p>
<p>~e</p>]]></content:encoded>
    <wp:post_name>65440059253</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/64792395344</link>
    <pubDate>Tue, 22 Oct 2013 15:05:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[prism]]></category>
		<category domain="tag" nicename="prism"><![CDATA[prism]]></category>
		<category domain="tag"><![CDATA[snowden]]></category>
		<category domain="tag" nicename="snowden"><![CDATA[snowden]]></category>
		<category domain="tag"><![CDATA[cryptography]]></category>
		<category domain="tag" nicename="cryptography"><![CDATA[cryptography]]></category>
		<category domain="tag"><![CDATA[iot]]></category>
		<category domain="tag" nicename="iot"><![CDATA[iot]]></category>
		<category domain="tag"><![CDATA[internet of things]]></category>
		<category domain="tag" nicename="internet-of-things"><![CDATA[internet of things]]></category>
		<category domain="tag"><![CDATA[jon mckay]]></category>
		<category domain="tag" nicename="jon-mckay"><![CDATA[jon mckay]]></category>
		<category domain="tag"><![CDATA[realtimeconf]]></category>
		<category domain="tag" nicename="realtimeconf"><![CDATA[realtimeconf]]></category>
		<category domain="tag"><![CDATA[microcontrollers]]></category>
		<category domain="tag" nicename="microcontrollers"><![CDATA[microcontrollers]]></category>
		<category domain="tag"><![CDATA[nsa]]></category>
		<category domain="tag" nicename="nsa"><![CDATA[nsa]]></category>
		<category domain="tag"><![CDATA[martin bosslet]]></category>
		<category domain="tag" nicename="martin-bosslet"><![CDATA[martin bosslet]]></category>
		<category domain="tag"><![CDATA[kyle drake]]></category>
		<category domain="tag" nicename="kyle-drake"><![CDATA[kyle drake]]></category>
		<category domain="tag"><![CDATA[encryption]]></category>
		<category domain="tag" nicename="encryption"><![CDATA[encryption]]></category>
		<category domain="tag"><![CDATA[security]]></category>
		<category domain="tag" nicename="security"><![CDATA[security]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/64792395344</guid>
    <!--<wp:post_id>64792395344</wp:post_id>-->
    <wp:post_date>2013-10-22 12:05:00</wp:post_date>
    <wp:post_date_gmt>2013-10-22 19:05:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>PRISM Could Change the Internet of Things For The Better</title>
    <description></description>
    <content:encoded><![CDATA[#####10/22/2013— [Jon McKay](http://blog.technical.io/search/jon+mckay)

<p>At this point, I would hope that everyone has become aware of the inexcusable violation of human rights committed by the NSA and the US government so I won&rsquo;t go into details here. However, as they say, there is a silver lining to every cloud, and I think the silver lining to this dark cumulus is an order of magnitude more attention being given to new encryption techniques.</p>
<p>I attended RealtimeConf in Portland this weekend and was impressed by the browser-side cryptography methods being presented by <a href="https://vimeo.com/77289034">Martin Bosslet</a> and <a href="https://vimeo.com/77289033">Kyle Drake</a> to keep servers from storing private information in plain-text. One attendee was planning on offloading his encryption to his Tessel by gathering ambient sound/temperature/accelerometer sensor data which would generate more random input. Such entropy-based cryptology enables stronger protection against decoding algorithms that seek out deterministic patterns. &nbsp;</p>
<p>As more and more devices get connected to the internet, the potential for invasion of privacy from dragnet programs like PRISM or companies like insurance firms[1] become increasingly more serious and complex. Digital trespassers won&rsquo;t just have the chance to know what websites you visit and emails you send, they can know what you say, what doors you open, when you drive you car, or how much you weigh. It&rsquo;s like being followed around by a &nbsp;ghost&ndash; a ghost with the power to arrest you until you prove your innocence.</p>
<p>Obviously, we&rsquo;ll need many more sophisticated security techniques and trust mechanisms than what currently exists to make the internet of things truly secure, but our attention is finally being drawn to how important it is to protect the amazing treasure the web (and our data) has become. Making the Internet of Things secure is becoming less about protecting our users from leaks and more about protecting users from the platforms themselves. At Technical Machine, we&rsquo;re committed to building an Internet of Things platform that developers can implement a secure system on top of as easily and robustly as possible.</p>
<p>I&rsquo;m thankful that PRISM happened now instead of ten years from now and I&rsquo;m optimistic that we, as a community, will get the chance to make our future more secure.</p>
<p>&ndash;Jon</p>
<p>P.S. If you&rsquo;ve got ideas of how to build secure platforms on open source microcontrollers, &nbsp;we&rsquo;d love to hear from you: <a href="mailto:team@technical.io">team@technical.io</a>.</p>
<p>_____________</p>
<p>[1]&nbsp;<a href="http://www.mckinsey.com/insights/high_tech_telecoms_internet/the_internet_of_things"><span id="docs-internal-guid-253acf1a-e189-69a7-8be2-fed58bd32ead"><span>http://www.mckinsey.com/insights/high_tech_telecoms_internet/the_internet_of_things</span></span></a></p>]]></content:encoded>
    <wp:post_name>64792395344</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/64390979135</link>
    <pubDate>Fri, 18 Oct 2013 11:19:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[Kelsey Breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[Kelsey Breseman]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[company culture]]></category>
		<category domain="tag" nicename="company-culture"><![CDATA[company culture]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/64390979135</guid>
    <!--<wp:post_id>64390979135</wp:post_id>-->
    <wp:post_date>2013-10-18 8:19:00</wp:post_date>
    <wp:post_date_gmt>2013-10-18 15:19:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Introducing Kelsey</title>
    <description></description>
    <content:encoded><![CDATA[#####10/18/2013— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

<p><span>Dear readers,</span></p>
<p><span>Following up on Eric's introductory blog post of last week, it's time for me to introduce myself as well.</span></p>
<p><span>I'm Kelsey Breseman, and among other roles on the team, I write most of the content for our blog, website, and emails. I wrote our first company blog post this summer, introducing Jon, Jia, and Tim under the alias of "the Ghost in the Machine". Since then, my role has expanded to cover all of marketing, and is also leaning over into human resources and community engagement.</span></p>
<p><span>Like the four other members of the team, I'm a 2013 graduate of Olin College. My degree is in Neural Engineering, which at an undergraduate level means I have taken a few neuroscience classes and done some electrical engineering and programming, but I probably won't be designing Skynet or installing mind control devices in humans for at least a couple more years.</span></p>
<p><span>In the meanwhile, I'm useful to Technical Machine because I have a few characteristics unusual for an engineer: I ran a </span><a href="http://franklyspeakingnews.com/"><span>newspaper</span></a><span>, have some experience in HR, and previously worked as a community manager for an </span><a href="http://www.instructables.com/"><span>online community of makers</span></a><span>.</span></p>
<p><span>You can see a great number of my projects </span><a href="http://www.instructables.com/member/SelkeyMoonbeam/?show=INSTRUCTABLES&amp;limit=NONE&amp;sort=VIEWS"><span>here</span></a><span>&ndash; mostly non-technical&ndash; but I think you&rsquo;ll find these most interesting:</span></p>
<p><a href="http://www.instructables.com/id/The-Cloud-Information-Storing-Wall-Art/" title="The Cloud"><img height="286px;" src="https://lh6.googleusercontent.com/qMrcwnQFuRjO1hYI666q8EMN6Q51sVdou4slcMxe3fI3XKt2qwgg9YPulvugGe2ONU7RwkjiU-6CO95gFTTLEK_Z5KbwdI1oV-O4RZXKOO5QsGnKACQQ82Zs" width="241px;" /></a><a href="http://www.instructables.com/id/Fiber-Optic-Laser-Fans/" title="Fiber Optic Laser Fans"><img height="287px;" src="https://lh6.googleusercontent.com/LLQtzMBq8I5f6ii-7HdSWCs96RsVLPtmzhWjgx6XnNVvtn1xXNUFjx8H1t9b80n0lVkOMPl2vQXnRP6lK_AOGleAR6zIuNR8PAdKHSweoKM5DzVOy9l0_OiA" width="242px;" /></a><a href="http://www.instructables.com/id/AutoFrost-CNC-Cake-Decorator-1/" title="Autofrost CNC Cake Decorator"><img height="284px;" src="https://lh6.googleusercontent.com/e86jUgts8dfmBWXxv4P7nxj3PsdJAAGv4oHGjDT564us7Azkn18esaLkxATLLmfL6yx8MsN6UFA17nuFnqf2xKtVl5B__EpyEaUeeK81eTgJgAbn04abvjK0" width="240px;" /></a><a href="http://www.instructables.com/id/How-to-Harvest-Power-from-an-Audio-Jack/" title="How to Harvest Power from an Audio Jack"><img height="285px;" src="https://lh4.googleusercontent.com/qR0O3iKsINKJXpTMpsSmpI5ECjvLaxLP1Fknhwra18JtmYIazbRAedqazbsaFxhl8MhSq-g8Odb0VBrPU3RC_rOtHk3f5vADAV4YYFOJ4tUIIk3mocySCkod" width="241px;" /></a><span></span></p>
<p><span>Lately, I&rsquo;ve been going to conferences, talking to investors, maintaining Accounting, keeping up our blog/Twitter/Facebook presence, and taking crash courses in Finance and </span><a href="https://github.com/olinjs"><span>Node.js (courtesy of Tim &amp; Jia)</span></a><span>. Soon, I should be working out our hiring practices, researching potential integrations, and generally thinking about the future of the company. That is, when I&rsquo;m not badgering my teammates to contribute their own thoughts to the blog.</span></p>
<p><span>Stay in touch! I&rsquo;m </span><a href="https://twitter.com/SelkeyMoonbeam"><span>@selkeymoonbeam</span></a><span> on Twitter, or kelsey at technical.io.</span></p>
<p><span>--</span></p>
<p><span>Kelsey Breseman</span></p>
<p><span>&nbsp;</span></p>]]></content:encoded>
    <wp:post_name>64390979135</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/64348199725</link>
    <pubDate>Thu, 17 Oct 2013 21:32:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[layout]]></category>
		<category domain="tag" nicename="layout"><![CDATA[layout]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/64348199725</guid>
    <!--<wp:post_id>64348199725</wp:post_id>-->
    <wp:post_date>2013-10-17 18:32:00</wp:post_date>
    <wp:post_date_gmt>2013-10-18 01:32:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Layout Updates</title>
    <description></description>
    <content:encoded><![CDATA[#####10/17/2013— [Updates](http://blog.technical.io/search/update)

<h3 class="null"><span>Redesigning Tessel</span></h3>
<p><span>We&rsquo;ve been hard at work the past week redesigning Tessel. We just sent in the design files yesterday<span id="docs-internal-guid-145ae692-b9f5-2822-acbe-6d4495a42f1f"><span>&ndash;</span></span>&nbsp;here&rsquo;s a render of the new board:<br /><br /><img height="309" src="https://s3.amazonaws.com/uploads.hipchat.com/49770/345479/wj8C1KxlfYJnxiC/upload.png" width="500" /><br /><br />Besides making the board red (to match our logo), there are several other changes we&rsquo;ve made:</span><span></span></p>
<ul>
<li><span>added an optional* place to plug in external power besides the USB cable</span></li>
<li><span>added an optional* external antenna</span></li>
<li><span>4 mount holes instead of 2</span></li>
<li><span>moved the buttons to a much better location</span></li>
<li><span>exposed the reset pin so that Tessel can be reset by an external signal</span></li>
<li><span>added ESD protection to the USB lines so that the board doesn&rsquo;t fry</span></li>
</ul>
<p><span>*optional: we&rsquo;ll leave through hole mounts in case you want to add these things</span></p>
<h3 class="null"><br />Sourcing Issues</h3>
<p><span>We just got done talking to a supplier for the main chip on Tessel, the LPC1830FET180, and they are estimating a 15 to 20 week lead time. We&rsquo;ve been told that there is zero inventory in the distribution channel and none at NXP either. This is a new part, and before choosing it we talked with NXP representatives who assured us that it was in full production.<br /><br />We made estimates of a 12 week lead time at the latest. The lower volumes that we&rsquo;ve been using for the test batches of Tessels we have been making have been readily available, so we thought that this estimate was reasonable. The beta batch is not affected by this as we were able to get those chips just fine.<br /><br />At the moment, Dragon is still processing the payments from backers, but we&rsquo;ve taken out a line of credit in order to make the purchase as soon as possible. Assuming a 15 week lead time from this week, we&rsquo;re looking at getting the LPC1830 around the 2nd or 3rd week of January. This puts the ship date of Tessel around mid-February.<br /><br />We&rsquo;re doing our best to make sure this doesn&rsquo;t turn into a delay and will continue to keep you updated on any manufacturing issues we run into. Meanwhile, we&rsquo;ll continue to push on this issue with NXP to get a more accurate date on when we can ship.&nbsp;</span><br /><br /></p>
<h3 class="null"><span>Modules</span></h3>
<p><span>We&rsquo;ve also changed the module layouts a little. Here&rsquo;s what the new accelerometers look like:<br /><br /><img height="223" src="https://gallery.mailchimp.com/f32fc2fe1a1f2c3463a081e4b/images/accelerometer_TM0100.jpg" width="400" /><br /><br />We moved all the detailed information to the back of the board. This serves the dual purpose of leaving more room for us to put components on the front, and also gives you an easier way to find information about the module by flipping it over.</span></p>
<h4 class="null"><br /><span>Audio</span></h4>
<p><span id="docs-internal-guid--35c1273-bfe5-a4c3-813a-58da85f8f785"><span>Audio playback (with MP3) is working, with an internet streaming demo on its way.</span></span></p>
<h4 class="null"><br /><span>Camera</span></h4>
<p><span id="docs-internal-guid--35c1273-bfe6-d73b-d625-164dcfb0a886"><span>We&rsquo;re still in the process of selecting a proper camera module. We have a few samples coming in so we can test which is best.</span></span></p>
<h4 class="null"><br /><span>2G (GPRS)</span></h4>
<p><span>We&rsquo;re designing the 2G module this week and will hopefully have a design ready to prototype by the end of the week.</span></p>
<h4 class="null"><br /><span>BLE</span></h4>
<p><span>We are switching from the&nbsp;</span><a href="https://www.bluetooth.org/tpg/RefNotes/BLE112_Datasheet1.pdf" target="_self"><span>BLE112</span></a><span>&nbsp;to the&nbsp;</span><a href="http://www.mouser.com/ds/2/52/BLE113_Datasheet-224874.pdf" target="_self"><span>BLE113</span></a><span>&nbsp;module. The major differences between the 112 vs 113 is that the 113 is smaller and has better power consumption.</span></p>]]></content:encoded>
    <wp:post_name>64348199725</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/63748658066</link>
    <pubDate>Fri, 11 Oct 2013 14:39:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[javascript]]></category>
		<category domain="tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[programming]]></category>
		<category domain="tag" nicename="programming"><![CDATA[programming]]></category>
		<category domain="tag"><![CDATA[programming language]]></category>
		<category domain="tag" nicename="programming-language"><![CDATA[programming language]]></category>
		<category domain="tag"><![CDATA[web development]]></category>
		<category domain="tag" nicename="web-development"><![CDATA[web development]]></category>
		<category domain="tag"><![CDATA[web developers]]></category>
		<category domain="tag" nicename="web-developers"><![CDATA[web developers]]></category>
		<category domain="tag"><![CDATA[oshw]]></category>
		<category domain="tag" nicename="oshw"><![CDATA[oshw]]></category>
		<category domain="tag"><![CDATA[tim ryan]]></category>
		<category domain="tag" nicename="tim-ryan"><![CDATA[tim ryan]]></category>
		<category domain="tag"><![CDATA[python]]></category>
		<category domain="tag" nicename="python"><![CDATA[python]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/63748658066</guid>
    <!--<wp:post_id>63748658066</wp:post_id>-->
    <wp:post_date>2013-10-11 11:39:00</wp:post_date>
    <wp:post_date_gmt>2013-10-11 18:39:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>JavaScript is a fixed point</title>
    <description></description>
    <content:encoded><![CDATA[#####10/11/2013— [Tim Ryan](http://blog.technical.io/search/tim+ryan)

Since JavaScript was <a href="http://web.archive.org/web/20070916144913/http://wp.netscape.com/newsref/pr/newsrelease67.html">publicly announced in 1995</a>, there have been an enormous amount of manhours put into retaining its backward compatibility. Barring some false starts (&lt;layer&gt;s and `document.all` are so fresh) your middle school GeoCities website from 1999 might even still run today.

Lost in the noise of cross-browser compatibility is how significant this is to JavaScript's history: since 1996, there have been at least two mainstream implementations of JavaScript. Of the <a href="http://redmonk.com/sogrady/2013/07/25/language-rankings-6-13/">top programming languages</a>, many of those released in the mid-90's didn't start seeing multiple implementations until much later, and many stil only have one major distribution. (Python, Ruby, and especially Perl are much different today, with many exciting research and production VMs available)

This approach to change shapes the community in interesting ways. The transition from Python 2 to 3 to usher radical changes in the language was designed to take <a href="http://programmers.stackexchange.com/questions/63859/why-do-people-hesitate-to-use-python-3">five years</a>, a change that took a lot of manpower from the community to make happen (including tons of massive codebases). This type of radical restructuring never worked with JS. <a href="http://www.nczonline.net/blog/2006/01/10/javascript-1-2-must-die/">Changes made in JavaScript 1.2 (1997)</a> were undone once IE3 was released, so Netscape could retain compatibility. In the 2000’s, the major restructuring that was JavaScript 2.0 collapsed after failing to reach consensus (surprisingly spinning off ActionScript 2.0, Flash's programming language, in the process).

Since 2008, ECMAScript Harmony has been the new direction for JavaScript, and it takes the same path the web always has: incremental improvement. We'll have `yield` operators and new collections in *every* engine rather soon, all without breaking legacy code.

After announcing [Tessel](http://tessel.io/) (our development board programmable in JavaScript), one of the biggest questions we've received is why we didn't pick Python, a language that's very popular in the OSHW community already. Our first motivation was more technical than ideological: Node's package manager made it easy to install modules for a single project, and the majority of Node modules are written in JavaScript itself, rather than in C. 

In ["The Future of Programming in Node.js"](https://groups.google.com/forum/#!msg/nodejs/9afurRCTlOc/JKVo0ThFZIsJ), Isaac places a strong emphasis on Node's backward compatibility and how code written today should work years from now. At the same time, the V8 API changed significantly between Node 0.10 and 0.12, requiring changes to the binary API.

We're definitely paying attention to the questions of running other languages on Tessel, as well as supporting native modules. But for now (to steal from [Jeff Atwood](http://www.codinghorror.com/blog/2007/07/the-principle-of-least-power.html)) we think any application that can be written in JavaScript, will *continue to work*. We're pretty excited by the choice to use JavaScript at a low level, for devices that run today and those that need to run for the next ten years.

—Tim Ryan]]></content:encoded>
    <wp:post_name>63748658066</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/63602294200</link>
    <pubDate>Wed, 09 Oct 2013 20:36:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[electrical engineering]]></category>
		<category domain="tag" nicename="electrical-engineering"><![CDATA[electrical engineering]]></category>
		<category domain="tag"><![CDATA[hello world]]></category>
		<category domain="tag" nicename="hello-world"><![CDATA[hello world]]></category>
		<category domain="tag"><![CDATA[eric kolker]]></category>
		<category domain="tag" nicename="eric-kolker"><![CDATA[eric kolker]]></category>
		<category domain="tag"><![CDATA[company culture]]></category>
		<category domain="tag" nicename="company-culture"><![CDATA[company culture]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/63602294200</guid>
    <!--<wp:post_id>63602294200</wp:post_id>-->
    <wp:post_date>2013-10-09 17:36:00</wp:post_date>
    <wp:post_date_gmt>2013-10-10 00:36:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>var eric = require(“electrical”);</title>
    <description></description>
    <content:encoded><![CDATA[#####10/9/2013— [Eric Kolker](http://blog.technical.io/search/eric+kolker)

<p>Hey, readers! My name is Eric and I&rsquo;m an&ndash; scratch that&ndash; <em>the</em> quasi-dedicated electrical engineer on the team. I joined Technical Machine as a consultant in June, and was thrilled to be offered an official spot.</p>
<p>First, some electrical engineering creds. Prior to creating next-gen, web-ready microcontrollers, my portfolio included audio visualizers (analog and FPGA-based variants), a switched-mode current source, a class D audio amplifier integrated circuit (design files and bare metal layout shown below), a &ldquo;self-balancing, two-wheeled, rideable platform&rdquo; (coughsegwaycoughcough), and an ultra high bandwidth, high speed wireless data link for next generation CT scanners. My name may even be in space soon, on a few PCBs I designed in high school for a picosatellite that&rsquo;s finally supposed to be launching in a month or two.</p>
<p><img alt="image" height="290px;" src="https://lh4.googleusercontent.com/TEIJJl5A1i44w6XoABqleWvtW0qu3LySnw_HPankeRljN_dc-_Aiq22qbCj5PM2wQai4vgBIgvflBYwkwA8t-YUIi6QWBz8CCuamYzmDjevvVLBMsJLk2Dl2zA" width="291px;" /> &nbsp;&nbsp;<img alt="image" height="290px;" src="https://lh3.googleusercontent.com/3RnSj0lpO4Ah9ZTp82NXgUYpjTTrqRWjA0WuAkuSHupwJ-6bgRb24N8tlH2p761kVNgs2b7lZJdmbSYP7WWAYnRFzK5OZEtH5ln7yokSxFE4cSMjviRTeprU" width="309px;" /></p>
<p>I&rsquo;ve worked with NASA, Boston Dynamics (have you seen the new <a href="http://www.youtube.com/watch?v=wE3fmFTtP9g">Wildcat video</a>? Holy clockballs.), and Microsoft, and have helped build things like reactive night lights and high precision tactile feedback sensors over the years as an independent contractor.</p>
<p>Since joining up, I&rsquo;ve owned the redesign of the Tessel hardware and have been the primary force behind bringing modules online and pushing them out the door. I&rsquo;ve also been busy enforcing best practices on the electrical side and working to help make sure the leap we encourage and enable from software to hardware has a gentle and well-documented landing.</p>
<p>In the coming weeks I&rsquo;ll be taking another pass at the Tessel board and continuing to make our physical offerings as nice as our digital ones. I&rsquo;ve also got another post in the works about what it&rsquo;s been like to join a team of software developers as a guy who, until very recently, didn&rsquo;t speak JS. Stay tuned!</p>
<p>~e</p>]]></content:encoded>
    <wp:post_name>63602294200</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/63408416647</link>
    <pubDate>Mon, 07 Oct 2013 18:08:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[statistics]]></category>
		<category domain="tag" nicename="statistics"><![CDATA[statistics]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[smart house]]></category>
		<category domain="tag" nicename="smart-house"><![CDATA[smart house]]></category>
		<category domain="tag"><![CDATA[smart home]]></category>
		<category domain="tag" nicename="smart-home"><![CDATA[smart home]]></category>
		<category domain="tag"><![CDATA[rccar]]></category>
		<category domain="tag" nicename="rccar"><![CDATA[rccar]]></category>
		<category domain="tag"><![CDATA[rcplane]]></category>
		<category domain="tag" nicename="rcplane"><![CDATA[rcplane]]></category>
		<category domain="tag"><![CDATA[remote control]]></category>
		<category domain="tag" nicename="remote-control"><![CDATA[remote control]]></category>
		<category domain="tag"><![CDATA[dragon innovation]]></category>
		<category domain="tag" nicename="dragon-innovation"><![CDATA[dragon innovation]]></category>
		<category domain="tag"><![CDATA[backers]]></category>
		<category domain="tag" nicename="backers"><![CDATA[backers]]></category>
		<category domain="tag"><![CDATA[crowdfunding]]></category>
		<category domain="tag" nicename="crowdfunding"><![CDATA[crowdfunding]]></category>
		<category domain="tag"><![CDATA[skynet]]></category>
		<category domain="tag" nicename="skynet"><![CDATA[skynet]]></category>
		<category domain="tag"><![CDATA[data]]></category>
		<category domain="tag" nicename="data"><![CDATA[data]]></category>
		<category domain="tag"><![CDATA[drones]]></category>
		<category domain="tag" nicename="drones"><![CDATA[drones]]></category>
		<category domain="tag"><![CDATA[diy]]></category>
		<category domain="tag" nicename="diy"><![CDATA[diy]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/63408416647</guid>
    <!--<wp:post_id>63408416647</wp:post_id>-->
    <wp:post_date>2013-10-07 15:08:00</wp:post_date>
    <wp:post_date_gmt>2013-10-07 22:08:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Project Statistics from Backers</title>
    <description></description>
    <content:encoded><![CDATA[#####10/7/2013— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

<p><span>One of the most important pieces of starting a company is understanding your audience. At Technical Machine, we&rsquo;ve been really impressed by the number of people who reach out to us. People ask us about the specifics of how Tessel works, whether we can integrate with their products, or even asking if they can help. Keep it up! We enjoy hearing from you.</span></p>
<p><span>We sent out a few surveys to our backers throughout the course of our Dragon Innovation campaign to ask them what stretch goal modules we should offer. This was really useful in helping us decide what to do immediately, but we also took the opportunity to ask our backers why they had purchased a Tessel:</span></p>
<p><span><span><span></span><img height="309px;" src="https://lh5.googleusercontent.com/f0ifsWlNwcOQe1rUXkt3tgZFdYki1jlQUyWfFfyG4rR1QQHRbN-dB_Jc0UgzWu4x_QioNAKi-yMorJK4WGd4_IbZzIjT_iNoedF9WU8sbRfVxsP9JZ64T7Nl" width="624px;" /><span></span></span></span></p>
<p><em>(Take this graph with a grain of salt; not all of our backers responded here.)</em></p>
<p><span><span><span></span></span></span></p>
<p><span>What does this graph say to us? Here are the main insights:</span></p>
<ol>
<li>
<p><span>&ldquo;JS and Node-compatibility on a microcontroller is a childhood dream of mine.&rdquo; Our backers probably come from a web development background&ndash; hence the excitement about JS and Node.</span></p>
</li>
<li>
<p><span>&ldquo;The tech seems cool and I wanted to try it out.&rdquo; Backers on crowdfunding platforms, as expected, are inherently excited about new technologies. No one is surprised.</span></p>
</li>
<li>
<p><span>&ldquo;I&rsquo;m excited about where I think you guys are going&rdquo; is interesting because it seems almost like an investment. We&rsquo;ve had a few verbal/email reactions from people who think Tessel might be the next evolution in democratizing hardware. Thanks for believing in us&ndash; we&rsquo;re trying to make sure you&rsquo;re right!</span></p>
</li>
<li>
<p><span>&ldquo;I don&rsquo;t know hardware too well, but I want to build and this project gives me hope.&rdquo; Personally, I had expected more backers to be in this category. The fact that this wasn&rsquo;t a main self-categorization suggests that some of our initial audience is from people who have at least tried hardware before. Perhaps this is not so surprising; Jon, Jia, and Tim came up with the idea for Tessel after becoming frustrated with existing platforms for making internet-connected hardware&ndash; likely many of our backers are coming from a similar place.</span></p>
</li>
<li>
<p><span>&ldquo;I want to incorporate Tessel into a professional/corporate project.&rdquo; This is a category we&rsquo;re keeping an eye on. Tessel&rsquo;s OS is designed so that the same code can be run from prototype to full-production product, and we&rsquo;re excited about working with other entrepreneurs in the Internet of Things space. Some of these backers have already reached out to us to tell us their stories, and we&rsquo;re really excited to work with them!</span></p>
</li>
</ol>
<p><span><span><span></span></span></span></p>
<p><span>Through the same backer survey and by email, we&rsquo;ve been asking people about what projects they&rsquo;d like to do with Tessel. Here&rsquo;s what we know:</span><img height="324px;" src="https://lh6.googleusercontent.com/ltAXOf4p4qZJRjh1OuR7oQzqCzjql13MHPZwxbkSjgZ0aJZe35KWqfi0yLMDWu5NaPt2YWUK_VXDho7Kv9wDD5IEfFx4Dli7RwwcE_ByOCuQTqGz4kqRtemo" width="624px;" /><span></span></p>
<p><em>(Take this graph with an even bigger grain of salt; sample size is small and categorizations are my own.)</em></p>
<p><span></span><span>By far the largest portion of the backers surveyed were interested in home automation projects&ndash; ranging from energy conservation applications to automated barbecues. Additionally, you could arguably lump the (surprisingly large) percentage interested in pet-related applications into that category for a whopping 40% of the pie chart.</span></p>
<p><span><span><span></span></span></span></p>
<p><span>This is one place where we see a bit of data skew. The Project Plans chart incorporates data from a backer survey and from emails we have received. The people with the most incentive to reach out to us directly are entrepreneurs with industry-type applications. (My categorization of &ldquo;industry&rdquo; rather broadly stands for any application you could make a business out of&ndash; though you could arguably add RC into that category for a combined 32.7% of the pie.) Most of the &ldquo;Smart home&rdquo; category comes from survey data and most of the &ldquo;Industry&rdquo; category comes through emails. Thus, since the Smart home and other categories have little reason to reach out to us, there are likely even more of them than are represented here.</span></p>
<p><span><span><span></span></span></span></p>
<p><span>Oh- and in case you were wondering, that &gt;10% &ldquo;Joke&rdquo; wedge is just our backers having a sense of humor&hellip; or at least, we assume they aren&rsquo;t really plotting Skynet or world domination.</span></p>
<p><span><span><span></span></span></span></p>
<p><span>What does this mean for us?</span></p>
<p><span><span><span></span></span></span></p>
<p><span>The main reaction here is that these statistics are interesting, but they don&rsquo;t mean much&ndash; at least not quantitatively. Partly, the data collection is hard to trust. Coming from a scientific background, I would throw out the results here as &ldquo;not enough information&rdquo;, since the sample size is so small&ndash; on the order of 300 respondents out of our over 1,000 backers, and easily self-selecting.</span></p>
<p><span><span><span></span></span></span></p>
<p><span>We&rsquo;ve also been warned that our backers on crowdfunding might not be representative of our long-term audience. This makes sense; early adopters understand the value of a project before it is fully realized, and often back on crowdfunding campaigns because they want to be a part of that project&rsquo;s future. We love our early adopters precisely for this reason, but it also means that not all of our backers had specific plans in mind when they backed us. Thus, it&rsquo;s hard to gauge what the long-term uses of Tessel will be based solely on backers&rsquo; responses.</span></p>
<p><span><span><span></span></span></span></p>
<p><span>On the whole, these results are a good reality check for us; mostly, nothing too surprising has shown up in these graphs, and we&rsquo;ve enjoyed hearing about specific projects from our supporters. </span><span><a href="mailto:team@technical.io">Keep in touch!</a></span></p>
<p><span><span></span><span>-Kelsey</span></span></p>]]></content:encoded>
    <wp:post_name>63408416647</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/63089046642</link>
    <pubDate>Fri, 04 Oct 2013 12:01:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[Tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[Tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
		<category domain="tag"><![CDATA[lean startup]]></category>
		<category domain="tag" nicename="lean-startup"><![CDATA[lean startup]]></category>
		<category domain="tag"><![CDATA[tdd]]></category>
		<category domain="tag" nicename="tdd"><![CDATA[tdd]]></category>
		<category domain="tag"><![CDATA[samples]]></category>
		<category domain="tag" nicename="samples"><![CDATA[samples]]></category>
		<category domain="tag"><![CDATA[crowdfunding]]></category>
		<category domain="tag" nicename="crowdfunding"><![CDATA[crowdfunding]]></category>
		<category domain="tag"><![CDATA[internet of things]]></category>
		<category domain="tag" nicename="internet-of-things"><![CDATA[internet of things]]></category>
		<category domain="tag"><![CDATA[internet of everything]]></category>
		<category domain="tag" nicename="internet-of-everything"><![CDATA[internet of everything]]></category>
		<category domain="tag"><![CDATA[pervasive computing]]></category>
		<category domain="tag" nicename="pervasive-computing"><![CDATA[pervasive computing]]></category>
		<category domain="tag"><![CDATA[jon mckay]]></category>
		<category domain="tag" nicename="jon-mckay"><![CDATA[jon mckay]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/63089046642</guid>
    <!--<wp:post_id>63089046642</wp:post_id>-->
    <wp:post_date>2013-10-04 9:01:00</wp:post_date>
    <wp:post_date_gmt>2013-10-04 16:01:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>8 Tips For Jumpstarting a Hardware Startup</title>
    <description></description>
    <content:encoded><![CDATA[#####10/4/2013— [Jon McKay](http://blog.technical.io/search/jon+mckay)

<p></p>
<p></p>
<p><span>I'm Jon McKay, co-founder of Technical Machine. Just over 100 days ago, in June of this year, two of my best friends and I started a hardware company - totally new territory for us. Today our startup has nearly $200k of backing in crowdfunding revenue, and we&rsquo;re working with investors to make sure we can deliver an awesome product to hundreds of thousands of customers.</span></p>
<p></p>
<p><span>Despite our web development background, we decided that making hardware was the right venture for us because there was no hardware that existed that would have the functionality our software required. Granted, we are making </span><a href="http://technical.io"><span>hardware more accessible to our fellow web developers</span></a><span>, but it&rsquo;s a hardware company nonetheless. We&rsquo;d all worked at startups before and knew how to move fast with software, but making a hardware company just as agile was a completely new experience.</span></p>
<p></p>
<p><span>There are eight ideas that helped us move fast, and if you come from a web background and are looking to build a hardware company like I did, hopefully they'll help you move faster too:</span></p>
<p><span><span><br /><span></span></span></span></p>
<p><strong>1. The Lean Startup Still Applies</strong></p>
<p></p>
<p><span>All the rules for lean startups still apply for hardware companies. Make the easiest, quickest prototype and get user feedback on it. Once you can prove you&rsquo;re heading down the right path, iterate as quickly as you can. We prototyped with an Arduino for the first few weeks to get developers&rsquo; feedback on our direction. Only after ensuring we struck a chord did we start using more specialized hardware.</span></p>
<p><span><span><br /><span></span></span></span></p>
<p><strong>2. Use Evaluation Boards to Save Money</strong></p>
<p></p>
<p><span>A great way to create hardware prototypes iteratively is to order &ldquo;evaluation boards&rdquo; for the chips you&rsquo;re going to use. Most integrated circuit (IC) manufacturers sell pre-made circuit boards for some of their chips that include all of the support circuitry the chip needs to work, along with nice connectors for integrating the board into a more complete system. As you build up your prototype, you can just wire those eval modules together. The major draw here is that you can put off designing your own circuit board as long as possible. When small manufacturing runs and assembling your own boards cost you thousands of dollars, eval modules can really spread out your runway. </span></p>
<p><span><span><br /><span></span><br /><span></span></span></span></p>
<p><strong>3. Use Reference Designs to Maintain Sanity</strong></p>
<p></p>
<p><span>You&rsquo;ll have a lot less trouble with weird hardware bugs if you stick to reference designs. Every (good) manufacturer will release documentation with their ICs that contains a section with a reference design. The reference design gives you an idea of all the other components (resistors, capacitors, etc.) that you&rsquo;ll need to support the IC (see example for our WiFi chip below). &nbsp;Stick as close to that design as possible (especially for high frequency chips) and your technology will work much more reliably.</span></p>
<p><span><span><br /><span></span><img alt="image" height="384px;" src="https://lh4.googleusercontent.com/7ld6Ipd_1HEQ-vkHZ78SpQVohAIaCVPulmGm_TiGxXW3OTTPkivkfu-jJeFLgPRpcgC9YRbKVKkExZzZTIpyhmncKoj5LvglLMhZ8dFUG7giKMquDIF-wH6-" width="624px;" /><span></span></span></span></p>
<p><span>&nbsp;</span></p>
<p><strong>4. Use the Web for Validation</strong></p>
<p></p>
<p><span>Driving traffic to your hardware&rsquo;s website is crucial for gaining early mindshare and validating your ideas. When we got started with Tessel, we felt like we couldn&rsquo;t get an accurate picture of how our users would like the device by reading about it on a website. We felt that they wouldn&rsquo;t &ldquo;understand the experience&rdquo;. As if there was something magical about using the device that words just can&rsquo;t describe. The fact is, if you can&rsquo;t get across the value of your product with words, then you&rsquo;ll never be successful. Almost no one will have the opportunity to try your product before they buy it. Make a website and get it out there as soon as possible (well before you&rsquo;ve finished actually making it). When our website was picked up on HackerNews (a month before we planned to launch ourselves), we got over 10,000 awesome, excited people on our mailing list that we could notify when our crowdfunding campaign began.</span></p>
<p><span><span><br /><span></span><br /><span></span></span></span></p>
<p><strong>5. Crowdfunding Is Not For Revenue</strong></p>
<p></p>
<p><span>Crowdfunding is completely revolutionizing the hardware world, especially hardware startups. By gauging interest and essentially eliminating the need for up-front inventory, crowdfunding has changed the way entrepreneurs start (and even run) their hardware companies. But for the time being, crowdfunding isn&rsquo;t so much a means of making money on a finished product, as it is a way of getting the most important pieces of validation: how many people (and who) will click the buy button, how many won&rsquo;t, and why. You&rsquo;ll hear it in comments, tweets, articles, and blogs, and you&rsquo;ll need to analyze the feedback to make your product better. An entire crowd of early adopters become accessible to help you grow your business in the right direction. Crowdfunding makes you data rich, not money rich &ndash; use it to grow. </span></p>
<p><span><span><br /><span></span></span></span></p>
<p><strong>6. Test Driven Driven Development</strong></p>
<p></p>
<p><span>Test Driven Development is not just a software development process; it speeds up hardware development as well. When the start date for our crowdfunding campaign was approaching, we had a two-week turn-around time for each hardware revision. Hardware companies in China can get that turn around time down to days, but for U.S. manufacturing (at least in Boston), two weeks is fairly fast. Since it takes so long to get the boards, the key is to reduce the amount of time manufacturers are </span><span>not</span><span> spending making your boards. Here is Technical Machine&rsquo;s process:</span></p>
<ol>
<li>
<p><span>Create a test suite. </span><span>Before you have even sent out a board revision to be made, you should have a document describing each feature that needs to get tested, each test for each feature, and how to run those tests.</span><span> </span><span>When you begin manufacturing thousands of units, you&rsquo;ll also need to create hardware test rigs.</span></p>
</li>
<li>
<p><span>Know what you want to get out of each test.</span><span> Taking the time to decide exactly what you want to measure and how you plan to measure it before powering on the device will save you time, tears, and inventory. In hardware it&rsquo;s exceptionally rare that &ldquo;it&rsquo;ll be different next time&rdquo; you power it unless you change something physical on the board. More importantly, if the product on your desk breaks, you often need to go out and build a new one from scratch, not just hit compile.</span><span></span></p>
</li>
<li>
<p><span>Create a F*#!-Ups Document. </span><span>There is something wrong with every revision. Expect it. Stop crying. It&rsquo;s just going to happen. Create a document to keep track of every problem with the board, because as soon as you plug it in, you&rsquo;ll find them. Run through the whole suite of tests, adding every problem to the list.</span></p>
</li>
<li>
<p><span>Revise continuously. </span><span>While one engineer is testing the revision and noting mistakes, another should be fixing those problems in the design.</span></p>
</li>
</ol>
<p></p>
<p><span>Each board revision consisted of about a week fixing the previous revision and a week waiting for the new boards to come in. During the manufacturing week, we would write all the firmware for new features and the test suites firmware.</span></p>
<p><span><span><br /><span></span></span></span></p>
<p><strong>7. Free Samples (Shhh!)</strong></p>
<p></p>
<p><span>Most manufacturers will give you free samples of their ICs if you just ask for them. Some manufacturers even offers samples on their website and will overnight ship them for free. Take advantage of it &ndash; they will dramatically cut prototyping costs. We&rsquo;ve probably used hundreds of dollars worth of WiFi module samples alone.</span></p>
<p><span>&nbsp;</span></p>
<p><strong>8. Open Source Hardware Is Growing</strong></p>
<p>As most software developers know, the ability to use open source code dramatically increases productivity and learning.&nbsp;The same principle holds true for open source hardware. Great open source hardware companies like Sparkfun and Adafruit allowed us to<br />adopt their designs for Tessel so that we didn't have to come up with the billionth RFID antennae on our own. In turn, we give&nbsp;all of our hardware designs back to the community so that we can grow and innovate together.</p>
<p><span>&nbsp;</span></p>
<p><span>Those eight ideas helped us keep our overhead low and get our minimum viable product in front of potential customers as fast as possible. Of course, Tessel is only a circuit board with no industrial designed casing or external components so I can&rsquo;t speak to the problems you&rsquo;ll encounter there. As (open source) hardware startups become more and more popular, I hope that we&rsquo;ll hear from more entrepreneurs who will shed some light on those topics and how we can work to make hardware as agile and iterative as software development has become.</span></p>
<p>-Jon</p>]]></content:encoded>
    <wp:post_name>63089046642</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/62761817861</link>
    <pubDate>Mon, 30 Sep 2013 20:06:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[crowdfunding]]></category>
		<category domain="tag" nicename="crowdfunding"><![CDATA[crowdfunding]]></category>
		<category domain="tag"><![CDATA[GPRS]]></category>
		<category domain="tag" nicename="gprs"><![CDATA[GPRS]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/62761817861</guid>
    <!--<wp:post_id>62761817861</wp:post_id>-->
    <wp:post_date>2013-09-30 17:06:00</wp:post_date>
    <wp:post_date_gmt>2013-10-01 00:06:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Updates</title>
    <description></description>
    <content:encoded><![CDATA[#####9/30/2013— [Updates](http://blog.technical.io/search/update)

<h1><strong>GPRS module for internet anywhere!</strong></h1>
<p><span>Thanks for all of your support so far! We unlocked the $130k module for GPRS last night which means </span><a href="http://www.dragoninnovation.com/projects/22-tessel"><span>you can now order a module that has SIM card support</span></a><span>. </span><span><a href="http://clicktotweet.com/yE1hW">Tweet this.</a></span></p>
<p></p>
<p><span>The next stretch goal module will be at $160k, and will be one of the following:</span></p>
<p></p>
<blockquote>
<p><em>nRF24</em><span> &ndash; low power wireless communication with mesh capabilities (good for tying lots of Tessels together without WiFi)</span></p>
<p></p>
<p><em>IMU</em><span> &ndash; accelerometer, gyroscope, and algorithms to calculate position and heading (good for more advanced motion tracking</span></p>
<p></p>
<p><span><em>Thermocouples</em> </span><span>&ndash; high-precision temperature measurement that works in liquids, too (good for monitoring high temperatures at a distance)</span></p>
<p><em><span>Other</span></em><span> &ndash; do you have a better idea? </span><a href="mailto:team@technical.io">Let us know!</a></p>
</blockquote>
<p></p>
<p><span>We sent out a survey to our backers earlier today so they could choose&ndash; look for an update soon!</span></p>
<p><img alt="image" height="191px;" src="https://lh5.googleusercontent.com/bzZgpNQN5_6th3y-FNN1lzL1SRJXwIJfAqq_cQL5QgAOOxHhUZNAuPXcBY-kgIFyHtVjXAplu9-IfHFF_4zGZNDWof-eJLKCZLnUpoyqrrQqfBfADVhyKdyLaw" width="593px;" /></p>
<p></p>
<h1><strong>Tessel at RealtimeConf (Portland Oct 18/19)</strong></h1>
<p><span>Continuing the West Coast tour, Tessel is coming to </span><a href="http://2013.realtimeconf.com/"><span>RealtimeConf</span></a><span>! The conference takes place in Portland, October 18th &amp; 19th. Speakers include Brendan Eich, Isaac Schlueter, and Amber Case&ndash;so obviously we&rsquo;re excited to be there. Come say hi and try programming on Tessel!</span></p>
<p><span>Get $100 off on tickets by entering the discount code &lsquo;TESSELATIONS&rsquo;.</span></p>
<p><span>Additionally, Realtimeconf just announced a scholarship ticket for women&ndash; read more about it </span><a href="http://keepingitrealtime.cmail1.com/t/ViewEmail/r/5CD90233288554F22540EF23F30FEDED/5A8F6BE69B49A031DCC9454293137CA2"><span>here</span></a><span>.</span></p>
<p><span id="docs-internal-guid-67f54145-7155-97bd-1334-e47544dda04e"><br /><span></span><img alt="image" height="46px;" src="https://lh3.googleusercontent.com/AK3DKJRvi7aH8fxY_sqJZVHKkAOhngAuis4IanFudTeplw3YpBoNqg-6V9gci2sgav9gP3Sm1x1uTltme-jOInLkdIk3OUHSnmm6iSXViQ82leONc7LEg6mL" width="668px;" /><span></span></span></p>
<p></p>
<h1><strong>Website Redesign</strong></h1>
<p><span>We refreshed </span><a href="http://tessel.io/"><span>Tessel.io</span></a><span> last week&ndash; we&rsquo;ll continue to update the site with new information about Tessel even after our crowdfunding campaign. Particularly of note is the new </span><a href="http://tessel.io/modules"><span>Modules page</span></a><span>, with information about each module.</span></p>
<p><img alt="image" height="259px;" src="https://lh4.googleusercontent.com/spCR8ebf__ZlilI3uebDAW7ysXCvF3ednpcKqT6pAeJ5eZ8PAkR-RDwK72616NwZSVbUidyFqabMK_EZFTxnY6x7l1Df3MoAA0PqruuhEGuZkQRQfCiR92oM" width="619px;" /><span></span></p>
<h1><strong>San Francisco Tour</strong></h1>
<p><span>Jon and Kelsey visited the offices of GitHub, Firebase, Twitter, and Heroku to talk about the future of web development. Thanks to all our attendees! Slides from the talks are available </span><a href="http://www.slideshare.net/TechnicalMachine/tessel-the-end-of-web-development-as-we-know-it"><span>here</span></a><span>.</span></p>
<p><img alt="image" height="460px;" src="https://lh4.googleusercontent.com/1Zd_DaMM7iZ--RiLS1BV15S3kINVA2rFDuXjBfHD_119yti81VR7T6Kh3JA2WrqpYD6T2ICkQiTuw2Sdm7TsaeFLqmS5g0YrciioI4Bc2d-v8pVjJyReJdcL" width="614px;" /></p>
<p><span>Jon talking at Github. Photo credit to </span><a href="https://twitter.com/reyner"><span>@reyner</span></a><span>.</span><span></span></p>
<p><span>&nbsp;</span></p>]]></content:encoded>
    <wp:post_name>62761817861</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/62525010070</link>
    <pubDate>Sat, 28 Sep 2013 13:34:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[olin]]></category>
		<category domain="tag" nicename="olin"><![CDATA[olin]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[jia huang]]></category>
		<category domain="tag" nicename="jia-huang"><![CDATA[jia huang]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[startup]]></category>
		<category domain="tag" nicename="startup"><![CDATA[startup]]></category>
		<category domain="tag"><![CDATA[interview]]></category>
		<category domain="tag" nicename="interview"><![CDATA[interview]]></category>
		<category domain="tag"><![CDATA[crowdfunding]]></category>
		<category domain="tag" nicename="crowdfunding"><![CDATA[crowdfunding]]></category>
		<category domain="tag"><![CDATA[company culture]]></category>
		<category domain="tag" nicename="company-culture"><![CDATA[company culture]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/62525010070</guid>
    <!--<wp:post_id>62525010070</wp:post_id>-->
    <wp:post_date>2013-09-28 10:34:00</wp:post_date>
    <wp:post_date_gmt>2013-09-28 17:34:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>A Candid Conversation with Jialiya Huang</title>
    <description></description>
    <content:encoded><![CDATA[#####8/25/2013— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

<b>This interview was originally published in the September 2013 issue of <a href="http://franklyspeakingnews.com/">Frankly Speaking</a>, the unofficial newspaper of <a href="http://olin.edu/">Olin College</a>. It has been modified to make it more accessible to the general public.</b>

<i>A Candid Conversation with Jialiya Huang about the changing face of hardware development, working with co-founders, and what it feels like to get a company off the ground.

Jialiya Huang, Olin class of 2013.5 [ed. note: the '.5' denotes a December graduation], founded Technical Machine with Tim Ryan (Olin ‘13.5) and Jon McKay (Olin ‘13) this summer. The company is launching Tessel, their first product, on September 5th, and is both thrilled and innervated by all the interest the Tessel has received already on Hacker News, Hackaday, and Japanese Slashdot.

Full disclosure, I’m working for Technical Machine too– mostly on press and marketing at the moment [Kelsey Breseman]. But it was still a great opportunity to speak with Jia at length about the future of hardware development and her personal goals in starting a company.</i>

BRESEMAN: What is the mission of Technical Machine?

HUANG: Technical Machine is trying to make it easy for software developers to get into hardware. It’s a different take on our last year’s SCOPE project. [<a href="http://scope.olin.edu/about/">SCOPE</a> is Olin College's senior capstone in engineering.]

Hardware is something that I’ve always wanted to get into, but never felt like I was ready to, because it always seemed like there was a lower level that I needed to get knowledge of.

For something like web development, I always knew that there was a tutorial, and I could make it, and boom, there’s a site. That’s it.

As I got into hardware, it was like, here’s a simple circuit that can flip an LED on and off, on a 5-5 timer, for example. And then now, well, you can do that with transistors instead of just a 5-5 chip.

Well, crap, now I need to know about transistors. You can just keep on going lower and lower, and I wasn’t sure where it stopped.

That always has been a fear of mine, because I was never that into hardware. Technical Machine is trying to make that problem easier.

BRESEMAN: What do you want from hardware?

HUANG: I very much see everything as– that should behave like software. There should be a well-established API call for any action that I want to accomplish, or I should be able to look at how other people have done it and be able to replicate their actions. 

With the open hardware movement, it’s getting easier, but back in highschool, I never knew that was a thing. I wouldn’t even know where to start first. Even when I was taking circuits classes, learning physics, all the stuff that we did was very much textbook-like. It wasn’t me designing my own circuits. Very much so when I started computer science, it got to– oh look, here is a simple program, and then I was modifying it, I was adding to it, I could make it into whatever I wanted it to do. The steps just really weren’t there with hardware.

Technical Machine, and the Tessel in particular, is a way of trying to expose an entire world to software developers, who otherwise wouldn’t have gotten into it.

BRESEMAN: Is Tessel just a starting place for your users to get into hardware?

HUANG: Right now, when software developers look at something like hardware, the first thing that I think of is, if I create something cool, how do I share it with the world? That’s one of the biggest thing that I want to do with any software library that I write, is put it up in the open, have people using it, and put my name out there.

With hardware, it’s just like, this is cool, I can put that in my room; all my friends will know about it, but that will never get out into the world.

Tessel is trying to make it easier for that entire process to happen.
The set of knowledge that you would get from making one hardware device doesn’t really translate into making more of them. Tessel is just trying to streamline that entire process so that if you can make one, you can make ten; there’s a service that lets you make 100, or make 1,000.

BRESEMAN: How does Tessel streamline that process?

HUANG: Some of the things that we looked into in particular were other services: an API for hardware, essentially. You have all these capabilities that you want on your device– let’s say I want Bluetooth and accelerometer, for remote sensing or something. And that’s all I need. And I can do that on an Arduino: I can get an Arduino accelerometer shield; I can get an Arduino Bluetooth shield. But in order to migrate onto my own PCB requires me to now know hardware design. Whereas with the Tessel, what I hope to accomplish is making a service so that someone can say, here’s what I need, and then we send them back something that is exactly that.

BRESEMAN: Did you make Tessel to start a company, or did you start a company to make Tessel?

HUANG: A bit of both. Somewhere along, sophomore, junior year, Jon and Tim and I decided that we should be doing a company. At that point, I think it was the summer after sophomore year that I was at Amazon and Jon and Tim were at Microsoft, and we realized what cushy jobs we had.

It scared me that I could see myself doing something like that. It scared me that I could be static, just spend the next 10-15 years of my life doing nothing in particular, and yet still getting paid. It was weird that I was doing less work than when I was at school, and yet I was making a lot more money than I ever had in my life before.

I think that both Jon and Tim felt the same unease with that situation. We decided, the only way out of this is to get way out of this and do our own thing. And then we were trying to think of products and things we could make.

Along the years, there’s been half-baked ideas that we keep pushing out. They’ve all been very much restricted to software only. It wasn’t until SCOPE that we had much hardware experience at all, and then we just suddenly launched ourselves into hardware, and we just found so many new issues that we could solve.

The problem with software is that it’s so crowded is that anything that we would have experience with students is catering to the educational market, which is kind of a bad market to be in, or like, a hobbyist playful, nothing really necessary market, because we don’t really have domain expertise in anything else. However, one of the main things that we do have skill in is software, and if we can take the software paradigm and establish it in hardware, that’s one of the things that we’re trying to do now.

BRESEMAN: What software paradigm are you bringing into hardware?

HUANG: It starts with the community. That’s what the open hardware movement is trying to do. Right now, if I had a question on Rails programming, no matter how weird it is, a weird error message, I could just Google it, and then up on StackOverflow, there would probably be someone else asking the exact same thing. Something like that is so standardized, and so many people are using it, that there’s very little risk in putting your skill set in there and putting your time in there and making it even better.

However in hardware, the space is kind of fragmented in that sense. If you get really good at one particular microchip and all of a sudden you’re moving to another one. Now you’re learning an entirely new chipset, you’re learning new instructions. Your knowledge isn’t that transferrable. So whatever you put into one hardware set, you’re stuck there, in a sense. That prevents people from going out and diving really deeply into these technologies, because there’s no easy fallback.
If you were the only person doing a startup in the world, and your startup fails, no one else would hire you. But if you’re doing a startup and there’s ten other companies in your related space, one of them will probably snap you up for your domain expertise alone.

BRESEMAN: It’s not like that in hardware?

HUANG: In hardware, I’m actually not sure about this, because I’m not a real electrical engineer. It is definitely a lot harder to, one, formulate hardware questions about hardware such that it is easily searchable, so that could just be my bad, but two, even when we do run into hardware issues, the way you find- especially for the NXP chip that we’re currently using– I have an issue about how to configure SDRAM, for example. I look it up and the top replies are one guy, on a forum post. This is literally like ten years ago for software, how these things are answered: weird forums in the middle of the internet somewhere.

BRESEMAN: How does Tessel solve that?

HUANG: With Tessel the idea is that our layer would abstract away those kind of questions so that you wouldn’t need to ask those questions until you’re at a point where you’ve proven out your product and you have enough money to hire someone to do that.

When you’re first going into the hardware space, the number one thing that you want to do is establish that your hardware product would be successful if you launched it. Getting that as quickly as possible reduces your risk in entering that space.

BRESEMAN: What is your ideal market?

HUANG: Our ideal market is changing. There are two sections of the market that we’re trying to hit with this. One is people who aren’t into hardware right now, who are primarily web developers. That’s the way we’ve pitched it on the site, and that’s the way everyone has run with it, as JavaScript right on the hardware. We’re taking a language that everyone knows and we’re giving them the ability to control very low-level things with it.

That’s great for starting out in the hobbyist space, that’s great for building up a community, and that’s great for us figuring out what the overall market would want. And there’s also the space of enterprise-y things: it would be cool if my washing machine had an API that I could interact with, or it would be cool if my oven did, or my everyday devices. I wouldn’t have to open up my washer, figure out what chipset it’s using, and there are ways to hack around programming every single chip– if there was a way for me to easily control physical devices out there. That’s a different enterprise market that we’re trying to breach, but we have to gain legitimacy in the hobbyist market before we can go into that.

BRESEMAN: What is most exciting to you about Technical Machine?

HUANG: Everything is incredibly exciting because I have no idea what’s going to come the next day.

For the longest time, we were unsure about technical development, the first few months. That was a lot of getting our heads down, making sure that what we were proposing was feasible. Of course, that has its own highs and lows. And then all of a sudden we launched on Hacker News, and suddenly we were getting so much attention that we had to respond to it, and it’s just been building up.

There are so many decisions that we need to take care of, and that we need to think about. It’s very different from any other job I’ve had. I’ve been an intern at other places, but those are very much low-level. You get thrown a very specific task, or a chunk of a task; the parameters are very well-defined. But with Technical Machine, because we’re creating this company and creating the market as we go along. Every decision that we make is impactful.

BRESEMAN: What are you worried about at the moment?

HUANG: Absolutely everything. I’m worried about moving out of my house, I’m worried about finding enough things to eat. What happens when we’re no longer at Highland and I don’t have access to oatmeal 24/7? [The team worked from the offices of Highland Capital Partners this summer as part of their startup accelerator program.]

I’m worried about living, and then I’m worried about the business, and then I’m worried about technology and how this is going to go.

I’m freaking out every night about this. If we are successful, what are people saying about us on Twitter? What does the creator of JavaScript think about us?

BRESEMAN: Are you still glad you’re doing this?

HUANG: Yes. This is definitely one of the best experiences I’ve had. It’s amazing how easy it is to actually do. A lot of our– looking at where we are right now versus where we started the summer, we are so much further than I thought we would get. Opportunities just pop up, and we grab them. It sets us on a path to success, almost.

I went to a talk by the creator of– they’re now called Ink, they were called Filepicker.io– Brett van Zuiden, and he was saying how you can just set yourself on railroad tracks. You make all these goals, and then all you have to do is hit them. And hitting goals is something you’ve been trained to do since you started school: you have a test; all you need to do is pass that test. You have a project; all you need to do is get to the next stage of the project. And along the way, people have opened themselves up to us and have said, “Hey, why don’t you do this? We’ll give you expertise in this field,” and all we have to do is take it. And we take it, and we’re like, “Oh, that was a good decision.” And then that just leads to more good decisions.

I guess starting at Highland was the very first good decision we made, and since then I think we have been setting ourselves up for better decisions. It’s not so much of a “what the hell are we doing”, and more like, “here are the five possible choices; let us pick out the best of these five based on these metrics.”

BRESEMAN: What do you think of starting in an accelerator versus starting on your own?

HUANG: I have one other startup which I tried to do the summer after freshman year, with Charlie Offenbacher. It was essentially a marketplace connecting students with jobs: a less sketchy Craigslist, in a way. Parents needed babysitters; you don’t want to find a babysitter on Craigslist because that’s super sketchy. But you would trust the high schooler who babysat your friend’s baby for your own child. It was more localized, more geared towards parents.

We were working out of Dogpatch Labs, and they gave us an office space, but it wasn’t really an accelerator program. Throughout the three months that I was there, we were iterating on product, but we just never really got anywhere. At the end of the summer we were kind of in the same place that we were at the start of the summer. We were getting a few sales, and our product had developed, but everything else wasn’t really in place. And that was for a few reasons.

One is, the market is kind of hard. Every competitor to Craigslist fails. I don’t even know why we tried. I wouldn’t try that again. Two, I guess– Highland helped us establish a lot of legitimacy around this. I’m not sure if Dogpatch Labs had the same. Because we’re a very technical group and Highland invests in a lot of high-tech companies– so do most accelerators, actually. But working out of Dogpatch didn’t really open us up to that many more contacts than just working out of someone’s basement would have. Especially not in the case of our market, which was parents, for example, would not have heard of Dogpatch; they would not have cared. If they had more experience in nannying services, for example, that would have been a lot more useful.

I guess it really depends on the kind of market that you’re going after, but for us, because we’re students, and we’re young, and we’re building a platform that other people have to rely on, having this sense of legitimacy and have other people think that we’re not just playing around, that this is a real project and we’re actually going to deliver, and doing it from Highland I think has opened up some doors for us.

BRESEMAN: You said before that it felt easy to start Technical Machine. Why do you think it was easy?

HUANG: It was me and Jon and Tim, and we have been working together since freshman year. I’m comfortable with Jon or Tim picking up tasks of mine. I’m comfortable with them taking my tasks, and I think they feel the same with me. I think there’s a lot of mutual trust between us because we’ve been working together for so long on so many different projects.

Some of them have gone really shittily– which is one of the best parts, that things will go shittily, and if I’m at a loss as to what to do, one of them will know what to do. So that was the easy part, in terms of cofounders, and then we brought on some other Oliners. Eric ended up helping us a lot on things; so did you [ed. note: directly addressing the interviewer], on things that we lacked. Things that we didn’t have the bandwidth for. That allowed us to focus on things that we were better at, instead of having to constantly think about, we need press, we need to get all of this coverage. How do we do it?

That was one of our main things that we were not going to do unless you had joined the team, for example. We wouldn’t have had the bandwidth to cover it. Bringing on these people, in these strategic places that you need help in, makes life so much easier.

Hiring is like the best thing ever. I didn’t realize that before I started, but employees are awesome!

BRESEMAN: You’re going back for another semester at Olin– are you going to leverage the Olin community while you’re there?

HUANG: Definitely at least for testing, and I think that we should also be able to leverage the Olin community for some development tasks. There are plenty of good engineers at Olin. Plenty of them are hacking away at stuff anyway, and they’re very much a demographic that we want to hit with our market: tinkerers, hackers, whatever. And I also think that they would be good people to bring on for at least some projects– we need to ship out a ton of peripherals. We want to have a great community in place when Tessel first launches, and I think Olin is a great place to get that started.

BRESEMAN: How does it feel to be running a company and going back to Olin at the same time?

HUANG: Really strange. School feels very familiar; I know exactly what I’m going to be doing in school, and it’s not dangerous, and I get kind of a warm feeling because I’ve been there the last four years.

On the business side, I’m always angsting about Technical Machine. It’s the combination of not a lot of anxiety, because we have a lot of safety in this– just because it’s Olin, it’s like coming home, really. I know that I can be safe, that I can hide, at Olin, from people that I don’t want to see on the internet, for example.

I’m taking like 12 credits. One of them is E! Capstone, which will literally be working on this business; one of them is Chinese, because I’ll be going to China for manufacturing, and the other one is Sanjoy’s Bayesian class, which I heard was good.

I’m not worried about the workload because I got all my hard work out of the way. Hopefully I can just cruise and have a free place- well, a very expensive place to stay while I work on the business.

My mom told me that I had to get my degree. I told her, “Oh, look, we’re trying to raise a round, things are going well–” and she’s like, “I hope you stay in school!” No, mom, God! You don’t understand!

BRESEMAN: Have you seriously considered dropping out?

HUANG: I don’t really care about the degree. I think that I’ve gotten a lot of Olin these past four years, to the point where if I was the weakest link here– if everyone else would have been working working in Boston, in an office together, I would have dropped out. But since Tim also had a semester to finish and he’s not dropping out, and I think it’s important for the team to stay together in this sense, because Tim’s at Olin, I’m going to be joining him at Olin.

BRESEMAN: If Technical Machine were to fail, do you think you would start another company?

HUANG: I don’t know what would happen if Technical Machine failed. At one point, I get really anxious thinking about it because I’ve spent a lot of my time on this, my name is kind of tied to it. My reputation as a developer is almost tied to it because we’re working on a platform for developers.

If it were to fail, I think I would have trouble separating myself out of the product that failed. I really wouldn’t know the next steps that I would take. Eventually, I do think that I would try to start another company. I would try to iterate some more in this space because I do think that it’s incredibly interesting, and the space is growing.

No matter what, the knowledge that I have gained from working at Technical Machine is more than I would have gained anywhere else at this point in my life. Overall, it’s a win-win scenario for me. It doesn’t matter if it fails or if it succeeds. Obviously, it’s way better if it succeeds, but if even if it failed, I would have gained knowledge and made the connections I needed to in order to set myself up for success in the future.]]></content:encoded>
    <wp:post_name>62525010070</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/62057305374</link>
    <pubDate>Mon, 23 Sep 2013 09:02:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[crowdfunding]]></category>
		<category domain="tag" nicename="crowdfunding"><![CDATA[crowdfunding]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[javascript on hardware]]></category>
		<category domain="tag" nicename="javascript-on-hardware"><![CDATA[javascript on hardware]]></category>
		<category domain="tag"><![CDATA[tour]]></category>
		<category domain="tag" nicename="tour"><![CDATA[tour]]></category>
		<category domain="tag"><![CDATA[san francisco]]></category>
		<category domain="tag" nicename="san-francisco"><![CDATA[san francisco]]></category>
		<category domain="tag"><![CDATA[sf]]></category>
		<category domain="tag" nicename="sf"><![CDATA[sf]]></category>
		<category domain="tag"><![CDATA[software]]></category>
		<category domain="tag" nicename="software"><![CDATA[software]]></category>
		<category domain="tag"><![CDATA[hardware]]></category>
		<category domain="tag" nicename="hardware"><![CDATA[hardware]]></category>
		<category domain="tag"><![CDATA[stretch goals]]></category>
		<category domain="tag" nicename="stretch-goals"><![CDATA[stretch goals]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/62057305374</guid>
    <!--<wp:post_id>62057305374</wp:post_id>-->
    <wp:post_date>2013-09-23 6:02:00</wp:post_date>
    <wp:post_date_gmt>2013-09-23 13:02:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Mid-Campaign Updates</title>
    <description></description>
    <content:encoded><![CDATA[#####9/23/2013— [Updates](http://blog.technical.io/search/update)

<a href="null"></a><body class="c1"><p class="c2"><span style="font-size: 2.0em">Tessel goes on tour!</span></p><p class="c2"><span>Technical Machine&rsquo;s Jon and Kelsey are coming to </span><span class="c7">San Francisco</span><span>&nbsp;this week! Catch us at our public tech talk (food &amp; drink included) and play with a Tessel:</span></p><p class="c2 c8"><span></span></p><p class="c2"><span style="font-size: 1.5em">Tues, 9/24</span><span style="font-size: 1.5em">&nbsp;</span><span style="font-size: 1.5em">6:30pm, San Francisco (SOMA)</span><span style="font-size: 1.5em">&ndash; </span><span class="c0 c4 c7"><a class="c5" href="https://tito.io/github-events/tessel-tech-talk-">get free tickets</a></span><span style="font-size: 1.5em">&nbsp;</span><span class="c4 c9">(required)</span></p><p class="c2"><span class="c0 c9"><a class="c5" href="https://www.facebook.com/events/589523241089462/">RSVP</a></span><span>&nbsp;| </span><span class="c0 c9"><a class="c5" href="http://clicktotweet.com/akWf3">Tweet about it</a></span></p><p class="c8 c2"><span></span></p><p class="c2"><span style="font-size: 2.0em">Crowdfunding success and stretch goals</span></p><p class="c2"><span>Our crowdfunding has been a great success so far&ndash; </span><span class="c0"><a class="c5" href="http://www.dragoninnovation.com/projects/22-tessel">check it out</a></span><span>! We were the first project ever backed on Dragon Innovation, reaching our goal in under 3 hours. We&rsquo;re now over 225% backed, but the more funded the project is, the more modules we can afford to build:</span></p><p class="c2"><img src="http://media.tumblr.com/64d81f265d9b1e535bf6743f35c1af7c/tumblr_inline_mtjsad6gFC1s75tgz.jpg"></p><p class="c2"><span>At 100k funding, we added an ambient sensor to the Class A modules. The ambient sensor sends/receives sound, visible light, and IR light. Ever wanted to make a television turn on with a clap? You can with the ambient sensor.</span></p><p class="c8 c2"><span></span></p><p class="c2"><span>We surveyed our backers to see what to offer next, and they picked a GPRS/SIM module&ndash; so if we hit 130k, we&rsquo;ll add it, too. A GPRS module will add 2G connectivity, which means Tessel can connect to the internet without wifi. The SIM part will allow Tessel to interact with the telecom network, e.g. sending/receiving text messages. </span></p><p class="c8 c2"><span></span></p><p class="c2"><span>What&rsquo;s more, every additional 30k we raise, we can add another module picked by our backers.</span></p><p class="c8 c2"><span></span></p><p class="c2"><span class="c0 c4 c9"><a class="c5" href="http://clicktotweet.com/E4301">Help us reach our stretch goals by adding your influence!</a></span></p><p class="c8 c2"><span></span></p><p class="c2"><span style="font-size: 2.0em">Demo videos and documentation</span></p><p class="c2"><span style="font-size: 1.5em">We believe in open source.</span></p><p class="c2"></p><img src="http://media.tumblr.com/daf5fe21fccf5efbc7490200baf25898/tumblr_inline_mtjsl16eZ31s75tgz.png"><p class="c2"><span>Our hardware documentation is now live at </span><span class="c0"><a class="c5" href="https://github.com/technicalmachine/tessel-design-docs">https://github.com/technicalmachine/tessel-design-docs</a></span><span>. Check it out, share it around, and please let us know what we can clarify! (</span><span class="c0 c9"><a class="c5" href="http://clicktotweet.com/AbJ7x">Tweet this</a></span><span>)</span></p><p class="c8 c2"><span></span></p><p class="c2"><span>We&rsquo;ll add more hardware and software documentation as soon as we can.</span></p><p class="c8 c2"><span class="c4"></span></p><p class="c2"><span style="font-size: 1.5em">Cypress and Jia show how they use Tessel.</span></p><p class="c2"><span>Our friend Cypress and Co-Founder Jia show a couple of simple uses for Tessel.</span></p>
<p></p>
<a href="www.youtube.com/embed/CxA7KWbu8BA?rel=0"><img src="http://media.tumblr.com/3675aa3a67d3eccd50dcc21db425af63/tumblr_inline_mtju3czY5G1s75tgz.png"></a>
<p class="c2"><span>Cypress uses Tessel to make a wireless switch for his on-call mother, a midwife, to tell clients when she has to leave the office suddenly. <a href="www.youtube.com/embed/CxA7KWbu8BA?rel=0">View.</a></span></p><p class="c8 c2"><span></span></p><p></p>
<p></p>
<a href="//www.youtube.com/embed/uNWHcnt53bQ?rel=0"><img src="http://media.tumblr.com/fa864e2ca24c9292be3a275d020e6045/tumblr_inline_mtjukrYRIx1s75tgz.png"></a>
<p class="c2"><span>Jia uses Tessel to help her wake up and get to work. <a href="//www.youtube.com/embed/uNWHcnt53bQ?rel=0">View.</a></span></p><p class="c8 c2"><span></span></p><p class="c2"><span style="font-size: 2.0em">A little more Q &amp; A</span></p><p class="c2"><span>We&rsquo;ve had some good questions from our backers:</span></p><p class="c8 c2"><span></span></p><p class="c3 c2"><span style="font-size: 1.5em">How about a video module?</span></p><p class="c3 c2"><span>We would love to make a video module. We played around with the idea before launching the campaign, but didn&rsquo;t feel comfortable enough with it to release it as a module . . . yet. We&rsquo;re </span><span class="c0"><a class="c5" href="http://clicktotweet.com/Z1c4J">open to suggestions</a></span><span>&nbsp;for what camera specifications you would enjoy.</span></p><p class="c8 c3 c2"><span></span></p><p class="c3 c2"><span style="font-size: 1.5em">What are the current usages while Tessel is idle, sleeping, and transmitting?</span></p><p class="c3 c2"><span>The peak current while transmitting is ~600mA. Normal usage draws 300mA, and turning off select components (e.g. WiFi, external SDRAM) and putting the main chip to sleep can bring it down as low as 15mA. Tessel has various sleep modes, which we will expose through our JavaScript API. Note that we expect the usage to drop once we begin implementing smart software power control. </span></p><p class="c8 c3 c2"><span></span></p><p class="c3 c2"><span style="font-size: 1.5em">Does the success of crowdfunding speed up shipping dates?</span></p><p class="c2 c3"><span>The best answer we can give is . . . </span><span class="c9">maybe. </span><span>We want to ship to you as soon as we can, and the more we raise, the faster we can move. For example, buying parts overseas is cheaper, but also takes weeks longer than buying from a more expensive local supplier. Every bit we raise goes towards Tessel development.</span></p><p class="c8 c3 c2"><span></span></p><p class="c3 c2"><span style="font-size: 1.5em">Will the price change after the crowdfunding campaign?</span></p><p class="c3 c2"><span>Again, the best answer we can give is &ldquo;maybe&rdquo;. We want to price Tessel as low as possible, while still sustaining a development budget. The main factor is volume, so it will really depend on our order size. Since we&rsquo;re still below 1k in order quantity, we&rsquo;re not yet getting the best possible price.</span></p><p class="c8 c3 c2"><span></span></p><p class="c3 c2"><span style="font-size: 2.0em">Keep asking questions!</span></p><p class="c3 c2"><span style="font-size: 1.5em">We love hearing from you&ndash;&nbsp;reach out to us on </span><span style="font-size: 1.5em"><a class="c5" href="https://twitter.com/technicalhumans">Twitter</a></span><span style="font-size: 1.5em">, </span><span style="font-size: 1.5em"><a class="c5" href="https://www.facebook.com/technicallyamachine">Facebook</a></span><span style="font-size: 1.5em">, and </span><span style="font-size: 1.5em"><a class="c5" href="mailto:team@technical.io">email</a></span><span style="font-size: 1.5em">.</span></p><p class="c8 c3 c2"><span></span></p><p class="c3 c2"><span>Our announcements get to the blog eventually, but we typically email our subscribers first&ndash; </span><span class="c0"><a class="c5" href="http://eepurl.com/Eq_fv">sign up here</a></span><span>&nbsp;to get Technical Machine news.</span></p><p class="c8 c3 c2"><span></span></p><p class="c3 c2"><span>Want Technical Machine to give a tech talk at your organization? If you&rsquo;re in Boston or Seattle, we can probably oblige&ndash; </span><span class="c0"><a class="c5" href="mailto:team@technical.io">shoot us an email</a></span><span>!</span></p><p class="c8 c3 c2"><span></span></p><p class="c3 c2"><span>That&rsquo;s all until next time. Keep in touch!</span></p><p class="c8 c3 c2"><span></span></p><p class="c3 c2"><span>Love,</span></p><p class="c3 c2"><span>Kelsey, Jia, Jon, Eric, and Tim</span></p></body></html>]]></content:encoded>
    <wp:post_name>62057305374</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/60351476205</link>
    <pubDate>Thu, 05 Sep 2013 07:11:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[crowdfunding]]></category>
		<category domain="tag" nicename="crowdfunding"><![CDATA[crowdfunding]]></category>
		<category domain="tag"><![CDATA[launch]]></category>
		<category domain="tag" nicename="launch"><![CDATA[launch]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[dragon innovation]]></category>
		<category domain="tag" nicename="dragon-innovation"><![CDATA[dragon innovation]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/60351476205</guid>
    <!--<wp:post_id>60351476205</wp:post_id>-->
    <wp:post_date>2013-09-05 4:11:00</wp:post_date>
    <wp:post_date_gmt>2013-09-05 11:11:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>We've Launched!</title>
    <description></description>
    <content:encoded><![CDATA[#####9/5/2013— [Updates](http://blog.technical.io/search/update)

<h1 class="h1"><a href="http://www.dragoninnovation.com/projects/22-tessel" target="_self">http://www.dragoninnovation.com/projects/22-tessel</a></h1>
<p></p>
<h3 class="h3">Tell your friends!</h3>
<h4 class="h4">&nbsp;</h4>
<p><strong>Ordering on Dragon: </strong>Since Dragon's platform is new, we wanted to point out some key differences from other crowdfunding platforms:</p>
<ul>
<li>
<p><strong>You can order multiples.</strong> Notice, at each backer level, a little &lsquo;quantity&rsquo; box. How many Tessels would you like to order?</p>
</li>
<li>
<p><strong>You can back at several levels. </strong>If you already ordered a Tessel and a module, you can come back to our Dragon Innovation page and order more modules. Since we&rsquo;re pioneers on Dragon, shopping cart functionality isn&rsquo;t up and running with this iteration of the site&ndash; but rest assured you can do it! <a href="mailto:team@technical.io">Email us</a> if you&rsquo;re having trouble with this.</p>
</li>
<li><strong>You&rsquo;re ordering product, not just supporting us.</strong> You&rsquo;re supporting us, too, but Dragon Innovation is more than just crowdfunding. <a href="http://www.kickstarter.com/blog/kickstarter-is-not-a-store">Kickstarter Is Not a Store</a>, but you can treat Dragon like one: Dragon helps us set our minimum funding goal after helping us figure out all of the costs, such that the money we ask for is enough to ensure delivery. You can back with confidence, knowing that meeting our funding goal means that you are now the proud owner of a Tessel.</li>
</ul>
<p>Please email us if you have any questions!<br /> <br /> Love,<br /> Kelsey, Jia, Jon, Eric, and Tim</p>]]></content:encoded>
    <wp:post_name>60351476205</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/59877871948</link>
    <pubDate>Sat, 31 Aug 2013 12:49:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[summer@highland]]></category>
		<category domain="tag" nicename="summerhighland"><![CDATA[summer@highland]]></category>
		<category domain="tag"><![CDATA[HCP]]></category>
		<category domain="tag" nicename="hcp"><![CDATA[HCP]]></category>
		<category domain="tag"><![CDATA[dragon innovation]]></category>
		<category domain="tag" nicename="dragon-innovation"><![CDATA[dragon innovation]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/59877871948</guid>
    <!--<wp:post_id>59877871948</wp:post_id>-->
    <wp:post_date>2013-08-31 9:49:00</wp:post_date>
    <wp:post_date_gmt>2013-08-31 16:49:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Goodbye Highland, Hello Dragon</title>
    <description></description>
    <content:encoded><![CDATA[#####8/31/2013— [Kelsey Breseman](http://blog.technical.io/search/update)

<p><span>As the summer wraps up, we say farewell to </span><a href="http://summer.hcp.com/"><span>Summer@Highland</span></a><span> and hello to </span><a href="http://techcrunch.com/2013/08/08/dragon-innovation-raises-2-3-million-to-help-build-hardware-startups/"><span>Dragon Innovation and crowdfunding</span></a><span>. We&rsquo;ve set our launch date for </span><span>September 5th</span><span>, and we&rsquo;re working really hard on finishing our video and backer rewards!</span></p>
<p></p>
<p><span>The startup incubator Summer@Highland was a really great experience for us, allowing us office space, great advice, and a community of other startup teams. </span></p>
<p></p>
<p><span>Now we&rsquo;re preparing to launch with the support of Dragon Innovation, a crowdfunding platform designed specifically for hardware projects. They helped MakerBot, Pebble, and other hardware projects to deliver in more of a consulting role, and we&rsquo;re excited to be part of their first class of crowdfunding projects. I&rsquo;ll write more about them later.</span></p>
<p></p>
<p><span>We released this demo video to our </span><a href="http://eepurl.com/Eq_fv" target="_blank"><span>email subscribers</span></a><span> a couple of days ago, showing the workflow of programming Tessel:</span></p>
<p><iframe frameborder="0" height="315" src="//www.youtube.com/embed/XCwKzipBIaA" width="420"></iframe></p>
<p><span>We&rsquo;re actively working on tools and our APIs to better integrate with the existing, amazing Node.js infrastructure that exists today.</span></p>
<p></p>
<p><span>Do you have a plan for how to use Tessel? We love to hear from you on </span><a href="https://twitter.com/technicalhumans"><span>Twitter</span></a><span> and </span><a href="https://www.facebook.com/technicallyamachine"><span>Facebook</span></a><span>, as well as over </span><a href="mailto:team@technical.io"><span>email</span></a><span>.</span></p>
<p></p>
<p><span>All the best!<br />Kelsey</span></p>]]></content:encoded>
    <wp:post_name>59877871948</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/58445812747</link>
    <pubDate>Fri, 16 Aug 2013 16:33:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[faq]]></category>
		<category domain="tag" nicename="faq"><![CDATA[faq]]></category>
		<category domain="tag"><![CDATA[hacker news]]></category>
		<category domain="tag" nicename="hacker-news"><![CDATA[hacker news]]></category>
		<category domain="tag"><![CDATA[compatibility]]></category>
		<category domain="tag" nicename="compatibility"><![CDATA[compatibility]]></category>
		<category domain="tag"><![CDATA[modularity]]></category>
		<category domain="tag" nicename="modularity"><![CDATA[modularity]]></category>
		<category domain="tag"><![CDATA[nodejs]]></category>
		<category domain="tag" nicename="nodejs"><![CDATA[nodejs]]></category>
		<category domain="tag"><![CDATA[node]]></category>
		<category domain="tag" nicename="node"><![CDATA[node]]></category>
		<category domain="tag"><![CDATA[one mighty roar]]></category>
		<category domain="tag" nicename="one-mighty-roar"><![CDATA[one mighty roar]]></category>
		<category domain="tag"><![CDATA[crowdfunding]]></category>
		<category domain="tag" nicename="crowdfunding"><![CDATA[crowdfunding]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/58445812747</guid>
    <!--<wp:post_id>58445812747</wp:post_id>-->
    <wp:post_date>2013-08-16 13:33:00</wp:post_date>
    <wp:post_date_gmt>2013-08-16 20:33:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Answering Questions</title>
    <description></description>
    <content:encoded><![CDATA[#####8/16/2013— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

<p><span>Welcome, new readers, to Technical Machine&rsquo;s blog!</span></p>
<p><span>The last two days have been a whirlwind for us as we hit the top of Hacker News, Hack-A-Day, and started reaching our community. We&rsquo;re really grateful for the overwhelmingly enthusiastic response, particularly among web developers and small businesses. That&rsquo;s one of our core goals: to foster entrepreneurship among web programmers in the physical world. Thus we&rsquo;re stoked that you are the community that noticed us first.</span></p>
<p><span>&nbsp;</span></p>
<p><img alt="image" src="http://media.tumblr.com/6d2c672ef4877c2332ca360e321d41d8/tumblr_inline_mrn20xuxhh1qz4rgp.png" /></p>
<p></p>
<p><span>It&rsquo;s tough to answer every tweet, so I thought I could answer some of the more pressing questions here:</span></p>
<p><span>&nbsp;</span></p>
<p><strong id="docs-internal-guid-38471fd0-88cc-9c61-65c3-c53b0a62e4cd"><span></span></strong></p>
<p><strong>Are you open source?</strong></p>
<p><span>Yes! Open source code, open source hardware. Our vision is that you can use Tessel to prototype, test, and hopefully start your own business in the field of internet-connected devices. That doesn&rsquo;t make much sense if we keep anything proprietary&mdash;so we won&rsquo;t.</span></p>
<p><span>Not much is currently available, but don&rsquo;t worry, we&rsquo;ll be opening it up steadily over time.</span></p>
<p><strong><br /><span></span></strong></p>
<p><strong>When can I get one?</strong></p>
<p><span>We&rsquo;ll be launching our crowdfunding campaign in early September. If you haven&rsquo;t already, sign up on our email list and we&rsquo;ll shoot you an email when pre-orders are ready!</span></p>
<p><strong><br /><span></span></strong></p>
<p><strong>Can I have one early?</strong></p>
<p><span>We don&rsquo;t have a definite answer here, but probably not. We want to make sure that everything works really well and that our crowdfunding backers get theirs as soon as possible. Scaling from twenty prototypes to production is expensive, and our first priority is securing reliable manufacturing.</span></p>
<p><strong><br /><span></span></strong></p>
<p><strong>What does it cost?</strong></p>
<p><span>Sorry, but we can&rsquo;t tell you yet. We&rsquo;re still figuring out all of the costs, and we don&rsquo;t want to throw a number before we&rsquo;re certain.</span></p>
<p></p>
<p><span>We said before that we want to make Tessel open, but we want to go a step beyond that and also make it reproducible. It&rsquo;s a high priority that our component decisions enable others to build off of Tessel&rsquo;s schematics and hardware without restriction, which means choosing common components and not ones with contractual or high volume agreements.</span></p>
<p><strong><br /><span></span></strong></p>
<p><span><strong>Where does the Tessel fall with respect to Arduino, Raspberry Pi, and BeagleBone?</strong></span></p>
<p><span>In terms of power, the Tessel is between a small MCU like the Arduino and a full fledged microprocessor like the Pi/BeagleBone. The ARM Cortex-M is one of the most popular architectures today and we&rsquo;re pleased to add another option to the real-time microcontroller space.</span></p>
<p></p>
<p><span>We&rsquo;ve designed Tessel for usability and modularity. We&rsquo;re aiming for a device that&rsquo;s more like a PaaS, where you can push code without extensive configuration or drivers. (Of course, our firmware will be open for any modification you&rsquo;d like.)</span></p>
<p><strong><br /><span></span></strong></p>
<p><strong>Can I talk to you about making Tessel compatible with my product?</strong></p>
<p><span>Sure! We love hearing from startups and seeing new applications for Tessel. Shoot us an email and we&rsquo;ll talk.</span></p>
<p><strong><br /><span></span></strong></p>
<p><strong>Are you looking for investment?</strong></p>
<p><span>Absolutely! Please send us an email at team@technical.io.</span></p>
<p></p>
<p><img alt="image" src="http://media.tumblr.com/2817444928174eb05b3cb58a591e3f1f/tumblr_inline_mrn1njzUhs1qz4rgp.jpg" /></p>
<p><img alt="image" src="http://media.tumblr.com/2b18752fdbe4c9c220d43a04ae71ec90/tumblr_inline_mrn1nv01SK1qz4rgp.jpg" /></p>
<p><img alt="image" src="http://media.tumblr.com/1dc4d92b7bccff08d709aa7fd4b85efd/tumblr_inline_mrn1ootDzW1qz4rgp.jpg" /></p>
<p><span>&nbsp;</span></p>
<p><span>In other news, we had a hackathon with One Mighty Roar yesterday, an interaction design group in Boston. We wanted to get their take on what it was like to use Tessel. We had a great time working with them, and they seemed to like Tessel right back! Expect to see some of their project code added to Github sometime soon.</span></p>
<p><span id="docs-internal-guid-38471fd0-88cb-51d0-cb04-ffdb0686fb70"><br /><span></span><em>&mdash;Kelsey (The Ghost in the Machine)</em></span></p>]]></content:encoded>
    <wp:post_name>58445812747</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/57797141777</link>
    <pubDate>Fri, 09 Aug 2013 10:21:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[updates]]></category>
		<category domain="tag" nicename="updates"><![CDATA[updates]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[tessel]]></category>
		<category domain="tag" nicename="tessel"><![CDATA[tessel]]></category>
		<category domain="tag"><![CDATA[naming]]></category>
		<category domain="tag" nicename="naming"><![CDATA[naming]]></category>
		<category domain="tag"><![CDATA[branding]]></category>
		<category domain="tag" nicename="branding"><![CDATA[branding]]></category>
		<category domain="tag"><![CDATA[name]]></category>
		<category domain="tag" nicename="name"><![CDATA[name]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[business]]></category>
		<category domain="tag" nicename="business"><![CDATA[business]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/57797141777</guid>
    <!--<wp:post_id>57797141777</wp:post_id>-->
    <wp:post_date>2013-08-09 7:21:00</wp:post_date>
    <wp:post_date_gmt>2013-08-09 14:21:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Boards and Branding</title>
    <description></description>
    <content:encoded><![CDATA[#####8/9/2013— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

<p>We&rsquo;re in our last few weeks at Highland Capital&rsquo;s offices, and things are really coming together for a launch inside of a month.</p>
<p>We picked a product name!<br /> That news is about a week old, but in case you haven&rsquo;t heard, our board is called <strong>Tessel</strong>.</p>
<p>That decided, we ran a design contest for a logo. After iterating with a few designers, we are pleased to announce our logo:</p>
<p><img src="http://media.tumblr.com/597955121bb73aacd7884d7232c7f8e3/tumblr_inline_mr9teh3LuX1qz4rgp.png" /></p>
<p></p>
<p>We picked the name Tessel partially because our microcontroller boards will fit together with other physical modules we&rsquo;re producing, each of which plugs in to give the board new capabilities: sensors, actuators, hookup to Arduino, et cetera (you can see the full listing on our <a href="http://technical.io" target="_blank">website</a>). But since they fit together so nicely, we&rsquo;re considering calling the combination of a Tessel board and its modules a Tesselation.</p>
<p>Conveniently, our new logo is dynamic; we can swap out the T logo in its center and sub in slick icons for each of the modules:</p>
<p><img src="http://media.tumblr.com/c306157194293350b56f1e82bba75673/tumblr_inline_mr9tetLsw41qz4rgp.png" /></p>
<p></p>
<p>Pretty classy, right? We can print these icons right onto our module boards so it&rsquo;s easy to see what each one does.</p>
<p>Modules were submitted for manufacture yesterday, so we should have them back to play with early next week.</p>
<p>Tim&rsquo;s been working on our website all week, too. It will probably keep changing a fair amount, but you can see it in its current state at <a href="http://technical.blog.com/wp-admin/technical.io" title="Technical Machine" target="_blank">technical.io</a>. Note the new <a href="http://technical.io/about/" target="_blank">About Us</a> page.</p>
<p>As always, we&rsquo;ve also been working on our board. Tessel v.1 was submitted for manufacture last week.</p>
<p><img src="http://media.tumblr.com/159fa7e55fbaefdf31a61c3e0a3063f6/tumblr_inline_mr9tf4dwQi1qz4rgp.png" /></p>
<p></p>
<p><span>We&rsquo;re getting them in today- fingers crossed that everything works the way it&rsquo;s supposed to!</span></p>
<p>That about wraps it up for now, but hopefully we&rsquo;ll have more exciting news to share soon.</p>
<p>Until then,<br /> I remain,<br /><em>&mdash;The Ghost in the Machine</em></p>]]></content:encoded>
    <wp:post_name>57797141777</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/57797141842</link>
    <pubDate>Mon, 29 Jul 2013 11:19:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[jom mckay]]></category>
		<category domain="tag" nicename="jom-mckay"><![CDATA[jom mckay]]></category>
		<category domain="tag"><![CDATA[update]]></category>
		<category domain="tag" nicename="update"><![CDATA[update]]></category>
		<category domain="tag"><![CDATA[manufacturing]]></category>
		<category domain="tag" nicename="manufacturing"><![CDATA[manufacturing]]></category>
		<category domain="tag"><![CDATA[sale]]></category>
		<category domain="tag" nicename="sale"><![CDATA[sale]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/57797141842</guid>
    <!--<wp:post_id>57797141842</wp:post_id>-->
    <wp:post_date>2013-07-29 8:19:00</wp:post_date>
    <wp:post_date_gmt>2013-07-29 15:19:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Revision Four</title>
    <description></description>
    <content:encoded><![CDATA[#####7/29/2013— [Jon McKay](http://blog.technical.io/search/jon+mckay)

<p><img src="http://media.tumblr.com/e1e5047e55bcd439e1db1bc760158506/tumblr_inline_mr9tb7yuD51qz4rgp.jpg" /></p>
<p></p>
<p></p>
<p>It&rsquo;s been an incredibly busy summer for us at Technical Machine, but the hard work paid off last week with several exciting milestones. We sent off our fourth board revision (and hopefully second-to-last) to Worthington Assembly on Friday, the 19th, with the expectation that they would be back in one week.</p>
<p>The one week hardware break gave us the chance to pull our heads out of technical development and start giving marketing and user testing the attention they deserve. We even finally got around to sprucing up <a href="http://www.technical.io">our website</a> to make it more clear what we&rsquo;re making (and it&rsquo;s even mobile-friendly!).</p>
<p><strong>Minimum Viable Product</strong></p>
<div class="wp-caption alignnone" id="attachment_12"><img src="http://media.tumblr.com/e648a090363ed657397dc9f4d437c31c/tumblr_inline_mr9t6cfNXN1qz4rgp.jpg" /><br />
<p class="wp-caption-text">Tim&rsquo;s rigged up minimum viable product</p>
</div>
<p>In order to test the software without our completed board, Tim rigged up a jankety but surprisingly effective prototype using off the shelf hardware (picture above). He put together an demo where users could import an npm module for an accelerometer peripheral and write the javascript code to print out average values. The JavaScript code was &lsquo;compiled&rsquo; and sent over USB to the device. It was really exciting to see our minimum viable product actually working!</p>
<p><strong>User Testing</strong></p>
<div class="wp-caption alignleft" id="attachment_21"><img src="http://media.tumblr.com/d1c2f61d8f684e386525bf96b87f5e15/tumblr_inline_mr9t7bOa1h1qz4rgp.jpg" /><br />
<p class="wp-caption-text">Working with Cory</p>
</div>
<p>We observed several different users with varying software development experience and noted where we had some mental inconsistencies (and a lot of bugs!). Slater (one of our users) was able to make a pretty cool example on his own where the frequency of the blinking of the LEDs was determined by the angle of the accelerometer &ndash; all written in a few lines of JavaScript. It was really validating to see someone enjoying the use of our product and gave us a little spurt of motivation to get the product done faster.</p>
<p><strong>Naming</strong></p>
<p>We spent several hours this week brainstorming names for what has temporarily been called ScriptStick. We&rsquo;re looking for a name that denotes a tone of engineering utility, reliability, extensibility, and innovative. We&rsquo;ve narrowed it down to about ten names and we would love to hear your impression of them:</p>
<ol>
<li>Tessel</li>
<li>Wireframe</li>
<li>V0</li>
<li>Start Board</li>
<li>Lattice</li>
<li>Reval</li>
<li>Lantern</li>
<li>Quantum</li>
<li>Betaboard</li>
<li>Quartz</li>
</ol>
<div>
<div><strong>Our First Sale (of our Arduino Shield)</strong></div>
<div>We also had our first sale this week! We&rsquo;ve been making inexpensive WiFi boards on the side with the intention of selling them through a separate distributor, but we were able to find a customer before we started officially selling! Drew Volpe is the entrepreneur in residence here at Highland Capital and he recently started working with Arduino. He wanted to connect a temperature sensor to the internet, and since we make shield for about half of what you can buy on major sites like Adafruit.com, it was an great sell. We&rsquo;ve got all our code for the project over <a href="https://github.com/jiahuang/cc3000">on Github</a>. Look for our shields for sale in the near future.</div>
<div></div>
<div><img src="http://media.tumblr.com/38538fed818121963908794d168a697a/tumblr_inline_mr9t9gxoL41qz4rgp.jpg" />
<p></p>
</div>
</div>
<div>Our First Sale!</div>
<div></div>
<div><strong>ScriptStick Revision Four</strong></div>
<div>
<div>Finally, at the end of the week, our new boards came in! They are small, sexy, and powerful. It&rsquo;s a huge step up from the prototype Tim had put together earlier and we&rsquo;re hoping it works as well as it looks. We&rsquo;ll be finishing testing on it this week and sending in one final revision before we launch on KickStarter!</div>
<div></div>
<div><img src="http://media.tumblr.com/bffe914e28f81df8618523e585293927/tumblr_inline_mr9tag1D6r1qz4rgp.jpg" />
<p></p>
</div>
<div><span>ScriptStick Revision Four</span></div>
<div>
<p>&mdash;&nbsp;<em>Jon</em></p>
</div>
</div>]]></content:encoded>
    <wp:post_name>57797141842</wp:post_name>
  </item>
  <item>
    <link>http://tesselproject.tumblr.com/post/57797141932</link>
    <pubDate>Sun, 14 Jul 2013 11:57:00 +0000</pubDate>
    <dc:creator><![CDATA[post_author]]></dc:creator>
    <category><![CDATA[regular]]></category>
		<category domain="category" nicename="regular"><![CDATA[regular]]></category>
		<category domain="tag"><![CDATA[kelsey breseman]]></category>
		<category domain="tag" nicename="kelsey-breseman"><![CDATA[kelsey breseman]]></category>
		<category domain="tag"><![CDATA[jia huang]]></category>
		<category domain="tag" nicename="jia-huang"><![CDATA[jia huang]]></category>
		<category domain="tag"><![CDATA[jon mckay]]></category>
		<category domain="tag" nicename="jon-mckay"><![CDATA[jon mckay]]></category>
		<category domain="tag"><![CDATA[tim ryan]]></category>
		<category domain="tag" nicename="tim-ryan"><![CDATA[tim ryan]]></category>
		<category domain="tag"><![CDATA[technical machine]]></category>
		<category domain="tag" nicename="technical-machine"><![CDATA[technical machine]]></category>
		<category domain="tag"><![CDATA[company culture]]></category>
		<category domain="tag" nicename="company-culture"><![CDATA[company culture]]></category>
    <guid isPermaLink="false">http://tesselproject.tumblr.com/post/57797141932</guid>
    <!--<wp:post_id>57797141932</wp:post_id>-->
    <wp:post_date>2013-07-14 8:57:00</wp:post_date>
    <wp:post_date_gmt>2013-07-14 15:57:00</wp:post_date_gmt>
    <wp:comment_status>closed</wp:comment_status>
    <wp:ping_status>closed</wp:ping_status>
    <wp:status>publish</wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type>post</wp:post_type>
    <wp:post_password></wp:post_password>
    <title>Introducing Technical Machine</title>
    <description></description>
    <content:encoded><![CDATA[#####7/14/2013— [Kelsey Breseman](http://blog.technical.io/search/kelsey+breseman)

<p dir="ltr">“Technical Machine is empowering software developers to take embedded devices from plan to prototype to product with ScriptStick, an embedded microcontroller and WiFi chip that lets you use software development skills and tools to create physical, connected devices.”</p>
<p dir="ltr">We’re working on it, but that statement captures the essence of Technical Machine: creating a hardware development platform for programmers.</p>
<p dir="ltr">The Machine’s core are three engineers who began working together on teams at Olin College of Engineering, and together discovered their passion as programmers for enabling physical devices.</p>
<p dir="ltr">Tim Ryan, native to Massachusetts, got started programming on the Commodore 64 and remembers AOL 3.0 fondly. His pet projects include writing compilers and writing games for vintage video game consoles. At last, these skills have finally come in handy.</p>
<p dir="ltr">Jon McKay was originally drawn to robots; he and his friends founded a FIRST robotics team in his San Diego, CA high school. He is passionate about bringing his software development skills to bear on the physical world.</p>
<p dir="ltr">Jialiya Huang, of North Carolina, is an electrical and computer engineer who can’t help but improve life through automation.</p>
<p dir="ltr">The team currently works from the offices of Highland Capital Partners, who selected them as one of nine promising teams out of 900 applicants to their startup accelerator program. They can be found in the office on nights and weekends, working hard or perhaps simply escaping the heat of the un-air-conditioned apartment they share.</p>
<p>— <em>The Ghost in the Machine</em></p>]]></content:encoded>
    <wp:post_name>57797141932</wp:post_name>
  </item>
</channel>
</rss>